backstage:
  command: ["node", "packages/backend", "--config", "app-config.production.yaml"]

  image:
    registry: "" # This is necessary to override the default value "ghcr.io"
    repository: tferrari92/backstage
    tag: "4" # This value was modified by the backstage build and push pipeline

  extraEnvVars:
    - name: GITHUB_TOKEN
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: GITHUB_TOKEN
    - name: AUTH_GITHUB_CLIENT_ID
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_ID
    - name: AUTH_GITHUB_CLIENT_SECRET
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_SECRET  

  appConfig:
    catalog:
      rules:
        - allow:
            - Component
            - API
            - Resource
            - System
            - Domain
            - Location
            - User
            - Group
            - Template

      refreshIntervalSeconds: 5 # In seconds. Default is 100

      providers:
        github:
          # Catalogs
          catalogsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Resources
          resourcesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # APIs
          apisProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*api-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Templates
          templatesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/templates/**/*template.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Systems
          systemsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/systems/**/*.yaml' # this will search all folders for files that end in .yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Groups
          groupsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/groups/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-transcendence' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Users
          usersProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/users/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-transcendence' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

github_token: AgAaSTMo4k/k4glEN7SJHuF2mE49cxdREMenDLrDrJnS6I8aH1A9phCdvmJpYD4zcbWrE935ec9cZHecYtNdMcjTwUAzlqR+R9waCsrzVI6nQh0jdmRHlN9g/pXR0A2qthcOqUqzbjuCDyRi/kSGjlJLEphsBvxqxDmjyb8Eo0Xx9PSepGKWeAExEhZaXoy5wxLUd0a3SuB0KfMBqBHFgi/RmLsNGRQu4zBW7bSyP/ImA6DyE/gG1vwptEWNnFpzZb0pdSgX49mq2oPAbbZAntTUDiW76XPwfnziGOzh6Y9Z/ROFEGqG7R6iHaerlA+5LBM1qtXVlIrxYMkxfLRO1avOi/WDbkuzRIJFClQzGItwTktLuHP4MtujVFsKKRITA+hJDdbVwqfvsCC9M7jYHOyN43QQWraAcAvKzdHO1jWbadn2xl3cj+fjn/lPDwVMFxAd1aCKEhjR14+ikySqg3Y7IJjUuW6bCfKBsFNvRkCvQvpf+FyfxfyE8P1QdJH/w+EteJxfMuDC5b+3I3mXV8k/97lfMBuvlCmj5JQcslE/fLhi1CydlxW+QUTAFji6+t5ccir7kv0fc2SEctYIN4hh1NAHNyIainAjAjBdlq7ti+xCYp53qkQj6BFErhdlMAAwwkydPGKfVdnmTD+JQC0b/AMdO2WGkhXbFVZMm2R7VD6iQRUYhmOMFvlMqdnlknLIqXG/2kR/vhif+1ncPMzQCJTWn6z0ZhFdbxBfh2CgSWdoEvkEBinb # This value was modified by the sealed-secrets pipeline
github_auth_client_id: AgAdvYJuXKct91LayFSR1/BRG6denjhmwykCt9bKafIkINMQWzA7FcaWyBc4y8S807hwsBXbTxfsWw70FwPNHG3CENFyTRVuzzARzajvhxLkYULn7Jqq7yKJitLrcqI6n4b9uNAnSffFgf0S6rYGoK5KGXugLtCub/Z9d3Ij2rGzjNiPr4z5M//GMz5GTwqrsTEQqMWuz9hYZK+6nuXb7nanGKXsfuudk6Y9TycenKxUfKZbsTcJ6aNwRygKy2hW8rFubfcDH2xK88qiqSIjrkX/0oWHkP8jqzKx7X25k8ebmtXpgVH1giLJ1ONr9HshJQwarTlOk4iohDmZxBTsZ9ybql5LTCgtkqtR2pcKdbTQuk6wMWzMsJDEr2bmDDq/GbZwVYwq5GOaw5DoEC/OC/5/qC6Y1ptevGQYTzev2bXjbuM9YU46l161DbcDBCET789/KzpOMH8PkWxca/MZnt/eqTLimsUqSRJVVQWFUY0zNBgKTUX84Bx27yqq2PECRN44tBnN6arKZXMLTUzk714OKhX+AXqnMoOcVczQ5wYHGR2Plc98lRco1rxS3jlYzW0bmgCuE2/10iIBuAjOHNhy9m7m4YhWOASvax6tYKC8VhdyEuzHNTp7UZ/5cC0yxaMGP4Yk/gWPhWaiyGyYtEbMLarqNJIE+Tr26cWnDvRSJHbn4aUl5GJlFj57o2v8Y7/hBkgAFkrq797/oVW+MjQEFIeNoQ== # This value was modified by the sealed-secrets pipeline
github_auth_client_secret: AgDfmkO6mCyZ3QpYJ1yOloLReqVnedLHmHXmO53UebPbFSaYAagt69hkfiuvbHjs2ESSv4LMQk00Fp+s1FydJjr4Ps/frFz3dz2hi+uD4zqtx5ktbmmtHrNfz/dotUe8PYemBQMc1pGRnRRD7axmUrLFv9aXBRIKoMaoffPPfkGR/bBuvXxD+WdXhhqfW2cKdZRflmnPMqHVi7DqByxqp8kq9lzmPdeNvsKZ5eXsXm5x1R/Cqw1L2E0qxj5OJebePCTQfjfK/8jJ8WQ7sq//35zroG9qkuW73bnHZdpkUsOHRBg3WH6tVeqgHZCMzfJEU/uZ54Bsxk7nr0dj1eU5XgXTYT8t0vqOeqVUndaY80BUwWp7kvL4iJjDkiI9u+h8vwhM9vZkD3GjCjSc/OGPPdburZvIsxceumgSTSK4avh1gJp5K6HzTnw8EzH1xq33GBVmOWBs3nPpC7kV1wRKBSrOnc4abTkN8EObb4qwQTQ3Iey9yg4LwuIn9fuVDncvoXQ64ikSMmzYoLb2H3khYQ0GzLZ6kVrBbjieqdRnnBti08+VDMjMbm+EDWytSH5Xke2MEW/Q0C7SSM/Q2P3Cwwtm6r9SEhoxdwLJO/d/ZEPIjSTBa+KE8/5hbbtva9xYnySd2rk+YJemFHHbTkPNaWdwLOiRuAdGuttgIVyri8VTRD+zPBAo6cB9/iIhigYpP57/yoS2nKdjzuEpMK2453YbR9wTV7N+yWY/HkCiWgTjLpLxxnUef2va # This value was modified by the sealed-secrets pipeline

ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
    alb.ingress.kubernetes.io/healthcheck-port: traffic-port
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '15'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    alb.ingress.kubernetes.io/success-codes: '200'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '2'


postgresql:
  enabled: true
  auth:
    password: "backstage" # I hard-coded a password because for some reason, when updating the backstage with a new image tag, the new backstage pod can't connect to the database:
                          # Backstage pod log: Backend failed to start up Error: Failed to connect to the database to make sure that 'backstage_plugin_catalog' exists, error: password authentication failed for user "bn_backstage"    
                          # Postgres pod log: FATAL:  password authentication failed for user "bn_backstage"

serviceAccount:
  create: true
