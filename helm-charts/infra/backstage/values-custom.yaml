backstage:
  command: ["node", "packages/backend", "--config", "app-config.production.yaml"]

  image:
    registry: "" # This is necessary to override the default value "ghcr.io"
    repository: tferrari92/backstage
    tag: "22" # This value was modified by the backstage build and push pipeline

  extraEnvVars:
    - name: GITHUB_TOKEN
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: GITHUB_TOKEN
    - name: AUTH_GITHUB_CLIENT_ID
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_ID
    - name: AUTH_GITHUB_CLIENT_SECRET
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_SECRET  
    - name: ARGOCD_AUTH_TOKEN
      valueFrom:
        secretKeyRef:
          name: argocd-auth-token
          key: ARGOCD_AUTH_TOKEN
    - name: GRAFANA_TOKEN
      valueFrom:
        secretKeyRef:
          name: grafana-token
          key: GRAFANA_TOKEN

  appConfig:
    catalog:
      rules:
        - allow:
            - Component
            - API
            - Resource
            - System
            - Domain
            - Location
            - User
            - Group
            - Template

      refreshIntervalSeconds: 5 # In seconds. Default is 100

      providers:
        github:

          # Use this if new services are created in their own repositories
          # catalogsProvider:
          #   organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
          #   catalogPath: '/catalog-info.yaml' # string
          #   filters:
          #     branch: 'main' # string
          #     repository: '.*' # Regex
          #   schedule: # same options as in TaskScheduleDefinition
          #     frequency: { minutes: 30 }
          #     timeout: { minutes: 3 }
          # Catalogs
          catalogsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Resources
          resourcesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/helm-charts/infra/crossplane-managed-resources/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            # catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # APIs
          apisProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*api-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Templates
          templatesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/templates/**/*template.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Systems
          systemsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/systems/**/*.yaml' # this will search all folders for files that end in .yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Groups
          groupsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/groups/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-transcendence' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Users
          usersProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/users/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-transcendence' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }


githubToken: AgCFe+9e3odXHXWWQWj5Z87ueoG6dtxzNlF6nVjYJYOruMULLDnKXb7skrlcj2yhDETrW46T0iNLa5Og9IrihosPg7tLRMlEMttPZGWPJnAsYf8ZjYIoASaUPnu3OOpowCNJ+ecZ/ZY7rT1G/xvvwNnOG51J/TpBQVjQJGtUEcPRJ2upqjzYd5pmPW0cREjfsdWKrCVW0HEbG2e2e9OImZ9JtSoC6umb7o+aL9Y1Oe3XWvAuySbfrpX5Dl8RorQavoS/O1jMSre5658U2co/eypCy+Nnk0Lrznk5EYQsZdVvEXZpBifXsmfRdTP/JQAIcZtecj3ZJox1X9S14l1r3anB0xjZmDZpV4IE9Gm3e7uSQ0uOf+1PQXThG3GJxmncy3E64hgwsbM0Rpwhl0Xd1JXOGLr9Ym9IY56OKZVHZZKeZwnza4McExTVIrzudPeVmO7MHDoicAJht8akRA1sHjCzZF9uhkHm3/gSWifII/pyMFhxT6PFh8mielJyKk/z0sGrJIouX48TA+LFT3/DklUv9ZFRX9pGQG7WN0JaKQ+6HAEjPiGDxkBq1JOrxWHKVD0lrwrt+XDlPzPLQYCT71RvFarYp1yEs999QibU1EHokHf6V8lSJLtfOzcfxz/b+wBf2LUtiuXjtQhIBmTOcWixWJWgaEaIlYFSEiwZVVUDx+8vgkm+6Byye2t7TD2kArnpMuujcS21e3LdNxizZQ1zNpwun8FRqoz50yxhKrh88WtX71bM1v9I # This value was modified by the sealed-secrets pipeline
githubAuthClientId: AgBk9K+3+/r/a+ZyzEARsKSC6SWbe911gkTN6D5zn9W6OpfVSVKljwZW70h8EiwCmL110VporMAP/XjDn6PCoA6xI7zsSh79ZX+5j+HrZ+Uwc/TIfHvxVxfwU+joTrv7Ztu9Po0JdHn/0hcHd+UZM4ZG+MyG+M9KejMrS4g5Zcx5Yy74QfQ8CzSZf/ZI/WBLobq/SF+cTUGusMcOmE8Rcewx4DsKlbbSOAGuXlSfuva6s0Hb1TWNWhjQ+DYWLNX+z82KJI50i7tin/AUkRHNc3S0U3ouslgDMd9+Un2ml76O/WzTDiXsJsebzizEisaNvoejvtslIym1rF5UvOXk8DMYMPQ+5AFB96ttyGz3ZYuY7ogynbOZPhO0R4zuDTrAniOFhts/0iQP5VZtHrJxNQXWbVRccZDiDuieAmINWCSTX/qtFHXwD50Q+FeR4fCjyQprpewc2SBJGjbEvhH0Cb9qHXt8QIQtAYAA+6dLtIStRAblCT6jx7fRQ4N4sGqZAH8cfqTzKXysnx3vAzhQ5t8bwPAO2Qu5Dxr3xHih8zeaWZEmIZ8cnnLuo5vK6Gi5wTCG6e1/4oUM55eSFHxYBUoqC9kHnrxJjpX8KPAMsD788kC273kkKtgwX8n8y3gF5uwLif0SIS6w99f8ViMwWDHnDlSv7W2dG4MLbRxJGUqWe2GnBolzm9z2WXbR6O4i8WBcbX8ZnbC9y/sHlNqU24hh34KPpQ== # This value was modified by the sealed-secrets pipeline
githubAuthClientSecret: AgCjc/kZkojyb2wgIw/pJ00aZO5gr1gTJiBcbAOSxemIZttndaBVFf3uRbpqOeDcX3xrbWFtCxAH0xtAXHK+cqEZ4aRNqUFBXWi9j4M791ubvzGYoNOLtYU5KEHp/6WgIk+4tuaSDR+9PI4WrGy74XReDDadLkGPFU2PBW3IIUeU2hhcwk4uWtOFw6QMFCDbfGv1uc+pj1ARdZRBkSFWdRND1ANeIdOcb1XtKSzY8UcKTE8MarSXSM7k3rG3I54uuTSUiB8H9hDleUpS9HCYqM1N4ZVCOFoJRi5/iYAd5ITCfpq42TU2eAerNL9m518ModR0/s5cLSxJM8JjYmjYY1fvzZ1W5JFRG1CiyaXJWWcsX+akhhF6DoJGv+CVjGnxzbHUY7lINvrFcpK4IcqQqEGxY2jXvt7NVXpF2599SZ+amK0dZ/XsSyVm2BG+ZEoQSOnkfNWCmKOpyeCL+XhgAoo9RIph9qjEKGDSPBVUQmjAGNyMFhEGZqaiFaoKhp3L+dwXpKd+5YfDWlts6ONkLtmIc3mFK3FgE+4lSYyUh2ZTzkUDN8u20qLmpaiHvI1r9Q0Vg06nQeTczxhRPCmEtDrA58ZqyxmayYDDeLWuJ4kX/+JVFDQN77EIg1fzslXsxD3iTvDBoEcYQVS/IFZm8fHm+H7JWXgJgFiPQNQPAzPPbzbmypbBMmWNamjsQBmp9wQxWqhEqEUPCVV8g6lQnBmwxHoBK63EkMxweFGZH6lZvKXGTrV/YO1A # This value was modified by the sealed-secrets pipeline

argocdAuthToken: AgA55BD/GL+4INB9Sz0M4kEcqZa9CAO4cvlm+8uAhQmv/SzhYYH8vXyrb2YHgAYT6mOP7I2qCBElJ6X/vdVQV1JkP2FIc2UeI6+FiwDHcNNm3D/je1fsl5aRtG9ORoCa56v/4TztI5CUzV5eluPq7nQMfZ4IPZOWHU8CMxNZSgsNh3xtU6XR6IkJWm91qmQphdtoaYrfzL1k0LMWrjBM90KayBS6GrzJMu4ktEIdSIGNFWp/q208BlJDOfDPjjcbc8f+WMfB9ZYGW4n9gu/SZ5GSU/Ugz/fHI3qIp+1XKMAW8k96cBTRYloGvxrkVa6f2RD3VvwVUlImXTq8QgviLbQsleKQsVcgOKJYX1lNnFwLlr0aOKmrgyHBOcTtcjh2mEcZerQ64JVCEBLDYiJS+LPb5xSouBMaHtWDr0dAkV2kTMtReX8elDGgM+A7POF44PsNUYj50ds2HpMKsDfvrJoa2ltU5oy7HmnO1D1uh8i/XFR5VjV14z8bUeeYKapkl8nUX/Qw9WsgO3F7p5xPATD6y8LXWfsRtiNtA6XDMXNPEaAAos1AgMUAo62pgzjwERzggFK5eh15v1wzbV9B+Ju6OO+WJOHcziqXfmVVqZhAvU1kF9ewPj4gtjt3SF1nmnGycbwukMT5c87NFpeRAGOuGkjxmESgcv9wjacjHg+BjltYa97hM/f9PGJnmUkdefm+Sutbyu6dhG47h18vRr6EejhXcZpRsPEo+W/UoiDskCfM8OkG9G6Ffrpw6S1Z8bwuLVrVw2bHRl0cBPpdmilbMiwB1JVAJmnELPQRwm9GWNQi8vrQJHWIcmESwzCSs+3JIGfh9v0nbKMTICydM2ydtyeDpY4GHH3z/5C/4OF8s+OilUPNgnrXIVDvfu7r0+0xlBLIpZA6Qg314676HXIlqqT9UMTcA1raX6xI/QI9A90bYQRWLSY/ye1Bi1W4jZiZvPae6ci8CQn57ZNy0n4jbb7hut0xswYcDtpBdpeSYmOAZva2JjmEDk1ucYj233VC5iXtj4DBh76WB60h # This value was modified by the sealed-secrets pipeline
grafanaToken: AgCVFRh3sfSuzAxh2biytBSr5lw+s4vEO1S3BnWJTERSPTZ9ZwsC4Ts06YLJ3XAnJJ0YGQ/mSwMCeDSc3RjtpSOSijw9B9dViGG9bpU1a9MZpr6HZQ+QXU+LXXPtzx71n+0cwhgseTBnNVsQdZOI7kC5gKfXMcH8cQbNFXwb8cYD8IxY26QU/64Zx5XdUaJJgPDHH9wBuI7aaaaJmnQdYQxb8rIM9DXe2X2ni5DXtJYaRVib/vA1BtamlU/2aN8Wc+t4krHpOTFvMUeCvv2UbLMHMfkXXnVRS/yPIZKAoPe+oqmVYs+6VKTv+3u2Q5YANkJ89l3NXGSrfMh3Td7JRMCexn4sL3JTxlLdCnjEEANXPmsuW6vbW6spSmrFoloPAcWjgdxWsUrLfKd/x0OQ3gm95CkrMJRCBV+09bksLp3DppHL2ZQrUpszQXfbZbk5EkvQszBaaJMTs7xNCOfd0axjkO8mySkzTvQRbMDHKaDY9cy+J8vo5kSsIXC1+5fpYuGEjg7YfqirmYDBbf31WqU2snW5aJ2Hkq7Kx9Sfm7D152uMSQN6PkozkVEU2ZzFl284u8aZS5ormqKjO+6vTAhPej8eSTMbGy16d533/hN5dc/OqSq8pLm0f0RVIQHs8WIlb1VlS0LmCz7pGK9AXJ6Qqd49pJz93PcgSCPm9+wdcdJf1Mw9AO/19ZiiEHHlRxYdU7qTngL32UQJvrf19I77DKKdnZhiqviZuCfgvBW2QXkzBuaRsFqlvHQsNMgk # This value was modified by the sealed-secrets pipeline

ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
    alb.ingress.kubernetes.io/healthcheck-port: traffic-port
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '15'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    alb.ingress.kubernetes.io/success-codes: '200'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '2'


postgresql:
  enabled: true
  auth:
    password: "backstage" # I hard-coded a password because for some reason, when updating the backstage with a new image tag, the new backstage pod can't connect to the database:
                          # Backstage pod log: Backend failed to start up Error: Failed to connect to the database to make sure that 'backstage_plugin_catalog' exists, error: password authentication failed for user "bn_backstage"    
                          # Postgres pod log: FATAL:  password authentication failed for user "bn_backstage"

serviceAccount:
  create: true
