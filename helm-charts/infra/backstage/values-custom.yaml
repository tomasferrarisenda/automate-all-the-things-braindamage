backstage:
  command: ["node", "packages/backend", "--config", "app-config.production.yaml"]

  image:
    registry: "" # This is necessary to override the default value "ghcr.io"
    repository: tferrari92/backstage
    tag: "19" # This value was modified by the backstage build and push pipeline

  extraEnvVars:
    - name: GITHUB_TOKEN
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: GITHUB_TOKEN
    - name: AUTH_GITHUB_CLIENT_ID
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_ID
    - name: AUTH_GITHUB_CLIENT_SECRET
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_SECRET  
    - name: ARGOCD_AUTH_TOKEN
      valueFrom:
        secretKeyRef:
          name: argocd-auth-token
          key: ARGOCD_AUTH_TOKEN
    - name: GRAFANA_TOKEN
      valueFrom:
        secretKeyRef:
          name: grafana-token
          key: GRAFANA_TOKEN

  appConfig:
    catalog:
      rules:
        - allow:
            - Component
            - API
            - Resource
            - System
            - Domain
            - Location
            - User
            - Group
            - Template

      refreshIntervalSeconds: 5 # In seconds. Default is 100

      providers:
        github:
          # Catalogs
          catalogsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Resources
          resourcesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/helm-charts/infra/crossplane-managed-resources/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            # catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # APIs
          apisProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*api-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Templates
          templatesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/templates/**/*template.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Systems
          systemsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/systems/**/*.yaml' # this will search all folders for files that end in .yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Groups
          groupsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/groups/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-transcendence' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Users
          usersProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/users/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-transcendence' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }


githubToken: AgAtYrVk4hd3LdzN8hu7MbqzcYsKGICxKbLih259tv44RlMTYgLUBcl0uLO9kIpdP30BgZO8Pm6E7AOeyq23D/0YDEEKMKNcRxg7xWCwPvsvEZVa19ckgiYiwdVyA2hVzFQQ615vorNToI2zc588IEguyKjhDTa1v6m7Bvx7zD6RDeo9jtWDT8cifznV/oHSenlJwuoa1Om4hcoO0VZBOEjkEfFZF/ygbCygtz5lAsQ5TdBI7jyrYy40vMOVAaaH2DdPmAMFkP83i04Xak4K5ZARnhu6UyTECi4/ZSU5L+1z7szbDZkZxLDQ7gdgsmlHEovkG5TqAyglRWbVASQtDTc7+Qq/K9f/cgM6+NzDmKgvSsP2VT7gF4I2Jk8ITEr+e5kqFxVSj15bDBs18jmvt8vabEwjgUXjgxIcd/bo47jScax5zLU+hWNnqpAaeRx4ex9JKul37PtmEl2W4VnZr43ywxGaGvYrD6C9vUuDjyBy1atPVkaTN1a35zXWfgPQ/+ys+jQ/32JjRw3IAt+HE5LQiV0etaOGNnZPpuDNPrdoR18aEpYWSYQEngY+xULUVP/2iGhGTGPgZOiixddMTFrqvvuOZWGoFDAyM1FA69yHZ4FG72IJpieLuyK/xstlrCn5ykhiQ3S2iv6ZDxLwZdQHAQ2OiF/O3KuIrQgirCM8bphYDf1++SzSBJnpnpG8u65sPGtHtkJvnlSSm1BNhnysIQTG4E019mspHPXVxgUqEKzGdeYTlS51 # This value was modified by the sealed-secrets pipeline
githubAuthClientId: AgB+141GeGwR/l+oc2lTbEUVf/2tGGaY+VZTgPVGjn8w14gmKKXKjNPrh/usxhcj/Y5U1HxCNe6NGaF9SgO1fP1A531p0+ANzFgKHiifmT8+YV0J/PSYtUx+mfVAZRvlMB0e5zGkhnvoIJoSEZR/H/7MTfJ7bhNxixk9bOWJBdfwvxkywhkw7D+j8dNxHNct8noWK73R26Cck6fihgLFKUo8HXh1n5/LoxTTW00MnLun/2OVSxx+Le7/eAyHmkMQyP6nEDPtijoqmyQ0LLS/wsw9JFyARhClyriC3tl3/rsQgDWleeg8P2xo+QxReAkCpng0RMNMAkGz1gRCsQCdy+7uWoBiwB6QOltLrYs+/7MGXdDSibq1XxggpEnMG4hr/DCwpfvby7hY/qtn5+eofyDg4jFMW8xj4c3dZmgcV/4l3THDb2KdW92sOuwsGA1UaOF9Oe4s9sHB/Le5DWafgmPiJaKA8W6DHmxV/b7Zv7eS1e1ZYRwIjWuHpJ+8m2XnJxm23ZrRPh7zdptBZxlanqVJLs7sttJFCKAY0IqZIj9SOg5/OVMiwF3btLOftWmZD6SJtwUjBlh2LpJLVFWNh9XYnipbdwTBTzX6VmKpywUJxygQ2SEBQgvCAWY4/zwZA+ADepFBL0D4xSORcxIi5RQ+kps/SIeUyhWY8yCUaSTIHslcMpyOrLhhT8ZhRT/pHaShO6Q5FbfaIWMeOD3VRazzYUVmlA== # This value was modified by the sealed-secrets pipeline
githubAuthClientSecret: AgBs63nCNAGwwVj9QovtkT8GZImCcrk2jCzZGGuvgAUwr///wA4q2VhSOIEftWBNzxBG4CML2Vts6p5xz+FHzO4pM/V/CHQO2okuiztIKIGiM2C103zDwk2lplG7ZZxK6VeSAUOXOjOtlLtRYNZgx1EdUskzWEW+uOE3ev3tjipB7YuI/9Obq3uny90rZRCECC2unq5tAeTbFW638Lfhq1DHsnSCUndutcVL6NY9NGZlczK6Q7RFpassAzeKH94/QIP/LyEH9n8qa74BaxOkTy5DWNrZY+4tIFanAYKBshWUUgAZsPMDYbkyWRovlSlslG69lRPW/0I1rfAhQyqocXuGr0g+4guK6HA2sp0QwhfHjiuR7EaFwVDB3zlTauBn8g44XP9YgK/YubC8iufJOWf+yGUmfM79nB2qW2uoCYyr8+ZFLUsnkqacBwQbAVU0zcvGWSk2Fr5pL99oZo0Y53BcQB+5rKBdERVpuOkreIV3qkYbXUXOogkK9AWymS+xEdJXDBR6aVwxulkfE+vQAsnEGNf94mg3IXJn++ERJYi1MbtJzEAV67R08OX3i3qZmSpAREoOwRKuCAcUdJCcR2be3B4F3XiBRjqTfR9mOuWOtTrVGGYQXWXvHYpN98m8Dp/BXm+uRMROIEo2wvr6X88Ty4uqQHKpa27B1Ynfr0bmwjg11pv/qcj7C5xRZn0cuLBhMfeBFZNgksej2sHwZR9TwOVbMbFIEMMZwfuOM0wbrZ5I2DQuhdC2 # This value was modified by the sealed-secrets pipeline

argocdAuthToken: AgC/dcNoYjZs443FfopUxE9lKXoRdSJ2K8YJzQBfcRcwSSvoKyUwfNvj3TDDprdBLKe2B4eWijMsTJLYl0QMzSIYC/UybAUGquWnPLGuuB+80NXGqfgNbM+DKmsyC2+NVa9dfnUpRixgIDuP1lZXCSwQH8BWoL7DNYGoj9WIMDDpyRuwuO4Ts38dWFN2NEtTnbX8g5Yx4NDYAAL3xvyKfwr0bICFE19/wZTdZ82LMp4Am453oKAModwiVADIfNISHUHMRVsEpmFfNMkJF5ffzTJzve4/FW8QgVP0vwFY6uh1X5eYaE+3St4z6YIefJ+Fj2py0Foo9B1J7l4v8drBVmQnrWReQVI0lPljgC7g/Rq4IQ4Tn7ZAX6LzwU0tzwQsNcS2G4xS4UkGUDJmymf9VVOkao65Z0hOfqK0XX4fAwPuBxuW58Cs4CYocNGLbOA53tEJXig+3qVduJsQDNvAismRwkd/aZqI+FORJsYKEkA/x+5uaglGH/r9NjvZSqfZ7MfWbCMS1z2DxX2YfPi3B0i3fV5XeeeVNHI9PZ/yseXDK0NXEDjTD5rcpUsMX1m3hYpd8Fab9AUVlw3o3wnXV5ZLlXzmmzom2KJESlQ0lzzZnRJoGLsnAlJsLcrlzYUetLSM0YKGbpcFBvMLzNbn8futI2Pooo7/PQ4cEUs6SvbTA3Dw8Xzq3PzMP5W5WQLdz8ctTnJfev3ZrflfFLvl # This value was modified by the sealed-secrets pipeline
grafanaToken: AgC6DCfRvaN0KJ53e1RpY9xdt8Z+6SMOwuNHtACA0PZOgj3ZfOWvyZWoFFKZawCVbZViJOg02jF3FLJ54egob/Y1wM7bEGiUEDnc0QQd/7O0yvkoiRRyOZ7tCaN7s3Iq6y3OT756XWEDrLIF5qLWPPTgJdbJrIhyg8Y6xjJ9Jlh87Ld+rdUXrPIYCmSZC3he3/AZ2BzVRI2htYzyKG8UUvHf0Ew2DoVpZU/PAXqZIHFvRQtHREf/YtgRWhB0Yxt0WFbGVCTmq2M0CFcPcb6EL4Ay/kroUDLbcxIXyVUtpJHRRTOIMFzPCHlgpdo5XYzXU1cckpp6fwJ4XfWllVunvc8nZhNm3c0mQWh2eQ6N9TaSVhUX9uj0Psj73EmC95MKLYiLLmvUnB0PZWRW6utVtyxblihBem73a2JCINMCZwtZxfgmauftEcbQ3uYE5XncOiK6Bs3opbdlrorRiV4TGkQJhfBWKcnj4IVF6LSt7SPElDUUFtZoUOgeFAQLMkZUVwVg89giVUMJIOmjeO99woWOV1cfWJaExNQ8QfA70cnxktM+FIii0wTt2X+i0Kr9A+3iO8BnHPIJ6S/cb/TG7Ir9VlkK60GAmukBNHN0ycb1ClNsTjNFzlOMv9OU0N04VAFTuE+k90+zsLKLppd/HF94wudKYFNw7hX2d9GrxNEvrDSTTwAwYBMJ0JCuanZN+DU5T/5/fCMVF4b0fO5UrOm2LY7nbgaYZIoTWusE/MbdyeB1JAdSKiVgoao53ViX # This value was modified by the sealed-secrets pipeline

ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
    alb.ingress.kubernetes.io/healthcheck-port: traffic-port
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '15'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    alb.ingress.kubernetes.io/success-codes: '200'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '2'


postgresql:
  enabled: true
  auth:
    password: "backstage" # I hard-coded a password because for some reason, when updating the backstage with a new image tag, the new backstage pod can't connect to the database:
                          # Backstage pod log: Backend failed to start up Error: Failed to connect to the database to make sure that 'backstage_plugin_catalog' exists, error: password authentication failed for user "bn_backstage"    
                          # Postgres pod log: FATAL:  password authentication failed for user "bn_backstage"

serviceAccount:
  create: true
