backstage:
  command: ["node", "packages/backend", "--config", "app-config.production.yaml"]

  image:
    registry: "" # This is necessary to override the default value "ghcr.io"
    repository: tferrari92/backstage
    tag: "16" # This value was modified by the backstage build and push pipeline

  extraEnvVars:
    - name: GITHUB_TOKEN
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: GITHUB_TOKEN
    - name: AUTH_GITHUB_CLIENT_ID
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_ID
    - name: AUTH_GITHUB_CLIENT_SECRET
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_SECRET  
    - name: ARGOCD_AUTH_TOKEN
      valueFrom:
        secretKeyRef:
          name: argocd-auth-token
          key: ARGOCD_AUTH_TOKEN
    - name: GRAFANA_TOKEN
      valueFrom:
        secretKeyRef:
          name: grafana-token
          key: GRAFANA_TOKEN

  appConfig:
    catalog:
      rules:
        - allow:
            - Component
            - API
            - Resource
            - System
            - Domain
            - Location
            - User
            - Group
            - Template

      refreshIntervalSeconds: 5 # In seconds. Default is 100

      providers:
        github:
          # Catalogs
          catalogsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Resources
          resourcesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/crossplane-example-manifests/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            # catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # APIs
          apisProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*api-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Templates
          templatesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/templates/**/*template.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Systems
          systemsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/systems/**/*.yaml' # this will search all folders for files that end in .yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Groups
          groupsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/groups/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-transcendence' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Users
          usersProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/users/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-transcendence' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }


githubToken: AgCQez9RTvBEL7Af3qL6yVTIzgG99AUBdt1+XVQjqWsElNJ0ZNwA5RsUkN1ZOA4yObpoB/SWy/PlmgxINZGXyYpwhUCJ5RzOQW58UwL/zLm2WaDdcfgOQJ+Q2d2AHKRCQosaGu0fMi3+ZLN3WvvWU1z1Lc6Nd4j3obXqA8dGlsGy4LkS43g9YYY+GHr3ms+NfG0zE+ZApPLSeog53t3TESFl1NGL5ShocIrTycBvYFxaJ8kFxXN5G2lSsbUO+nprc8GErbIRICRBgJXO9UrezafFXEzS8LQvMVEFD6v5dgUnOAAq9wBLrQviAU3DTLBwQlW/JFkX5RywqnnUHJFenfprMBFhKCfSV8+rc1PrIcZ6832IE87Zpnpe5iIIGYyzWfuhFS6yKR0pH5qcYawylQdVUEQGriQnhAc1Xcqks2Ex9xkacvt2U3FCZ2kd3m8OWuXX9qGcsVtHsd63YdeXbTcAFAd/pOx/u4dsNbwvQjAgkfnBvG2Nws4f4CuK5ANkCKWVKjjB5fS6rR77//D1jJ9tPd4/X88yMaPtfrPJdWcTlRXgvf0kPqHuB7uk+xWDUpr9EgQclbKqPid3c0Bt+4PL7lG2oAycvvo+9n9uM3DqiDq5/eQ4RRs3/3hsPSATZKA5IX2VzpSgLohu2xdqXMR9s0mje7cpzwd1Zp1HGOZIHmkT0ir13WcxBEU+MmVqrnifGCzDed3H1kuDQUSGQG8bvb8dyJWrYH36svaRZSNfocdfLmjQ3NU+ # This value was modified by the sealed-secrets pipeline
githubAuthClientId: AgBTtgnYQFlFolAZBI8FoI+TVSTeE3SVw8a735M+4YRCBcwab5Je+H3EUBQhmJCrHBjyPtTZRbQcmNbvyLpuGu+Wy+/H0z576UdEo5rnvG0kDGVOcVRp/9GK310kaK0f3SOBmdNXLRNbLX4DzC4K4cmwvYOrXRKw/NV6u29hT3D3CfRhGEvTv0LLHExFmMkeblopu4mQhUnFfypPAZiOqlDZDp5SF2TUms7Ex+lU+0YwUmWVdcqpIIorn3EVe3A25mOATyin70tPg93ufemX07aawvGWidzp9XcWyjraK2m+CmMt105xp7RqviRDs6gU6WaHEsFfh8evIgt5whZTqZ+2d/DH/+cYrUJ1shVwh9jsM+JFSEh8HFBq+rPpWvWPdZsx7zfEAZe/C2e5PoeTWZdQEkVYTZObtBLMJFjjxuuBHYA6hFyPuf5smiFDLD3ZI08sk40rpjvwFvZJKm1RYZhoCkCdF6brCJqk1wl/nHKVIcHxX4Ty3wmoe8b4KrIR3S7QDcmRGtv2+05zvy9siwDlF61U5YpHsoaPRVh/0xm5ieN2mIMqqd9haEHpbU3+uXjrlm7Sb2xzBM9CRYvcoukKBluRwSBE1B9Hq3PQ8Y5xB8XsEbc/m2nC4FKOJFQMDpLOwTbL+WF0y9tVWiGbqIIZbUMYmmxl7InT+kyAA4Rsz1rCYZtup6LcH/yuLsc/EsXsXTUcH4uTV9KgU/P0SJA82Pzgow== # This value was modified by the sealed-secrets pipeline
githubAuthClientSecret: AgCC7C8BUMQZ2Lf4eXXBEoijvaV+0DmRDZhExHkaaUDp1jX1WJnk3VMk6B5Q+GheZSUta/kC2PN6SC6hrg0nP1DdMYvmXaxf1omtjaooNhAgONuWmb+7xRPqGx2MixBVwOfr/4cTHpSJnsgOczLZby2DgdwlbSQGNeFjCm79zvudoMOXB1Sr66buSIZgf0GnUvkHQt+N96bMV/BvMOstVazNHay7c+sk/hfeJl7b0/W0LT+V22syNwfrRgLVBXVl6lgE69vEihu5SoUgrZa6rivBawk/u+lQ2+iIkJpaVjPgU3P0yJ5VW6mnd9eL7drpXfZIR7F75wC+DX+nxFc3cQJOO7Q6WCWqc8IxwUlGeSLCcoHJ3f3ZD7Iwz5WZtdigGSi19gReMJyOTZyxymUxW1Q2T92DMJ8ITVQkt21f10FSFvqk2dEuymhJoIYvV+Vp/VyjI2CK2Q4IIP0fsUNR8pj/cQFlQ4PsVJqA9JZw14z7sZjBKyMExy9dYE8RG4C2U+URth+lKn0omlLu1fzPZ6PaYuwpZGPALz0lrZM7Bb57qLAGbfqDfbZa1rBTKE04qcgA24rPRjfdX7HyQEuzklx7GHiKfNFB96aQxr/2qsoZAi3j2YXbqgaN99ZtvNImSchAUxUE2CxMkj3NK/yYnOb0jgLr71jjkdKSXI6/tQeuOPYuP+FKLaEsM0QYvsqdr0HmJarlwhGf8Cnp+SS+mYgXo6bJcYhS2CjuhYz9cpv1C/VtiMu03fo4 # This value was modified by the sealed-secrets pipeline

argocdAuthToken:
grafanaToken:

ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
    alb.ingress.kubernetes.io/healthcheck-port: traffic-port
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '15'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    alb.ingress.kubernetes.io/success-codes: '200'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '2'


postgresql:
  enabled: true
  auth:
    password: "backstage" # I hard-coded a password because for some reason, when updating the backstage with a new image tag, the new backstage pod can't connect to the database:
                          # Backstage pod log: Backend failed to start up Error: Failed to connect to the database to make sure that 'backstage_plugin_catalog' exists, error: password authentication failed for user "bn_backstage"    
                          # Postgres pod log: FATAL:  password authentication failed for user "bn_backstage"

serviceAccount:
  create: true
