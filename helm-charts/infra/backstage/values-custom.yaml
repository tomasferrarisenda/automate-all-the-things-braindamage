backstage:
  command: ["node", "packages/backend", "--config", "app-config.production.yaml"]

  image:
    registry: "" # This is necessary to override the default value "ghcr.io"
    repository: tferrari92/backstage
    tag: "22" # This value was modified by the backstage build and push pipeline

  extraEnvVars:
    - name: GITHUB_TOKEN
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: GITHUB_TOKEN
    - name: AUTH_GITHUB_CLIENT_ID
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_ID
    - name: AUTH_GITHUB_CLIENT_SECRET
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_SECRET  
    - name: ARGOCD_AUTH_TOKEN
      valueFrom:
        secretKeyRef:
          name: argocd-auth-token
          key: ARGOCD_AUTH_TOKEN
    - name: GRAFANA_TOKEN
      valueFrom:
        secretKeyRef:
          name: grafana-token
          key: GRAFANA_TOKEN

  appConfig:
    catalog:
      rules:
        - allow:
            - Component
            - API
            - Resource
            - System
            - Domain
            - Location
            - User
            - Group
            - Template

      refreshIntervalSeconds: 5 # In seconds. Default is 100

      providers:
        github:

          # Use this if new services are created in their own repositories
          # catalogsProvider:
          #   organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
          #   catalogPath: '/catalog-info.yaml' # string
          #   filters:
          #     branch: 'main' # string
          #     repository: '.*' # Regex
          #   schedule: # same options as in TaskScheduleDefinition
          #     frequency: { minutes: 30 }
          #     timeout: { minutes: 3 }
          # Catalogs
          catalogsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Resources
          resourcesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/helm-charts/infra/crossplane-managed-resources/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            # catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # APIs
          apisProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*api-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Templates
          templatesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/templates/**/*template.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Systems
          systemsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/systems/**/*.yaml' # this will search all folders for files that end in .yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Groups
          groupsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/groups/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-transcendence' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Users
          usersProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/users/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-transcendence' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }


githubToken: AgDpLaI3AAy6QUoUENLEUe0k6JTmgroSlpyOU1L5ergnxPpQwaFHiO0EL8nLJT/pvBPQig6Ahb5mQs4Ot/PMzrxObDlk09KCjQRnvyzZKlAY6oMDHl5qSa7gLUOPVxvGpgdRknPFdfOxAmfbmXmNfUzdatfD6v/Oa6VQRsy/WF4jJJbktrzZFn5o+oTtU0DJy9CkcjestDAYKclv7HuuhUdx01jyZTQrQuhi/0DcsppuebSqvPKU/QD8G1bMyiXHiI8uWWNZAA4AZYQ4mE89Hf76OYXO8fmYIDMr8UWLWnjD8b/a3vL7uRWJI+BbL4LXqyMGaXMxcG4mxywKODDzkf/Wbyy3JkrffzDnqL720dg3XCZJj8uiHMQxRYehIzdZVve4xEPpjX0YxcN0v3K/vFlWqf/erL8VZjrpPnYLgkZF5otBLh8rwa3nwyMNuhNfGjvOP+zhXs3SwdA6JMp1aXt0hDnapmwAlXoIYRZFA3TEMBdzPkqL0SeR0+IeSY/fmn7ZyMOyrcC7QKx3UDK68ihFVKbrhYaM4gt1lgZXRY+i1HyPj9B9f4smd9S8R77hsIbjmnFb9MT/l6IzYOWQ+LcVlzyi8EN795lZTCT27INo6p3gqYju44/6KIKvx/4aZSlXAKUrhH2epRYha8ZkveaqItXgYx3RZIz5MUhZlhcDuDlrXvh4e6DVkmAdIJKbLoM= # This value was modified by the sealed-secrets pipeline
githubAuthClientId: AgDXElGosb/yDWhtkFfCdvU01LcBVZ2p2NNK4jeUZ1vax6Swg7cswR3gBMwr77X7UpO4zDZ/cp7gCEeMXS1sK6pi7dyFnpPSfziATWVxZJemLbfhZBlBhiAsNVTtM0UJlzI2JmDXkX4VhPXxn1gKxZw06JHRM06vlbSdEEfU+7DOB4SmMPikTynB4h9D7r+euAzTuHP6xVtPSW6K5FOlaDdpejf6UzPBdpxy6TPqRdcfH/EcdsJcUox6CvXmcFlWCbyg8tXIQlV5LN358Ppwz/fjhXLhRFgJAPKMJLOKJ0WtxuPSnWk5YlxwWu0ft4y7gD9U4Cad43GFIp/N5yJu1VltsE2KV7SXv9HcXoVPf78U+2bwSyXwU+NqlEa27VGcv0h/V/0HMcCNPh0skRXBP9qJ1BlGcjbmjvdjtd7ZK+s8wUINMy9hUhf7qcuwsDFr+XNQ2t/xBo/ufWHWMz01S01bvfDwdeS9ngTcJRMlRC8BWNE95xV0RVr2kYkmGvWw74wz+UuyelveTLmkn6HeGCn81c5RlUZogNJyWZotl6G5i2+d8tluMpPF0cgltkeEHLKkwvkPGpGYLf92ErnBN88rSbRz0Kcl4gOIffmpyXlavj/urUHjKWyCo7gi40KPZ4e6xtUKxs5cCY940dPnGAWkWcV4k4QQN1KMQnDvnGIQWkzSqP4uPOIgzOAjesiYSb3a4ACvua24lA2TK2398aywrfcXfw== # This value was modified by the sealed-secrets pipeline
githubAuthClientSecret: AgBvWoYaaz/caOVnQALQN40kJbWu7WRG+F/vTX/3xXYf1o2US+g+yb+BXhZzgo60RGuB1ojGAzQcjELbsAmTh23J1B1xOdw/SOBODMWlUJuo7alIW0YDjNNNeBNd+kCzsbNHR7og/zG7JApx6dNciTk05hdPOG8MK7CjAC7dR6J91zyBUKO7nO/gD9qN6QgWj10dGjTo08zY8eMOxz1sVkeVnuRLagp6TzMtr6zZb0PCNMt/jN1xjm88Pb9AaVKUkSQZ9Iyd4Tu+/mnrmio7A+IrmBjdKEEfYpcjfvggQbTEJx4WgFJm+w5q4igFaGwdMhFXk9uMQGyKRDc+A+O7mTR4hZUlr4N1FFc/GFfkhRqxXMzscXjZvVmgXmVRuy49IFlINiGzwniherwCdA2cG8XMCzvtznUxpioINh/+TootOlVpNdLAtSqbQqvHMW8oH/KPOXBvRBMrh9Qc9L2eCKtgJjv30OUpS9FTnfTqkj+7Hc+Pi4j0Nrz/VU+d4LbwSpEGrkgQGcwEraYx5hP0rWNKy/K5sEHUD7XwDHETm4boN7W4FE3OZUE3nysXhkoXZcdwwV1PLms+2o+JCbPoOh4FJWqBlQWsP5PMq6/yt9iQaXgrG8AvCHoS/cq7eQP2Vrasni6ogWOIWQecc3CfXQuC0O6XLM6V6X9k77nDdfVB6DUe6dWSQWqWMVkEblvXr16LSIsGUP6uzQvcivA/m/pI/m94X9bU4vGDugwiR43Q3s1iGrz8e8ck # This value was modified by the sealed-secrets pipeline

argocdAuthToken: AgDIbyNJRzg+o0s0HLV9DY9buaxTeHY2eiu1d/rmB5YLo2YZqBFOvKkT9U6YAhHekg3vl/AueiKrZjl2/oS3WVNzLjvFr4j6Cp/WF5CRB5cZXBnABvz2x/0qTw5Ffj9EIoyl18XoQ/RRxqqRcSNsy8dmtJNUya+D2FNjfdkeshxVrj+UYzm4JAv7u+uNBokuaBdRNeMdtZzqCDjWptGSvVc/Gh9y7up+RtGuMZhGHYm8pRjzcEcwnCuLo6uDK0JOzknLTFqerGCIg7onbrFhgdLL3wKtwrdIW7rBsgj+dJzFTQuqDuyWUJgWcjihZCWObfK2f7hj2E5Z3X59oPi4lFmOohjPMmP+jgmwMuDXU1L6BR99niDh86BG00D6TGfXa7VDSB5cdZYxMnbjQ8Yl3IwCugnYR+5KvLOmDvE+zvGPEBGKcgjQVMaELHJwX5Od6pE16lCS+xCX3dnRe2O3dEDxGAs+2TE+ITNTBapai3KEtjoznJXyxKPKN0QxcSZmjSwupJwb5VGqrCjFcVqUQ0C1PoOg9nwJ7nqtHJI4GORK8ECwOuEBvzrI3r9VbLlS6m30T4Rs3rrNT4EJ57LHrpd3T+TtlixqPDfso6ISOApTMtAOMUJhfiNUkQ46OtLK9+ki53D2+VaDFce83P8Hc2q+EEQ0Tuap7Gz33/eX3jPL0Zg9qGKik8BRyRHBKrtsicVu0VdeC9Q17Lvmx4YsVjiXoH5yoAU3kilHsJ3jEcFaFq5pGn3QWMH5+0+hKxXdlpTLJXHIZeGXdPYfj3cxURZtavURheVbzl12x75AAR6dGmMFbwqvQuPktsiITQe10bUvr5s7c6weh3n3wavHVLjuL5orioeGovBlm5WDebEe/rHTAwRh/WsXuTnLe5xwZI5HXFNlYl4jJTrJ/sxgYprsJ1LeIHmEO6i0hjlqWqcsI5pvzfJJiFyO9YAwIH3Gw0qD9jjXNc8KUMYHjEimUOX32BB8tH1ydraGagKPhH0dApa/pDTEuhdjLgzMMtsWP6P80MIyA/ISV33IaUMq # This value was modified by the sealed-secrets pipeline
grafanaToken: AgB9B8oGZ2vqVcOlPAvY8C7dvVBCyPL+rW5yOivxLriZUgNCRMOxZKcds+z29/a/y81z4tdSrL/INFkR0+9vOSD51VhVJqUK0WUZoEFRxNWvCH7vGav76zJV9jg5kFu214wpOF+YDRBDxvisMgWHR5o10XDhH48X97U0Wu5fu7bUcAjx+UnBbMnqqOCIsaGtMDYrk7LWozg/JUAPkp0QYkJciC1jmVc6u2BtQYO1O2J5A+hwyY2rECA2BQRPooubuC5BLAuG/JR+Drp+9i+yDEgB04JazYBF/4YL10srAbzUZ6Li58mps/i7e0plXgzau/7M7b8urSsWFvwjTKPvePvl+MrlN/9Bzh2tT0Iq/jGdTqUtx6Qokvt0osFnXbfEcLPAP3swVNpJB1mdaA6qF60OOmB/3R1WKeu0ZSX5ItbAyYeYaWkmLSal6b6JzsxgqRvYuxaWZ0wH0SghHUXFzTzTpBfgeQ99CqsaEMqsqrMZd7bpEkBRoeyLq1ssa8w/ECkM9jUag9zJbgik4iWhnLvxhnAENH7c8OnQaGZlE5ucSVZcoXLMrlVOJO5iENY7Syi0njPuZc9HyF4ZTtHnWmdKF/8uv/btrjMQPvORMG1EPSvAaEPf0sEyQpe9FxtHleDE2guAphw2+PpjDnETFCDnQY9QbMGF1PB8KqvUaxwdAqWXcVvnKqapfXZku53JYbwzJg9IqiuHz/akvXMOuQTUJr/+tDm82DZ4SJXnVFMQA9wGfH0ZSvtyq6dRZvx5 # This value was modified by the sealed-secrets pipeline

ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
    alb.ingress.kubernetes.io/healthcheck-port: traffic-port
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '15'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    alb.ingress.kubernetes.io/success-codes: '200'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '2'


postgresql:
  enabled: true
  auth:
    password: "backstage" # I hard-coded a password because for some reason, when updating the backstage with a new image tag, the new backstage pod can't connect to the database:
                          # Backstage pod log: Backend failed to start up Error: Failed to connect to the database to make sure that 'backstage_plugin_catalog' exists, error: password authentication failed for user "bn_backstage"    
                          # Postgres pod log: FATAL:  password authentication failed for user "bn_backstage"

serviceAccount:
  create: true
