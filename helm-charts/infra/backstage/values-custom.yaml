backstage:
  command: ["node", "packages/backend", "--config", "app-config.production.yaml"]

  image:
    registry: "" # This is necessary to override the default value "ghcr.io"
    repository: tferrari92/backstage
    tag: "5" # This value was modified by the backstage build and push pipeline

  extraEnvVars:
    - name: GITHUB_TOKEN
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: GITHUB_TOKEN
    - name: AUTH_GITHUB_CLIENT_ID
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_ID
    - name: AUTH_GITHUB_CLIENT_SECRET
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_SECRET  

  appConfig:
    catalog:
      rules:
        - allow:
            - Component
            - API
            - Resource
            - System
            - Domain
            - Location
            - User
            - Group
            - Template

      refreshIntervalSeconds: 5 # In seconds. Default is 100

      providers:
        github:
          # Catalogs
          catalogsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Resources
          resourcesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # APIs
          apisProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*api-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Templates
          templatesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/templates/**/*template.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Systems
          systemsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/systems/**/*.yaml' # this will search all folders for files that end in .yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Groups
          groupsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/groups/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-transcendence' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Users
          usersProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/users/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-transcendence' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

githubToken: AgBhDyBg1vel189pZfWjyzVtHZ1jYAuHYKNytZVmOqbVxEnvIeBSy1FrGRWLH/VyKfPXWz/aQKobtJLtCQZ6C47Ju/zdLCDqyT/77uX+ED7aJ9N2mWh3axgg+a3ME9/B663fmF4EkU5k/hkC3vaWPXfOP8+LX/QDKJMr3NTIqGExcl4RodiEHEhp46045Bk+yrFWGjkynsrtmymWy5OzyupdHVOLGN7xDVZxZ6oZVk6VJf0agclMeind0uy2XwWIeqDRomowu10jFpHDP3LGBn5xcJflo1qW0IKZpACwZhX+T94RbRjymsEsDkU6KlKMDHn27T2mPxewAT+872pDkwuPGsA2Stpv5m09n7C8f6X3Qjxv5zlRK+KteA8J95wGnfVXP+9jCFqn842MiCZqCWritAKt/K9V37bkS3VyWQn75S3uMgw1sxua9dqpfOBJRKQzCduQjf/RFwPt8jdppn0RevNAUi4q55Z7cg+4KC0rAARbwBnQCRe3L2EcOtlakFObn2LnuaQJGpq4A9ICALxrF6ZB2GgnaK9X2JxcnceCOy31MPrUhyZ2bbmD4Wu3QkXUTBOT4rDSr8OzLfa3sABUWZ511iIyO172faNd1tRsHUQ8e36LQup96GJ3ziEBRYJABLPtyB4NjH2cIIRIMDfUTQ50aKgRx45eyetcPF6TUFxpOIcoZTAl6ai+9rYVRWcw2zDDN8IpFVO8aQpcJhA4JSn+eFhJzgwPHOmJ+L+oe0dOnMyeFtlj # This value was modified by the sealed-secrets pipeline
githubAuthClientId: AgA+O6fuiRDNt++tgCYjOG1/xeJhosP5tX24JWbPMn6/YgG38Kx8idU3oLGECRXECxBpHTANFGxwbpVDfivrjre8MpInq7bTWGGa9PYp+kvilwFeJZ1vkLtDoxGkrqAP43VlwLvzDnIw+lqSDh34XNHfm0MGkx+JzzGBHOCytn6m1Shjb9Ddrsr+o9IhMV/7G1s70nE+jBFaoXPB6i7K4a8v5zxQYKgvRd5MjtrNJRlvHMgNIx7vNXPtQlKLejCbQv5aGEqu8TizO0/2+V69vsEk9pGPYFBudXSgPazEwa8m8Ei3zDGqlwpFa2lz/8tilWSirazsC+O8WlMEFXf06omaE3tM8Vixx7BaZY1eM0rmWdQB8YFmG/C/A40hiaBMriaOrpE89liMOLMyAuwkBaJJmYS0Ah6fbHY+Q+OPW1cIT1VwBrjtVhRyPNcTZbDL9YadT5+tdD1R5plXB5BjloVYO+OiAJUf/K26zI7olaT+uGUXNKhjPs6f5kPagIamJeXd9OUttZzcxRgCggvaeJ5Q2XTH5qLXc7/99J/OLh6Ip1NHn+vKXUvJrGH4wJQ5AcRYvdB7iV5/nl23cUjChca6E8JILSqK9GfkPAnrWePFXON6AsNddiWdmKfnczmfR57k7S8ua96H8NMkDRi3RMtegCEYOk+eCCYBdsYYl4hrlJrmSwMeLhKde7YkU5EcPvcvMEwTqHbF/wBxCHMDFKiHq/UrYA== # This value was modified by the sealed-secrets pipeline
githubAuthClientSecret: AgBdu4jAfkJaIewBWdi9Ej5PCMRGSrSZi4WQ1LWGXTl3/RH/ki6aJvz7APZLJ+jiat1V24/afzMAAAslsfdrKdx+72qr5pm5oLy0T34+RFAT8VeulTvWDvkwr3Lw4RqnZbHszByzZlnrCJkeDVTzq7QcbiKkb70qy685f2GwrCGDpt+ZaeHCtwRG7ZLEr07hIaiosUbLNLVEzMNAwN5R46CzSvfRbOYGZ84dMACes9xhwCmk+76yO8lrC58LSBndqrqFQ9ffQLLQz7xfEjLs9ws4daiXTEtZKDzyeYP/qKvns/vOBu0AenQ050TKc0IHLcglUFppoeGqV64ZvpnzHvp39q8Ph7ZGjPSkMKD+vk4i4kopGFIZiqMtEJDd3X/nW1OUiQaWx8x5l9F7GmSP+MlahBrKU/fh7S/O7JkdelZRU8LgSbUoEiXPPfg1XJbzsmYTSgKYRKfwtl3fKNHXHW8w/S/Icb8s+50zsKh0DC1pmBoqDPcQFpZjY1mucfNlnlE/KOz92TDwX5AcQYXmAPJD8WwzaMChjkWdNOGdy0QEnZRj5S2ZHggKy14jw1bIdcV+mBK4ycR/a441UCelPBYtQoE5sBwgTaMi3WvyBueR19Og2su8a/dlXYUt6WqVGd9+8WV3acr4IJ79KIcQjg53CXTqarxQ2jraXBJJbQxfFvgRzz+4SzhdMXEmeS6QxuDRD5QocNtgXhbDTaiI6I9DSYr8HEnSXR83EG16r9IJwfe8cUTy1f7A # This value was modified by the sealed-secrets pipeline

ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
    alb.ingress.kubernetes.io/healthcheck-port: traffic-port
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '15'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    alb.ingress.kubernetes.io/success-codes: '200'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '2'


postgresql:
  enabled: true
  auth:
    password: "backstage" # I hard-coded a password because for some reason, when updating the backstage with a new image tag, the new backstage pod can't connect to the database:
                          # Backstage pod log: Backend failed to start up Error: Failed to connect to the database to make sure that 'backstage_plugin_catalog' exists, error: password authentication failed for user "bn_backstage"    
                          # Postgres pod log: FATAL:  password authentication failed for user "bn_backstage"

serviceAccount:
  create: true
