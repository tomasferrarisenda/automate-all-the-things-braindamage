backstage:
  command: ["node", "packages/backend", "--config", "app-config.production.yaml"]

  image:
    registry: "" # This is necessary to override the default value "ghcr.io"
    repository: tferrari92/backstage
    tag: "19" # This value was modified by the backstage build and push pipeline

  extraEnvVars:
    - name: GITHUB_TOKEN
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: GITHUB_TOKEN
    - name: AUTH_GITHUB_CLIENT_ID
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_ID
    - name: AUTH_GITHUB_CLIENT_SECRET
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_SECRET  
    - name: ARGOCD_AUTH_TOKEN
      valueFrom:
        secretKeyRef:
          name: argocd-auth-token
          key: ARGOCD_AUTH_TOKEN
    - name: GRAFANA_TOKEN
      valueFrom:
        secretKeyRef:
          name: grafana-token
          key: GRAFANA_TOKEN

  appConfig:
    catalog:
      rules:
        - allow:
            - Component
            - API
            - Resource
            - System
            - Domain
            - Location
            - User
            - Group
            - Template

      refreshIntervalSeconds: 5 # In seconds. Default is 100

      providers:
        github:
          # Catalogs
          catalogsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Resources
          resourcesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/helm-charts/infra/crossplane-managed-resources/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            # catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # APIs
          apisProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*api-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Templates
          templatesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/templates/**/*template.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Systems
          systemsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/systems/**/*.yaml' # this will search all folders for files that end in .yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Groups
          groupsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/groups/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-transcendence' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Users
          usersProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/users/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-transcendence' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }


githubToken: AgCdHDOoOm/aO2kfWNhP0x0ebAr5QSXuUQdNho4K8wTPRcSwfhW0sWgoPAxo8L4Zy++q5W7j93S0+UUZnopUa9PC2Gc0h4GQBEYcPqCrigosh6ETFdHRyRP8NFcvR7m0r63OO+2e9eXLyox+q8iIdoDgdbxi/uMsIELRYfBFlIIHhUrq3X4ozCz/c9Yk23rxCJo+eW9MflU315Sqls/QYB6N+ty7VX39d3u3fj2sjNYmkV6ohFh+A9FuF3WbEbGQ+SWEeNHYz2eLVJvHB8lQS0YcUOufy+hn3avugsgZvDoJxo/Xeft79qZDYVm9SMpQCIQ89kqMmyE0SztdZ6ajk0cZFNa7kZhqQmHs1y3nOGs+a6Ww2jIb3yspY0UbGaWeVes+a+cYSFX6bJQdBs0mNDYWw3WJMTupBc749++Vrp0EaMs6a4xjB8jaaYbl5C9tsGLn5NRxZHwZ3bMkmR5ffB+4LTIVchgAE1qlxD62Xybup6Kcmj1BhNlQiDL9DdQYtt0zqeJ7Xo2X5dgTK8E4ODJF97ZKH3AvQCC1H0GkeDhFvVrw7Mw9Iel8EPT3sHXZDYvh6dN8pFOaQKLWdRdVYwawzQqScnuCFmO7M/DhtC1+u5tjO6Ref1V3STsWnzZRm3p286WZOd5BLmNScbV0oiskUa79VrlTJLZz4UbEX4HPP2AWF/mLEmGswN0f7iF2Vqm4S3ePC0qZPKKMMHeRmoH38ktj0EgqxdLO6glx7J8GYJHLOTykjsk3 # This value was modified by the sealed-secrets pipeline
githubAuthClientId: AgAFszufCTuOXT/vpVEEo/Qv+ZsVQhsz2Lg0D5TGBJn1ycvgL0PyY/EGkx82tQ+0YT5shufah6VfcSTZbrjbbOv3742czDMw5D/GJ3s/E5gb9nDRgdo83ivadoUBXKR9cjNBJDhC30oFah35WWSiiFR+zwZp9CYvBV8PZV6/izh3q9Ljl3wAu647jfUf2QuaF1Pnry4SQnY+Catj8aWIeHx297G/nPJU9JXtgghnmeoh0YYA/PZzUr3+WZhAu0JWZ19LXSuLBuOt2JMtN6dM06yHKQcg/kFoVcyMCTd1nIUZeuk8BkuJ/djIN47UOHO4cKT9lJ5HsOiVzovNq5+I/Q8H8LFG/4XzXUa7wwtnaB5Y3gs1mKdj1YR3DCfr62ZBL2hQrE+7RAdMSLaXr1ktsXhbMXw39ZjDVcPwedJW4dUuRERgqBCa1nQDlZT6LFoDF6HL/G/TvfKiVHdgFWCLIdLUEZHpE+ebiTICWBKl805NGmKwi6RxZb7+4vdcmSGSZk7wdoCx+DHL4/pm7Yb6mFKZesprRF7y1AfAjPQv0ElmhH8aUwA8Q7hYtkUKGoVktI4WvqorBITz/qrKZkbXuRNJc58xWfkpIiIgVB+drzBBId6aa5fDWUp8NvslT5a564wHsl7BSkSj6XVnkV98X7EyPVt5wJm93Vmqby6I+dbYK6gvoocdBLDkibKQ1eoPYkPu9wXLmS1tskySFtQ2Fc9AZABJUQ== # This value was modified by the sealed-secrets pipeline
githubAuthClientSecret: AgAb/H0sOr+Gi3uX0OLwlQ65h1+5+x95Y4OcQDNcEU3cvc2cj91rnTmG2b0+o5PWfqyuV3tbKrT+A8XgXGW/PV0O9kOyNJ0ZKfYexZa4CEvjWnuvheTZ8zyJpvv/YzWeAtCzfSW1TSowNAe6foiRsZyJ5TXKsCcfZD0reyvJ4dndHrk9/qOC2Wrfg5jmxmYCu6pBxmbYB5piiTMgvK/a7A2Ym86YEk+qM6bthCsO7RxiMbonjUz/zHrlLpPOZ5z5+AtbBWqSeaH7EjcHZs0xx/vPXGnZZNXuh+B8GpZ2dA5es8Cm+bl8HaKlpF+xrwJ7DQe8ra55Za0Qyiw2LD5cZZz5Z/QlFe/DiWO4+p3ENgswytM5sRuMqclu28H3xiUCzaWk4xysdoMa/q/85ctWXuu7UQDAzaR7vUEF6MQAgZwOUDykwe0x2duosHgNFlNMOU0w9c+JNtpr6lcXkTda3eZaUzt9iJA48DKTGpK+hwHKB/ZsjFwy04FgjGk6k5Bw1z9PNdRBuv3aV5DPIwpiHHKT6tzjCr5orcJL6rIRH9MysHsa7BZ/LYhm9Z2rl7pmO4I/oQFkdAUQiE8iwDwEWihf7wsV4acuFVV0ZXGI3cJ0cNFqrtcrX3p7tgndtyQeglphsBc+7ZeyXAq+Q4cO68BlrUGnZ5bIH5Q31Am12oG72PF+FNmjzQaBKnv5KpFKDYpJClLzun6WFbQ9tZZTSml0/1ebFknlIApB7JFA6H/EcIKhc6PCpYyv # This value was modified by the sealed-secrets pipeline

argocdAuthToken: AgBCniMpth7NFTq+fFOHCnI3BaTl9bi4zXuBw0mONiSe8jzZjzfb9kmd434VMwiozN83+fuG2PIYvI5cTvGVPG6zyVMWhf1t3o1VeKE3QuGxw9FYpAeUI3Q6m+CxBM+sj6bxwBDSQUjjmJPx309S53K0N1iSlXbqWs8ZCA7vMiGrxQ0kHhfLZxKu4jtD+dqQJ+RgGKvLVpfZx9Sc/op6OaxqS+NFsodxl6l0SJWUqeddrGRVgd35uGGKrDvfDwNOV/bCFUNoFGOMm3kdK2J11+R86+A6jHcUvIuWckAj0YKqEyKb1m8S7BuL7LbLBJf3w238fsJFaL5q+Yfn8LJI9kHRF/Yy/Zv9L1oek8lTQHVm6b7111V2SbeUq477YzngaBfW/OQTQATVFhPZMRKVbXv3OTECRvhy/sHuHABBI74ZKJG2PvTQSv2PlpvyFGetqIohDQyxORFNLk1bXzi0Ca9blgVAF27DqGh0Dp3Ec4pu3uFd2JYav0IYYwxofdJdXkVAONJkFMyRVDqfd65SUBr05euW2AyCqNDIgmHu1POI+0kKeDl/UMf/t8K0EDmoDbcMNK4vW6hcIbwVwMcHUa41wPj9Q7PZk94CFWToAl+UdLaXVktWeiR1Zc20hoXBf+CuKWVBPk3k7ZaHHOvwjalFlfbEJwebJzJeaW+xatiTJjqu3hHZUP4u9EGYEAFtHNCz2Wz0WeK2nWjha+aNanGmEAfwpxkQFrkccmzNbLwVvQ5Q7zKhFFPAOBkgksdlTq6bHn7WeZEIRzVO+7dYC9TE9IpLVThx+RoFV/sTgtxDYMY8R8y4axi0R5wCB1rI4CGC8M+9k6bqmEmlRn5HcIjuG4WdNEJ1itdVAOg5mZX9wwBKNgKjLycswa5MC36oowAfr0Z1bWIf1GrzSOjR420tftMP+rbCQB0b8H5WyIcFnJPIW+v+YEtF/XkpSneFNFK+g0BMQQ1nac9QepkfA6+xY8u6XE7jD33319QPkcHHhoM6lJ3p7/8mSpyb7B50JpbGWxiXuHU3wIGsZSo6 # This value was modified by the sealed-secrets pipeline
grafanaToken: AgBUidXeazDyRxl3BJlAdDxym3jfAAgBgvXlIK0ovpOmxFC3dVPt6g3hbG1r+XIPhu2jiPAKpU7OeODlhtbJbxCu2+wvx2WzQSKxPmNLoqSK7lfq+Bli1OTN4zdN09g1xIGN7Vi9vT5kOM+wIJvnAyHITu1GXHg0QKtmaVCoW/C48CXKeXQ9fYSZyCzCXRBhTNAnMMWP0LZafzsSCu2BXhf/Bh3QdNgUy+1Q9YEAza62PDC9hyyMCs6suVtXeo32euWgNQF3iCaStVx8LVn4anrZtaRWErInEyL0/GHkLM6MKo+LA6oGDcDQ6eXUX8ve/6+cBDMYAZH4Z2vqk3qa4ldPwmgTztTSp8O29AnuDnWXnMUTXSSTeNq/f/D/DMUHj3iyZ5waCx+UyCSDD0h4duODfEfdTYiUHJXyalJ0GL13d4gdBBRYKwXD5qjJXOcL3Uo6L59D6Jdf8Y6n/QZkoTsZlM9NBhdlFG93rcoNYJq4KjP3zLpdPyPHjda21cMo3vB7bBYzQAYv+NE3n8Zguzho8r+hVyQGFjqhePuOIOuYiKAAYAdTJhUpUh2IjTafz12p/y5uSBfdI/5599+/MNlOOd0VtHKAqM1uALYDzo0/+bxulzOljWQezFanCo+1WfQwvdF4dsyNochgoM9pF/j4O+YzkcMIxg7x95nWV2IJS4kjhAyordoBbz0+xtzBFgnpgxNpSjX39dVv9SNoGphoLUo/xpfWhCh2BWSPk241tIUvbn+CZuoMJF/rpA9Z # This value was modified by the sealed-secrets pipeline

ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
    alb.ingress.kubernetes.io/healthcheck-port: traffic-port
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '15'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    alb.ingress.kubernetes.io/success-codes: '200'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '2'


postgresql:
  enabled: true
  auth:
    password: "backstage" # I hard-coded a password because for some reason, when updating the backstage with a new image tag, the new backstage pod can't connect to the database:
                          # Backstage pod log: Backend failed to start up Error: Failed to connect to the database to make sure that 'backstage_plugin_catalog' exists, error: password authentication failed for user "bn_backstage"    
                          # Postgres pod log: FATAL:  password authentication failed for user "bn_backstage"

serviceAccount:
  create: true
