backstage:
  command: ["node", "packages/backend", "--config", "app-config.production.yaml"]

  image:
    registry: "" # This is necessary to override the default value "ghcr.io"
    repository: tferrari92/backstage
    tag: "20" # This value was modified by the backstage build and push pipeline

  extraEnvVars:
    - name: GITHUB_TOKEN
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: GITHUB_TOKEN
    - name: AUTH_GITHUB_CLIENT_ID
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_ID
    - name: AUTH_GITHUB_CLIENT_SECRET
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_SECRET  
    - name: ARGOCD_AUTH_TOKEN
      valueFrom:
        secretKeyRef:
          name: argocd-auth-token
          key: ARGOCD_AUTH_TOKEN
    - name: GRAFANA_TOKEN
      valueFrom:
        secretKeyRef:
          name: grafana-token
          key: GRAFANA_TOKEN

  appConfig:
    catalog:
      rules:
        - allow:
            - Component
            - API
            - Resource
            - System
            - Domain
            - Location
            - User
            - Group
            - Template

      refreshIntervalSeconds: 5 # In seconds. Default is 100

      providers:
        github:

          # Use this if new services are created in their own repositories
          # catalogsProvider:
          #   organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
          #   catalogPath: '/catalog-info.yaml' # string
          #   filters:
          #     branch: 'main' # string
          #     repository: '.*' # Regex
          #   schedule: # same options as in TaskScheduleDefinition
          #     frequency: { minutes: 30 }
          #     timeout: { minutes: 3 }
          # Catalogs
          catalogsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Resources
          resourcesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/helm-charts/infra/crossplane-managed-resources/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            # catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # APIs
          apisProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*api-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Templates
          templatesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/templates/**/*template.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Systems
          systemsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/systems/**/*.yaml' # this will search all folders for files that end in .yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Groups
          groupsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/groups/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-transcendence' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Users
          usersProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/users/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-transcendence' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }


githubToken: AgA2KD4jpyKFCe01scw/0aGIOBjn8rwX3ezZ1jVZX0fa4mbZmrdvBKKnZNHTvjWVs3Xf214Q9ixfP4buY/FWe3wWpg1EOrR9xlHwCqe9WJvN7icaoVmVFdh2U5IKiyA5LhzVEpKa4gtIYw8CtOw7B+hjCgUKfkk2US/flSZzhkEnd7TqsNkr7/jEyIUvRzhs2lSZeQC071RDRvqGeYX9+ei34m5N7q552NbGzgz57BA4X+8eiAYUBJ/7hiBZ+Z3Az46DesAZp+2Apt0EC1n2AnREneu4iBgTjkArdJirZ5x4YTziHgz8vgyMRj3nkQKnjkzO32spcXvd5KUw8vGHx8iYc+IOXXH0djJfEkHjTSiMGgGMBgJ/+Ste/cXfLVcxuW4mB2HFyGb5vbD3ujS0eVucsGPOJnGmU4iGCJqBpb5FyVzX62u/LkNkPVLPF8KqshkaOgIOHLxry99zHtLloXJJ+cb7RrcS5HivjPxyUBgxGCZdxtDee2nLwlieyvpsLa1E5/cK+yFp1wGJBaYNprXQLvCnW/n38xr9AgcFPmFDlXVcnMLgnVGXN2UCw9hi1qMd8jDu1NNj/TWacf+4FJ93x0o5cq+s/dQpTD5uhKxOa2wiXnWtDRc66hU3Ca042vFIvQvZrb39HjCbx5YRSZ0boX0p2pi9rJfqdExNNv+YPjG/NIlcTkQVPqep11UI8EsoxEWWBElVN8rc0wAnHZDSdK5m/BpwbaCsnHKxXLPXmkNgc/RkOsrf # This value was modified by the sealed-secrets pipeline
githubAuthClientId: AgA0mmWV+g4GZsABPtIZK41l4wUayAxNfftF3PRngZjldUBTyCGOO0QcO5r6LqIkX9yGRLfCFbj/RUb6a0pN4ZvSgdKAY6+QxeRkXsjFTdhRcTDRGf3+xwPjPyInRy7+W1N3a9Xh+EuWJFxuRqVkhB2TZvOxPS437pQQlqydh+2s1Y3+UKtu0f8YVmXlLB7kDF6rdMTuY/ilLGlWoLsF+t1CH51rtfpepiSlzvEEMZ3WXOeCsq/fN0raCsgqfqBOixVKp0ZLN5KcHgmYpJS98tz79WcErTMjtNMzkl3p79bHr/8wMTvkbQV/Yv/Np5d4U5qzO3XWyDFs7o1qozku/U9iGgnd0I+/h6yabNXe/PJk52MFokTdQQ/dXFFWzy+Phd020qHHxVm+Yk/2D3oa9mvImpoQpIN1MGzkeGLX+XDL3e2EJiS4YaneCK5Qk+cCL5ISGc71HwWok6qg4VsRLAjOlhlHLG9Ux2VTsZ0/tI9vRq+kVmwpfDBh9Jl1skJTaa4wjvr2OZYMoqZgF9nyUjty9WzJoSReEthgDRkvpL7dEicOj3sJv3gLPpEhFRkGq8rvaBzDFmnex8G2RN6P71bL0OeCvg9jRLx2otAhip1KAh2HbxqQ0pAMFIaDpeU4d8NbTK8NKOx63xVaxKF8tcLPrY8/l9X60jK/u5A6LkzCI/8L0VqnM8oLssHvet/GfW06H9oQgLi8+Eu5YzmbLA5pWHvpOQ== # This value was modified by the sealed-secrets pipeline
githubAuthClientSecret: AgBWlb2zArFSxdoscKiMR3NxNxSvSFQOoBJAtCj8WzvjcZs9zAz726teYCZZazWFzi8aWXodj7cghsLrdIazuV1teW719tCNKLxDQTQKq0f8Bz+KD12pMTUiBoiRIYmORmnnV3S+FOFKiboY4HydnahZ1Cx4+56aBoc0SMk9dIz/lGLPDr5rOAI/iEQfFcD1pUqMm/EouOv+fkZp2xaI1KmFu7IwrTcgt2VOWuvYJcYB2WXZzOabIIi40dsfVVePROhu+LjTpkHNIBZJC+6OHPZeKblV4Ow0IlAXDQ/u6w/4yDCoGtz7d657tBbqYojO7/UrD8TPCV+zt0760o3OSKGrg65IFv4JDjKhk15kWv6MTeEb01bLbhh7Y3BnzySdztpJBNkD9y4gacJt+c8aGlN+r7oz83oJQykjA7yzkvnlJzTtvpzFpCT2GQ/DqRj+4JfdTdmqppDr7GxkpnSzvWEuKLAMFC6cddmEJCdg7VJ0nuH6NceKMViRgeeptfghvA9Jt6FmEIZncvOfOQTM5FGblMo7eTwRuAza5mB4Mxde3YdHHQls323b9TYIvq28O8wlgNDwaRJckRt95hCX/NU1U6wTrk0xmTUlzMZbxzouZzjY8wXW/cQF4iSovsjlPieKW8JAWan03zQd/hA1Cxj+TXMRZBiQkrcnibf9uCtOrz1UjE0mb61m+GQjAyS9xG5WWjqUWqrI2IfpmReP80JvHg9uyUnrq75R8n6Wyn0N+W4vGWLhSZub # This value was modified by the sealed-secrets pipeline

argocdAuthToken: AgCB6YNeMVBCWN8tXDefPbJH3VqdcZnKsP0/qz66xOaha9J6m9wuxc7ef9UDOgWhVXf3z3qWTWVDsbV0PU7oZwpTL3Pv6KcoKcmISmdQ7j0kSwdYXVtLb8+PKf3RnvkHh8v6i92YObK2DZZO3nGRa613dAE7DdwaYZC9o7OakeO5Yi//KNtZ+vjUmyH47ihyQlm8bjSEKV/zx8X7DO52YwYdPhu6s6sdd1Xt9XlB599zb8siuQqSc6RD1QlXlyNaefnh5E6ofAQp/5Nx7MLkeCxApR1hR/KgevjV+S8ZBfPKK3GKOXvsBUGL+GNsosOqh3sb4YurTeAUQ1GH+UA67am/mmOSFnZQ7EjUsAk87nVE5MfCejK3CAxx5n4AFECc35E0S6ZITgqcOx3Jp3hQDbIQOZiMPNDCqu9z1ciDeW2Nj8/bzYCEjiFCITGTizx7wd2aUdirpcDIj7zDtUFKbs0NafF9dEMbKCDrlBfct1WBOOex9sAPfKLFAlV3cK8zSbe8ics6NQ88P4ttUNcuyOk1QxzIjAV68hUbOrXJW7QSgnJG3u+Zon//Pb7kUQcrtvuykfbJc8CQICILYOTshqcdQQtIllZN25DGgiM6FYQLO8xId67FO3eIx+F6+HbfmvMJu5pn50B0m/Ox/stofDOE8UmT1iqAQrupQ5Q0DVKuKXGk4J5ji3RlJaXtL6Q1k9elWf9RXNk1Tb4GW/DG4cfec+2TNDoPLh2IzVcjQVUO0StXW9J0SgA+DwlK+JHXSnxn290BbUHRd4aQvm1L0hF+02Rkq+cZye3aANpBkktFnS8UMLAS7tOADcAC2exXn0mhyEigj67NUIiwKMrnFvC9WbndzYjxOM4vN9HDpTSZugXYMQYAqoZnBXvN8agB/XgC2NUGzJZEGnUcvz4lTV0S2QLP0j/JLzWyQ4ZGWJj9q1ucfUip/C6bwQutmOH1Nn2VjoHlCYLrV8fiAEubtztUwHvL7CgzHYr2LyW/3KRuUy9BFBDHd/GEDF0UvwSdToixfq4LhvybpmAWC7Vd # This value was modified by the sealed-secrets pipeline
grafanaToken: AgCGMUTW2DV0ekDOmiAkF9NT+zSI1RSbUN6NxGwCcGvjqJd7tANS2C2qJwgwi26SteUz23WroUHZnQ0IDUSSAclgVWYS0ezruvi4lINRyQCUmq6g2EPJtV4EuomjOhHblMGeuT26IPiyVOjIKEFwlwIVgOP4xvQEXBuuBoRZKCY2ExYsAvirbzfO/oDQy1u9LRRuogeSvTbYGy7dFK8zMTpPpSfZzeQexHY6ea1fLTVRRt5tNqMUyjiK2+BdaDbmg0W4bHbHNNF/8SrI/ZvsvbAWD9DmqvV/nSK14uG3csOugl2LVkJY6DsNHabQxYuJGHDhHAPSbwdg1OjakAXHU+LCbf/vmyH3sEvauKjzWFkBcQaBm/+ppFwiycOAw/u1mo9WNzyNAm0/lnzdB1GPAo8F5Vjeox0h6rVtXzrx7KDTIA6mm2GOztis2L3nyyZH8Ca2xu+YLnMo2reKsyKDc6F9OXnfRCqy2JNkIm0uqZQRg533SvVg56GHpeZWk990WzQKY3FKxnO1IscQ4P4R2UNBhcyyY8zgKoxwb78hDiU6qjmP7M4a1hmVTuYuTBLgsSvpKR/Y9AJSzXWd9aHY44kSeOpLy5mIwx1kjfTAqgflthc2bSixkvtKHbra2wSEMaX2IJTHgmd3iOjlGlgI6GS4WE0LtWAwrBvx6xjCmcDU3OMQSVbr2rQPRgUEnLVtseswCJn4NgWYp5Zun1387DEwUs8cUTEB14ES5aYRMuiGHTbhCvARxgnKxeXY6qui # This value was modified by the sealed-secrets pipeline

ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
    alb.ingress.kubernetes.io/healthcheck-port: traffic-port
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '15'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    alb.ingress.kubernetes.io/success-codes: '200'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '2'


postgresql:
  enabled: true
  auth:
    password: "backstage" # I hard-coded a password because for some reason, when updating the backstage with a new image tag, the new backstage pod can't connect to the database:
                          # Backstage pod log: Backend failed to start up Error: Failed to connect to the database to make sure that 'backstage_plugin_catalog' exists, error: password authentication failed for user "bn_backstage"    
                          # Postgres pod log: FATAL:  password authentication failed for user "bn_backstage"

serviceAccount:
  create: true
