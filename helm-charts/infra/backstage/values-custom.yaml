backstage:
  command: ["node", "packages/backend", "--config", "app-config.production.yaml"]

  image:
    registry: "" # This is necessary to override the default value "ghcr.io"
    repository: tferrari92/backstage
    tag: "4" # This value was modified by the backstage build and push pipeline

  extraEnvVars:
    - name: GITHUB_TOKEN
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: GITHUB_TOKEN
    - name: AUTH_GITHUB_CLIENT_ID
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_ID
    - name: AUTH_GITHUB_CLIENT_SECRET
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_SECRET  

  appConfig:
    catalog:
      rules:
        - allow:
            - Component
            - API
            - Resource
            - System
            - Domain
            - Location
            - User
            - Group
            - Template

      refreshIntervalSeconds: 5 # In seconds. Default is 100

      providers:
        github:
          # Catalogs
          catalogsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Resources
          resourcesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # APIs
          apisProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*api-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Templates
          templatesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/templates/**/*template.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Systems
          systemsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/systems/**/*.yaml' # this will search all folders for files that end in .yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Groups
          groupsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/groups/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-transcendence' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Users
          usersProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/users/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-transcendence' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

github_token: AgClop22/K2P+gy0hoPsB+NNroFuMWQfaMQOVyYb+hyIE7aJGBB3pPaWZ/sgV9iLmKhqX0i+E0dVcUXVhBhN9Dpqj6ZO8qWgphKWPb3ruznVnFwQz2UMrq8SnMO2wLdt/WRKb5R6YiYbsmwD9aVK/zwyFV+YMe46Jf8di2QEWJ63+cWEty2f6hq8NERZLD7B6k4gmFk81rmt1VM7mULO2g3CIDdfa+fSUPY5SvBXIBpegY8aJefbrDjmIcMBYuW2dw/L6K6du8bQ6JTQ501Tqm2IqpZqoM2JxgwX3FpB6LK5Py00UYX/mhvN1oKys8jyZwIC4BhRVC9qiYiJv4K/X9MiE6yaH9KJpsNIsOzYlzENayrNIFJ31xLFPpT4P9x8LyG+1SEYVbMpxCP1sdUf4txOafoyCXwApkSbryS3CRXBI1UhcSy5vhIVJdACMqyu9/1YyO4Cg4gARiDPLxJeoAfGZXJndCpxShP6QfJ5MXKJFiJSf7nqUKyAQDwAEu0HJTSmBjDrZ+Kat1DoPadLo5dbdCflbGg0nuQIRAQdDvEiCxp05UFhNYfNcqK0RH1JpfOaFk6cDnbKPKX4RDlvDyevyTqB4GlIPVr4r0ikCC+g3GgN1SHmVdGWfD6WScKrkbEdLlcBHwab2HmTSvTTdMJM/aPwU7jhUDPszoS+3NzUr2S3YlRmHwcYTimqCw8In989J1QurmI0953kPDZUA5ftYxE73hmitXwnfbIHc7Tn2VHO3LsQ3zhm # This value was modified by the sealed-secrets pipeline
github_auth_client_id: AgCI1+4mi2s/TQ1tSsr1EbB64OjCLaerZcyrOw2PtN+FNqFLyZIr3caylsJIc1pgR0WciIR4jJ+1RxrcnrG2dmUfbHFmt+ZVvN5fmFs1nuywyEyIorTkrESE9kZLsNUxA/up+vFh7VhnDGynLNsYU2ry11KPEE40pz2CogSimdwpPPldpKxcgEcQFULLQJFaLbLYQyJStRlxHMbb5CWlnU5K4byBJlGcMp1rShkCOt6j7PI2AxA+SmA1D0aDgmx4nl0UuTg27GVVV4zKm1yo3vc8GHIga4YjXWK5TRHW1Xt3EUz0a6sUJWDHUStG5pS20bbY63pKKDh6EM3MvfdSgJcyln/kfqKp6SRbuPkTfGD1CWnE8eAqyAwfsD4i8ZeqbO9HIAxtzuToepMM/SJaXcuOccHhSGQSC/oSjC8u2qMCkknDuRnFE3RQEsq1t/7I6/Zonqhn6iXdWcTFqeIX/tWYLoRIC2oA9MQseVpq9gn/BpJQJn3wy/TpB/Owin7LJGAwSP+JnvO7TflT2HffKZkeQJghq4EslMtga9ej5o9SmrnfHdsv0PCySq9n86I9jHxjpqA+GOANROWGEWw35U8NgmnOtp6p0C2gVWTzexCTYiYUuRjauItIFHhttVVj7bkwoP8fxHjkqG43m1X0//26KjVcW9gQTd0IfOzdqzvn3/RCiSrEYQSVOaocvM+cFQFydSIljvXdH381KY3ySeXn7pG/mA== # This value was modified by the sealed-secrets pipeline
github_auth_client_secret: AgCCWtEpjcBjZpr/m+5l9OZE35T5evFCr/YjAziVCDryoIhWhVVxC30+YuSTmERmPUhvdkiGpXVULcyT3jusdTouM2Bq1nPIFlhu01mTqDfyi13esYK0VuOUntQeRqFDHKj1VFuJfs4JasEeIjGRNdAx7x2BYaiGUp4z3YthSfPuigPy8eitAt1EII45XCftGRHuJGuMBH44BixO6IglImoMfifuleHTJ6cUDVdcun/qS86JeLJJNqoMaKfB559cN03jhBavZU25p2k4Aja5QjI7sIMFvrPNIQHtmQtlRnEGZuKM4IXTJ30iEjZmj62ch+Bzk5EuI3IPnSrWy/D0ayk0SpeJl+5XU3eKu+QggWCsn9Zbey4Jw32MA8P5c0F1mmf5CU8qdm9Zxby7J5LECXBjibXxMWAGGs0vdwALrqHUjOXKlAItUc8mllHJPe32T8nj81WyQwl1Tdj5wUSJOF6y/PnkJT7boiVIGbBgWUcxBE/0vkJ5RK0l21dnk+qf8eeFGHsrKpjXypQTopgKnke5mY0MN1DQbcMAGexd5IHS2aBw17NudKxvqAL8l8ascEF+5TGa7gSECJQs8leYRYQsMxfrNss4Ws6Fu1kGlXuNPQSS1Rm+UA6X31kjhykjqT2dydIoy0UX9DkEcqlfcyW60VuZ3qQHzijRVM3+FwQQSu4JfW23PnYS1AuGI+NuiFDvj80kc1cFXYa3Ki25zBAp7MZrFUUsRXYk3kgIT18R9waLVTPm2u7b # This value was modified by the sealed-secrets pipeline

ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
    alb.ingress.kubernetes.io/healthcheck-port: traffic-port
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '15'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    alb.ingress.kubernetes.io/success-codes: '200'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '2'


postgresql:
  enabled: true
  auth:
    password: "backstage" # I hard-coded a password because for some reason, when updating the backstage with a new image tag, the new backstage pod can't connect to the database:
                          # Backstage pod log: Backend failed to start up Error: Failed to connect to the database to make sure that 'backstage_plugin_catalog' exists, error: password authentication failed for user "bn_backstage"    
                          # Postgres pod log: FATAL:  password authentication failed for user "bn_backstage"

serviceAccount:
  create: true
