backstage:
  command: ["node", "packages/backend", "--config", "app-config.production.yaml"]

  image:
    registry: "" # This is necessary to override the default value "ghcr.io"
    repository: tferrari92/backstage
    tag: "22" # This value was modified by the backstage build and push pipeline

  extraEnvVars:
    - name: GITHUB_TOKEN
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: GITHUB_TOKEN
    - name: AUTH_GITHUB_CLIENT_ID
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_ID
    - name: AUTH_GITHUB_CLIENT_SECRET
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_SECRET  
    - name: ARGOCD_AUTH_TOKEN
      valueFrom:
        secretKeyRef:
          name: argocd-auth-token
          key: ARGOCD_AUTH_TOKEN
    - name: GRAFANA_TOKEN
      valueFrom:
        secretKeyRef:
          name: grafana-token
          key: GRAFANA_TOKEN

  appConfig:
    catalog:
      rules:
        - allow:
            - Component
            - API
            - Resource
            - System
            - Domain
            - Location
            - User
            - Group
            - Template

      refreshIntervalSeconds: 5 # In seconds. Default is 100

      providers:
        github:

          # Use this if new services are created in their own repositories
          # catalogsProvider:
          #   organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
          #   catalogPath: '/catalog-info.yaml' # string
          #   filters:
          #     branch: 'main' # string
          #     repository: '.*' # Regex
          #   schedule: # same options as in TaskScheduleDefinition
          #     frequency: { minutes: 30 }
          #     timeout: { minutes: 3 }
          # Catalogs
          catalogsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Resources
          resourcesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/helm-charts/infra/crossplane-managed-resources/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            # catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # APIs
          apisProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*api-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Templates
          templatesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/templates/**/*template.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Systems
          systemsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/systems/**/*.yaml' # this will search all folders for files that end in .yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Groups
          groupsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/groups/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-transcendence' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Users
          usersProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/users/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-transcendence' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }


githubToken: AgA542DdEeMoO3/H0KPf7BjjWqHbQgqnUDHDLIG+6Flz8m6nIbkxiBsoTnKlLI3o30nw3H8vI9+zwhu4lJ5hRcdilwzRSLN7wmgAti90gLwIBRSKSr7mM2xqMXHjtyoN59p2Cs3uX0LAOp3Qvdm/FSN/bHtHtblnCE6M5rkQtXEm3lN6jAzakkaQwRQNESXTQ0sbxzHQe7gJdfmvXBDOIGCMuFUWwaLQODyJLNQhbcChkoxi5fOnpG9atwNDEMCtmI5y5AUX8fi+zJdGJRtFJO3D9B/C+NojNIM9pQ20euc/RBfMgnYUo8mubVOmAJGwlZwX63/zlZ8Lf1Gdepi2UFrXANXtyz10lkBV4to7kkRGEsgp/rdKsVua3QjHE0IQWjSuUNZ6/NqR/cqy04SL236Ea70+mzQjduZkUUDJmdp0tA0wgzbHyrhOWi/6o356gT17FGzqvJQKFDoJWa2tCDVIFRwyXhemvHDI12saADaByEypEvQL/l+XjAR1w1gwSrXh4rzsPete5xpZOh3KKDmLW9y9J923ptvxLIZsHA7Sqw7Urm+F9hT/Erdw2gvUDmxEL6E/8RJzTJr+LlRahCMh8V3YuVBD9NWSN3hR0MSa7+v5gOZ0r3hk0TVePN0O9crIAcvzLZmf8FLxIufS1gTtWtB5C5DUxG/ojYpChb9hk5L+UM8uhf2X8sadIynClqEB0FiqEC+JkYdYrPMCqhiZTkZCvqCyU8pj0XH1/dAx9tDUf1L2w/TS # This value was modified by the sealed-secrets pipeline
githubAuthClientId: AgAf5WymWG7FgBK0Yxu87o3PxcBEia2mls0WjJesea+Eaxhab+LaBIvEojCkVKpk7dnS4mJf+59+EvNRUYv8gbR1DQ3FKvJ80KO1Dp8eVYnWXhHG4yzrMa8PdJHIQCaFbs8hXhzl+FZKrOALcbfW6YlZOTUm2mLsrjIN4eBM4Gc7qp+7fL0DkJF51YBnG7kB0POtwESeJJh7qbxQeUO0Ix8+KzbjaG1L5ubRxzr/scCT9LsPVKS1JjeMToQw5dy41QdCKnO0hEIw4s/eMgG35NyPF6QImW3qcVTYmNNIoOW6h2H4tPzRIm7uUSn1OXFKyAGLUt8R7PaCJhGmi31WBvRiXx6qa3U35iyAvyQHLoAiQfRF+Q+iLJMlMyIhXf0/abfQ5zySv5yytFsps0V/RkTTJA00ruGmsHXfXaUVJQKmzUoTC+F+rK3nI47n2gaixXITaZXMuP1TREae0FCzXS9bue1bpAeBPnw9YAvgNs00/eUgHx72b52HwnqGS6GWefN81oIMfqh2lsDquZxgTdEm5zq8Zp0lneD3rl+0utIA6TapV8YE0hQC1aXhV9sc3VPe9Upa4q6yT1p8KbKHdjB64zMb4JQDj1UDtRuFTs7X1LRX1Oc+3zWJrOeiZXG2yrgei2D8+5SOPUdVkwAfj+MMTqJtSxg8tFSpgfwCHvI5Bnh0V/QeD8ncYuw7ku0b9y1jpwazAZQA12iE+8/+VtoMklXQrA== # This value was modified by the sealed-secrets pipeline
githubAuthClientSecret: AgCZV0DB3bIONegzELtXCXyERzJig1xgUBm9lfI3r8aAX9yC6OMEkArA4+vmuDgfS7nrsQy1E4kbOVGsVW3UrpmhHELvFWjVQpHP6AOSDzNl2v642nR/Pmkw3q1lDzHPa2VG0hZlZTxCA76ujbkZKbSIa1bVcUmMsYCWHFci6WJcxf4jNfUYJk+5V/GLvv22tgT4F7idq65LgO5ALP7enpsEmB6Dm9VB2mBsJQvcIvX1CRQ2pVwBprPkd3z6dsJTwamZUOsc3o4DzJ1fihm4IH4vsJ32OmEckew8bIPude9VatBIpY/3PCv9ZO8bAa+fPjmcGAQYlv6Gu794i4PWN6quqwrVeXlWSdiVj4rSIJZSqRptgr6Njxl7f2MHGGzbWyJi+uixcrD4kIsxYfteiyBILOKpGr05UnEatJH3nT/VY7GZc9RBDpiX9NBEkyswn++DFr6MZ7uFXHwd1AUjpHAKcqr6WAbESQMbX78nCbAE8rmuCflgX5Bqq0ZTLy/LsEiPnK36/SrQKClYKOfVbmRafzTjfeiT+YzE0fYYsvQI8EpMGJJ0Az+GB26xiruCmxjyEqOS2nPNyBKBLyF2+m7UzVWl961CEpCwiN4Bws6f75htFDEJGNWEbemXQmeAU3mvgg3SxBgrcb1GFap7NEO2QZrr0d9EajA0+3h60eLcjIQUkRb5pRJLeFNK/HH5ye+sh4+UZrB1fT40oz2VgzV0da4Q4zrf0+Ldr9S4ou8u2bqMIbYFg9p2 # This value was modified by the sealed-secrets pipeline

argocdAuthToken: AgCO954LGbf+KStmequMeHn2pvlL9YXoDzwexr8EHgsXNyvruN5fqSdg6vt9qUaxKn6ETOye+qMceqDHkTPtb/WKX9pAc0X2dVQZtfB/PjPsszu8gSflTI7v432eAXDJg1jIIyfm1L+L0fLTz7OMsdj5DUqJpC+c/+H2M0Qlp72+0YRL8l8zml6c8q4AbLRxltDb+x18hhgbREpHu+seb8x4cr3y/EawFzT4fBaKznaskyY53lFjCdmrFFk7xmBpLfmcjlMH6+dne1bE0U5/mT0qiah03aEz9fk7Zqmiit0/nnTAdNioQsQQw0n1KUJ9KF0u15BilEEFF0rRVLqnh7m6/zMYZN+c75tWh7k28+dyFUbY518Yz2UdCkEKsI96iCqxZFiRXtXcN/5jvNGYe+lgJFbRkDjFW3115C8EbE8GcCghXIDNTOzX401DYS1dhoW436f9HRj1Ts7nkDzfWAJf0qv2QFKSXclDHbS0Cwh5sUBrsy/kY7UYjDz4mfgNCyZ1DKVJDqobfzuWTpB3/E53n8LmuNy9p7RWd3Gdrq+nJeKlGdzh3zO+TvZR7a6Dm9HNXniKpyQKoUr8C61aJ2CSsowv0PfEuPrlZ5ryFOig/42r9/Tx52QoY4IVoXne7ahtPhVffh//HOVM5dBjvg2BJ5ENYVpVh6Yg6w9eUvY9r7CI+ZEUJtcDDBA0AF/+LHBTTz2V9xLMuswx8v/is4rJaeGFXcODLSqYX2RIJrHhPtbymvdpGIWb7+Au3Kw+d0dDNDi+196PZHB+mcacqju5z5bb8z9UiLt/EY6FCz+5MXcfdpZgK3CBkf6vjmwdbZRP/J1tLu4P/IkzutC/Z96DM8BzbRVpY0vyujXJZFbqUoeo8JMDOMMa+pUeZuvGdVoj5jjDSGjevHK6nEY9MqNkuG4+l8oOgbopXtzc0+H5YpZfv7OaeR36Q1PDoebUBf8+sM5WowXkHjQUdsWD/g3AwC1pJC0XnQ/hp65m/vRJcT8bIew4MvO0YvjG+W6zPU2x6yixNkV2exAxrPmA # This value was modified by the sealed-secrets pipeline
grafanaToken: AgAHonkev4EUgJaNV6vp19xxVMAoE3VSj7d9EX84c52TgGAYQPloZE9xY7SlBRgCPJ7P3UDr9lOZjvQsr47z65mFwr7IbEVWPofIxAAwXsMKFAmEj0EuvO1wc4r8DXZ74x707bPXnYqDWmfJrVNd2XeFy9tkO/G4hayvORxyPXNnYzuD48lhJ5FbSag9Tn+zFhdyGF2yqZ5X93CgEqSmA4X6BLNyDFaN6QuvEDSHKKhnnUDdzgn5uMsAPQg0VfH8M68x1+GK8NMm+fxPMqYtHxyNlCy57RH73ziUswgGw/WADRdFAyVJj+EOAdtdXLPwP25Y8wy08m26DM5e1cW4hW5Mml1vh7QZRIU2lgqe64ghZLQEWk/8osIuymr3YPCy7y6nJjX/k8M5XidhaUkVgyBNRvJKnWhyO2m8+Z6iJ7tkxuDNt+qm+mM6cAhkyN3Bjd3Dn2KqkhkermzFykDSB25VHK4QvsnURVkpoTh0dUCiBg8FWkNhklSVq1dlUk8G64N3SQ6O4bXO8YkAnRETvRusZiY+iaU949RLKZH6homI34OZiX4qf4GhSsltPo5aukOO4lVXtfuRV1T4mI8unfGYuLMW5+Xrryav8i5icKGP8TiDaVJb8s71vWb6IJRghQBsnIEMwMv5bIoh6LFbIz3TQch045Sjnt2mKBMub5tEKbqDhcqupCBf29tJt/2qmE+/5V969EHOHMEysBsQuHlkpDQ5Rqn3v22idTEfiodEP/Z4Cf3k/EFTaKONf++Y # This value was modified by the sealed-secrets pipeline

ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
    alb.ingress.kubernetes.io/healthcheck-port: traffic-port
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '15'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    alb.ingress.kubernetes.io/success-codes: '200'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '2'


postgresql:
  enabled: true
  auth:
    password: "backstage" # I hard-coded a password because for some reason, when updating the backstage with a new image tag, the new backstage pod can't connect to the database:
                          # Backstage pod log: Backend failed to start up Error: Failed to connect to the database to make sure that 'backstage_plugin_catalog' exists, error: password authentication failed for user "bn_backstage"    
                          # Postgres pod log: FATAL:  password authentication failed for user "bn_backstage"

serviceAccount:
  create: true
