backstage:
  command: ["node", "packages/backend", "--config", "app-config.production.yaml"]

  image:
    registry: "" # This is necessary to override the default value "ghcr.io"
    repository: tferrari92/backstage
    tag: "4" # This value was modified by the backstage build and push pipeline

  extraEnvVars:
    - name: GITHUB_TOKEN
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: GITHUB_TOKEN
    - name: AUTH_GITHUB_CLIENT_ID
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_ID
    - name: AUTH_GITHUB_CLIENT_SECRET
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_SECRET  

  appConfig:
    catalog:
      rules:
        - allow:
            - Component
            - API
            - Resource
            - System
            - Domain
            - Location
            - User
            - Group
            - Template

      refreshIntervalSeconds: 5 # In seconds. Default is 100

      providers:
        github:
          # Catalogs
          catalogsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Resources
          resourcesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # APIs
          apisProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*api-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Templates
          templatesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/templates/**/*template.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Systems
          systemsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/systems/**/*.yaml' # this will search all folders for files that end in .yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Groups
          groupsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/groups/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-transcendence' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Users
          usersProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/users/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-transcendence' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

github_token: AgAQFLKIyb9erZgfPda5ic2TvWyQM5iz263DVTire6QQtD2SFu/NNVp3bFzQqyMhPshDRXafI/lqdI8KxGwAETCqKyJQPsRJVe3E7KncQy+MZ6YIFgRUqDdpqnzGucv8kJRPdqO4tdTqVQ6IHNxwLvGcYI9RvsT66Q8ohcoCNrD9VCGMlJdKlKW6Iz712S48tzxYjg9ZhRqW+tB2rRJOz8BUxBdZscSnjn7PmzH4PrQZs+9egQU0AfFf2x57Qr1FLnJjPpK41yx10Pm4rp91F5JLHMGDoHT67Vb8tBJhlU+LVlbnRGIgwfhIJiToO6cm0joFM+hSQRJTayskZCJegjSLeVNhaJqxDdHz4C4+1SQeQow8iwFrWmpdtnlS2Kbrdm2dVIErDmFC5bhJPuTR1rZysAoy2k7bGFC0G4Si5rl5+Ba8kp97mqwOFw5zn05mbTe4Y3+Qq6tDSIrEtnVs9kKPhKPAfXL8zNWOU86Dpza3TG1s1kfTFmXYbVesiwi/J7+HKUadPcdeoMXmr8IblYKJ3SbVpAYI020zItSaOIJJw4Px8+w4NjMGa6vJyDVZhf6gXs9epf7nwpHILBWQo6ssC2qhxIgCyFn5DZvlvdrfAm0GqlZVuYVpOzPCKpFLY4hyfZjwvE0ELGYY5hw1mUe49Q7TT1yPchja9UNOQYdGGgnMuXmjT/iIMjgEiGrwtc2Kdl7C//TYVHR0yWvjr/EZ1YyW79YB9LUL3OuumqAr6gCsobsQJcdA # This value was modified by the sealed-secrets pipeline
github_auth_client_id: AgBW9MJH/qeM0AUGg+OL5T34ZN49IbendnhdC1ZePfpoAFG7zl2TdwuUTpFlk/K6xQigiUBtdKtHtpl7zADByKp8wzoEgMqETUduvMcth4y0EGJoomPQ8jNHrjkHQjN4q7nqbwZdlV1GguhLpbuUc8Y7zYnQi35lzR1BU0KrVJj5s3mgtJrlK8kfnix+yoANzpbaSeDanGAl321PN1T/W0EfkTG+MkZ7QeuGB9BypknsXg6QwHaO7fUcD1gcEEYtoX8ROSMeP5+xSMECQXDbobXQGRNGwrdBt30SsGDJGPAQl3SkJT5aVTzlHUBNqgGwnSVHleEUME2XT1qLaU7RozL/DD8wNfFPjOEfjov02dMktom7X6FshzLxCvOD5P0k7vWhK7Dyip3jDZ3EfVYT+OHN0pet2NPeqCo4mu/un/lKYmICctSpKF8ZFM1UmCTO3dDT/RjwMa6fCzKePsltspPHeslBahJLgCfTbWejspA22ZNT04fvgROmPLWWvJYC634X3UIgL9uNz0LUxZsh3qcacEPXeBMtMYdrQxX+pfEGmrHteGAdXE4Qf98nC2lL4zLcvkXo2lOWXbtxTQ1FU6Hjs1oDARAzqBl6FIN3+6HIOz9cUW0yt0rZP/2WYAHMdZWmsdaZqjpRdrYuvKlFVcSVNuVIRnJnCUPVqi/F0yJd+nwHYVvX62wACMRHUBs/LA5D8QmpK2LNuEmCKzvAMsTj/dUusA== # This value was modified by the sealed-secrets pipeline
github_auth_client_secret: AgCxS5aChkov7goBaxu8hypsiBBH9Bh6PxgQiH7SxdguBcjIvbq8l7hriPT5dD3OJ/hKvKuof472TOgDTtHaSkh2bokbu3QHoe+3xDLQ7tVJAj/ZNOzn428S9evJjh5qU+7YnziBkyYqOm30PJ+g70MNRs1xgx0kW9jW/OofjOM+gRGfNsIqASvTZ6xbj19eboJaU64eMMsod0pDeYHildUcC+D/PrIklwmMiB3XqFinuCa2KQNXLLcSlxwR1ROFFCHKqw7qAwQkJYrYcOzgHaiKfCVctT19rBjq09rxWtbrsDv8pazEn7ouVhYlGlYreVupOk7EptxZFQm7venQnSA3BInwlGr7uWwA0+3Qbr/uQIdtzSgYInzvVY+nMIrEcvRvpXs6wdw2xRz3S2X5Wcv5FEp9JgZqlVflgoIqbrAvQFPMCdIQIerdWQWNErapSNeflpjl/4An6OU0iv8lwpwZeClHHmgkPjad1G01W6ARDu+DPW0PNZwuY8v1rnU9jG76ZzMSrd93R3rEs3P5yb/ybyXgZaQGFFybbeaCNa7w5BOK5sHLZGDLYV8G4USw0W+cHzz0ltl/q0Fscy+V8H7Xf351QN8iJD2DxNb021FZjwe86eiC40dwGm7Xu62VzCAfDmX8ghHUB21HSPkVs8wBL7pajuRaTGjwAZcZLplNP5YAOoDJo1kvMKv4ygsXyL+NbLJBtSAYNsfHcQX77ordwX8fgNzMk210mGMyvwvrFQvKaX0hATEL # This value was modified by the sealed-secrets pipeline

ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
    alb.ingress.kubernetes.io/healthcheck-port: traffic-port
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '15'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    alb.ingress.kubernetes.io/success-codes: '200'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '2'


postgresql:
  enabled: true
  auth:
    password: "backstage" # I hard-coded a password because for some reason, when updating the backstage with a new image tag, the new backstage pod can't connect to the database:
                          # Backstage pod log: Backend failed to start up Error: Failed to connect to the database to make sure that 'backstage_plugin_catalog' exists, error: password authentication failed for user "bn_backstage"    
                          # Postgres pod log: FATAL:  password authentication failed for user "bn_backstage"

serviceAccount:
  create: true
