backstage:
  command: ["node", "packages/backend", "--config", "app-config.production.yaml"]

  image:
    registry: "" # This is necessary to override the default value "ghcr.io"
    repository: tferrari92/backstage
    tag: "22" # This value was modified by the backstage build and push pipeline

  extraEnvVars:
    - name: GITHUB_TOKEN
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: GITHUB_TOKEN
    - name: AUTH_GITHUB_CLIENT_ID
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_ID
    - name: AUTH_GITHUB_CLIENT_SECRET
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_SECRET  
    - name: ARGOCD_AUTH_TOKEN
      valueFrom:
        secretKeyRef:
          name: argocd-auth-token
          key: ARGOCD_AUTH_TOKEN
    - name: GRAFANA_TOKEN
      valueFrom:
        secretKeyRef:
          name: grafana-token
          key: GRAFANA_TOKEN

  appConfig:
    catalog:
      rules:
        - allow:
            - Component
            - API
            - Resource
            - System
            - Domain
            - Location
            - User
            - Group
            - Template

      refreshIntervalSeconds: 5 # In seconds. Default is 100

      providers:
        github:

          # Use this if new services are created in their own repositories
          # catalogsProvider:
          #   organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
          #   catalogPath: '/catalog-info.yaml' # string
          #   filters:
          #     branch: 'main' # string
          #     repository: '.*' # Regex
          #   schedule: # same options as in TaskScheduleDefinition
          #     frequency: { minutes: 30 }
          #     timeout: { minutes: 3 }
          # Catalogs
          catalogsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Resources
          resourcesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/helm-charts/infra/crossplane-managed-resources/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            # catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # APIs
          apisProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*api-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Templates
          templatesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/templates/**/*template.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Systems
          systemsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/systems/**/*.yaml' # this will search all folders for files that end in .yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Groups
          groupsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/groups/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-transcendence' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Users
          usersProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/users/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-transcendence' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }


githubToken: AgAcwIvNtcKamIBvJy8zsIyyHf7a+qUTRdnFy1uP6HzWICnaV1NP6KQ3ZPAZHhfCzJreXyP7vFzWPeet2HlTwiWt84N5uU1kgbhlWdNMUBd/gsBDDJruZJbfIcVEADx9M+dmLnBKGrIcpa5EKwX7TCQGqLZXQ+a0/07pBzUuXNBI4F7udmhwwo7wyKcKfecL5Id1xI/4lWZmy3rWbVAPAxWuCahf7d8cc78yI/fccuUsEnBURbn9mA2Uj2yE/m9ZYn20Mbhn8J4dqWMycumXtrDttCAIymoc9zMxLBUsJdWNEOBZzTm1ZZT8E9227JnkPBavN3NJEuVz/F4ZcPa9kdD81eN0KCKTkqU1POL/NTWARlrMuEIECKKbhyjGEE8hPj0E2RUpgE9RmitITJMG/c1K4UtzlPUYF0/+Zxy9hlhrTruI9pIymHVOAa0zIg2RGnksqGfBy5+w12k24OwKEqvaPwEWJ0nSpRNS34ChexilhJBWpOnlLSlGyBcPXZWxE/h+RhDQkTfsHFPcoMIgdOAPodMkhqa3mYl87qmTA0svDMAfMTbdeiaTcGmcP7WiFPmPjTA52+wc7ELtRmaGf02sEDiJITVPvCtJmeWPmqNslDGxhbJ3+jb6QiholC3XCCc65TTu55gnbtUA7yotDBFIgCtaBA0zWnTm4nTj5iuxhVnuesXTDnuXi0xTmjSUMlSCdUN+wJIZn93TfWxi5Wxu901qxNp7C63jwekc3KZg4+PEyJvYdfw/ # This value was modified by the sealed-secrets pipeline
githubAuthClientId: AgDpcpcIlULTCZQ0TLr6TueMzfYpnMt/+psuap3I9aeIlRQUpO7my8Gc8P1fJdcOTLnQGydDgaQJmuzFpRm4LJ01I+KRXMuMMfbkkb4EG5gbDeY4advcfb5YiIUIuVJTXdzXQAPudti6yX0vGGb28nlMrJmbIDPYMx61vXMeHy5hlSb4KLAK8Ej00UopWCu4t2q2+y4Gjjn3bRS/FHmVmUXmwRhF1rpd5HV3Rnwp7mCICpZ9hxsJ/Swo1k5VuYRGYnOdJTT2o6viQ9lHDdRnXz5C3Pa9oJKXgoYQw15yWsgqr2VMZzKJ8XWCrfhXcp/SrCktJsaHVLu8+Qp7u5uTcJXP4WH7RhIj5YIL0owPLZrXjrihrb21s1UE0W5dax04auPU5M0GP7IEsyKYy0O7BCwMusC0g8K3FrdNSO+Mb8UWnEHDbL1/p5Z76EpO9GB3t/VuBFXvVCLfE0IS1ipyHNI8/wNFrRF0sM0AF8lTt5MQHgWcX+FdVM5sGKN1lcSCHeSHaMuct1KsRNcY2mR5pO0aLMd/hK0/m5izxShKKd1l0gwfFg9KS5zaQcdpQdG5/mXQfkIsevpGNOQs0U53QeF5+G+yF/H4O7hQvTYcsjurOvu/MlcZmxqxzAmTz/uh8osrAtFhxEKvOZ+8AKNEryOzyuZtj24zx2Vza8FcK6CRr/ani+1sne3KsETtDcW36+C8nlgahEFyzLaaDltrGHghGRjgJQ== # This value was modified by the sealed-secrets pipeline
githubAuthClientSecret: AgBPVDnY5xXCqgHg01IKw/zd2e1/L2ntAS9I9m0VTc0NrVnSA4CYiQRFlBN9wqI5h9NfX9oPFI37/NDm4SZxYCpCiXewnUgWvPMZV8xT/Th8+5n3+T4trhgjuFFJw6tQ0E4pubsaXtb/WMdJlyilcBRNKeqwgIgnDGf+ziN1w9kM6Ca5dIbijjgfKOT2vK3xd2lXz6cBcEymw09EN9/lXEA5tmtAyuwcCIhH+aikuo8HtGZF7PBwP8BRsSPn4y/jDJBLL2Q4Y/OvUB1gFL78hsZWsW1Iu0sPT+RkbeQ5LSUEgXOmovvrlJSeomtGq7Kb4hCnt49IRRDKfiYognbxGqfAZmsOj8x5oSl18sDxOC4uoAO30CZkaOQQ5FUaOzcf7VXvHOM/S95SR8BjfL9KOaaBzQI5MG3QYveXBpnpYFeT1VNC/ZfMeJjkGch4I7a3Op/YgOf+8kwgkvNscPp1uSRxm4Ejx44W99Tr3Il0We9rg7/OaIBr5EsJLyk37hmgaqLjmx3L2PSQ3dA9ohDIhd657LrWbWBybTFAngAHA4TJuimHE47YBq1puLqDfckOV357mwN5x643Cs8/CRvwATqoIHn+4bqqGrFSXrqshQAnZ0yNjIWhF+BK0d7u9CPq0kWS1yVQsTp7NiAsrYEuHxotQeZ8ANLWTOJxgOusLtaO0os2c/crZLAIdA8qNYcSnLivIVJEkThrcj1xu2jJZnVT9RbnyIe9qbN7QdeO/cHyd87ZICPKqjKi # This value was modified by the sealed-secrets pipeline

argocdAuthToken: AgAloEHElHeF1ML9qoA2EhrtCKsdjN1eP4z6Q27EgWYw9xSUPr7bLvZrS+rzuvCoKFzMXBz8rgvISgi85I6y78LKADuCHEBLS99MLg1PhcsLzluGdL5cI8bgE0xBrIXJkyvnPxD0Af2wvTQxXwa85vTtf0aCE3OV9XAz/RZ7hCWsaJ0qwHkOeKherpJbXHwmBqySoJ3a9yTupimJkhOd2EqlnpdIeDiYCErTLqG7iFmZAE4e0+nPscawV1/scpkiAjqv9TTGysmLzAqD8cPT5mjFfczj3EC1F2W+EBvB8n6JRvPEMLQ/nicBjB1ILQPPJ+od3aOJYmheHqMOCgXqAJzFqaqU8/ArRcaV7f4HGigDWyoYllMwQuD2QR+8C/o67nxSAZkto9wugNQ5MaU2pZexZn76lt3Z7t2giA8wQfVQA2a5Tuoy78UwlS6c77kKnteDbOikUkfoGczeYEjVmi0z57pWsB92JwKZ4NdlgbJL9o0TFWq1SrIs7habqSgpeldcyiuiFQeuZPhsdc67rlVB02eu0TLzeD7+Q8XOHjWtusYnNeYguaTXIxe4k3n1Tx+cGb6ZRm/cnw5JMtIGOKCZKImpaKoyvMoMo4ZN/6oHCYalTw36TIV5TnMwsucMfZ27fxsd0Iet4cfY4uZ4lRviTT2EBzeDzxtmsBRToK2x0PnWS5WHrvXl9eEx/57UxnxWzsbxiwG0tzb3fVwYt9V1nj0osqXAKI5QISUtQlZXrfbhvGst+RS+uN8v14F8VXz83D1xJ1cvQlDMsza/GIjNc/AmjhD7bzWmwkjjBfXoTzheWewHCZUQh/B4ArJcLe+KfuS/ztA8Nlz7QNk+eJtnFZP/l5EJcgECu2q+PmBF9xBRWVakLP0HobHj8pecTg20F6n5GBOp6Sir4zIL5NkKAO3alDb4dM4h/HJfXKsOMQUDuIskwcOQQNL6g9cZtp5osAeqt+LKW1y4YgoBuhN8g3Db5NUFIC4pkbxg2J+HdZWjZf9DqBQ6MLneH4lF6PF7f+/H4QHhRgDtUVAa # This value was modified by the sealed-secrets pipeline
grafanaToken: AgDPw1hl4N13bumtPP8LM7pNk640v0xDh/lmIhRade8Z3+odPUry4db1n0cpDVrW8m4cGm2yx3MC7SBDRJAnsMNepBecFyOHh2AhwN5cv+8zNTkcPmycGx31dx99UpyinJPXn6mAU7TPgclIe4xrdAanqAgIPIp9CWXQKE9CFMZ5LGE0SNcO/VDOqa5lZ95AqoqsAuGsLm72Q/yCSDudLR43I1KOmI4MXJcrlCuPuw0E+mh88+C/7Hh9Nh6Ai+5uukRSQ3SAqWk6T1I7ZpDq8AA72S80C+RUKy//y9L3yjDP+JwVDuuUiBECaMZxNKeu+JOe62j2cV0WMM0MPR0g1lLVfSV41M8tlAX44iyN6iOu2vkta+phfbvF1qIPQigwmPwvz4EUo5l0y5LMX9X1Gd7/4VMBW7gJutUpgmaPyqIabYaNzwOuR0bkmy2RmQ+RkS2aC29tDSVM43u5zJGm5sJtHW0HLtJo8GpYMH3NKUUEuNUMzpb5jGJgPQG4p5mDZTjFlP6VUOgtLYkHqAV0Qov3klb65JGzey4EDcJgtODjEUPnb8/0kDg0kV47f0VsDB5KkkO1LhPPRLmHd0F9A6JuLN4fW+yg1Cs9HkUOJ7jyqqs58Z8hm1thakWOFO2EInfw3Jti5iRRiGgibeZqbo2rhak3+JxvZUS3CvD3TN/17gyANbVW9ww1I0DgB+lmRYWDNG3Ml/3C98WOdg3gFTJBZxBCnB3hlb1Ae5r36i1R4QVlggzbUsQAWxAQkrMg # This value was modified by the sealed-secrets pipeline

ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
    alb.ingress.kubernetes.io/healthcheck-port: traffic-port
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '15'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    alb.ingress.kubernetes.io/success-codes: '200'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '2'


postgresql:
  enabled: true
  auth:
    password: "backstage" # I hard-coded a password because for some reason, when updating the backstage with a new image tag, the new backstage pod can't connect to the database:
                          # Backstage pod log: Backend failed to start up Error: Failed to connect to the database to make sure that 'backstage_plugin_catalog' exists, error: password authentication failed for user "bn_backstage"    
                          # Postgres pod log: FATAL:  password authentication failed for user "bn_backstage"

serviceAccount:
  create: true
