backstage:
  command: ["node", "packages/backend", "--config", "app-config.production.yaml"]

  image:
    registry: "" # This is necessary to override the default value "ghcr.io"
    repository: tferrari92/backstage
    tag: "4" # This value was modified by the backstage build and push pipeline

  extraEnvVars:
    - name: GITHUB_TOKEN
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: GITHUB_TOKEN
    - name: AUTH_GITHUB_CLIENT_ID
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_ID
    - name: AUTH_GITHUB_CLIENT_SECRET
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_SECRET  

  appConfig:
    catalog:
      rules:
        - allow:
            - Component
            - API
            - Resource
            - System
            - Domain
            - Location
            - User
            - Group
            - Template

      refreshIntervalSeconds: 5 # In seconds. Default is 100

      providers:
        github:
          # Catalogs
          catalogsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Resources
          resourcesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # APIs
          apisProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*api-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Templates
          templatesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/templates/**/*template.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Systems
          systemsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/systems/**/*.yaml' # this will search all folders for files that end in .yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Groups
          groupsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/groups/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-transcendence' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Users
          usersProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/users/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-transcendence' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

githubToken: AgBv2Mq0EHn/HL0TxO2gA0KPSX31fnkDtxPu1Uo8FGox1vUOeZUeEWwv//I415svjTMhV84Dl9+84qQNq+IL9/Dx0LfSWOZgzW5p7jIu8gtsa8tvKHyd0Lz0rQWeM1wVqd+5BShOxZ7oUCA+BFUkq3oT5/VM/XTE7s+DZvbi+c8bxLNezok44CNv9M8UX0mD+4VBo2qCnRhcpGm8dSmRbTgRciHpg39ZqBvHkPYjHZs0TLy4LvFsbEBreAsuqWOvGgc+suaJMnmG0l4nFVUKjacxDQ1ugUmhMNfMipeNT65k58FMCH9jzNKd1USck5tk095n0aFrm9ozgdQrAVOBu9qE2fp2a1FH/bsMISKUlXAwp5/9hfCEztrpB1Kyr0KvxIsSI8t40iTeA9f0RVMaLkR8fjgq03UGJhBLaXpEL1iUI41Hm58aMQTZ5MNhQNjdU3almxrZmHHa9V1hjA3LBCmcVMTBStVIYSZG3v4JG7Ks65D+wBkLa1a7bZqaKklqIp+DFPNoIFZMJPLWtpTa3sz7D72h+MS7O1F4pQxqreN59Ch4cJW30xvcn3+uZk5Hmy9j74POU5SXP0VncBGvmu2mzlj1FkfQ7nEznvjYYZ8DX2+Vq1VqpqAFdu4JKy0sJ0gb3qMKZeT1IWRAe920lqnFce4elUI9Unc4cQlRBKP7sLWnJJS2xZcHCFvPgQ5K72D7k1qhTiGuavtXZ+mAEnrcCoNd8tSUlzffOQW9mtK7F7TGsiaTS962 # This value was modified by the sealed-secrets pipeline
githubAuthClientId: AgCLb8LnJ58JxtjllbiDqMm6CaC3oP174Oq1dPqYyUzuI58F3KmYJ4C3LKgDKoyL3yk/5JBHQdYSpVZ2viCvH0fFX4Z5gbHyw3QxOWOTyj5iUNdTwwtmtgKtoQ9o1mabiTtew9d0gEfoDoOmATdloTvIHgfzLWhatN79fksG39zypy+omENUq1zpTEL7uaxcGnsEq33qQr8vhoAWrqCVXicQx4tnBkSFQHC7OBe6FRGP/+EjTyYoJeoAh6kJY/sDkWvfviFqRmR7aORWd5R1GlKV6vpM3yMchHMD0HNWYVPGO97ZyJ46dUaDweETdYlfS/03Bsuc3ozKRdL5UAuUoKmGu/2MtBVLsTVUTYYMN4QLO/s3rXZeH2GbSSKhso85/YqxGWF50Lifjqzi6NQt1Q/DOcTmSzTvinuDh8Kj4RGQqx43ubaEJoa7DFFqUFldIO13wd33Wa3rVFaR6aFWbgDajotmDrH9G2WwMIqo3CtTge2BJk7uSRHGx/Z+QVYzBImU9xVaKwjd3BP/ZykWi4rkI6scJelzFYPJGcFlZg4hyjODoYs4bnGSKG/F9grqlaIwrMqv1ubIW4E2Zc4z+73sjJWR2vZdjO0ppcXkk+Ihx9k2wE0pkFwN1m86ApHZSKgIiFj2GgG0eZtQScT6u+1sGzcVXehdWw28HVGmC9Ww5TrH2V/SbSzAYTfDLmf9lVp0eqAHqHbgUV76Q5oihMa3em+Pyg== # This value was modified by the sealed-secrets pipeline
githubAuthClientSecret: AgAMfF08J3Wq0kp2CekIc1i/0K89Sw3K/o3CeymnH+YCa/Zva7Xg8rg6C6WfEXc5nCxhL9VVpDAN1L89XWYCi5TGw0W6kB+zNRJsY7KNuzycXXcMf0FMd1JV45Di/aD8SddqQtHcvCPAwbHvKAGzuP9p8zU4VeYfGexk0JDDfbetBSKaJ6uTxLG7F+pRqOGBKXaw6yGsQGX7HIrSNnvjUX/VmP+DhdrMlwtf9Exm+FAM11I0grpHv5PrhINaMMbGKPVKJ4kIMMKu8QKTdtjVWQqvhew12AdA5oPSZi2jZnfmDQ5qR485flYWSiwpgQhhhfSjiumu097fDU+8zJpGWtvLJDbRiPCgBicUbwbtzhCHTOX8l03rlP8qjYsnZBJY6i4hkZLu45iDqq/x9RwsySAcSzUbJRLuQAS9u0YSdl0s0HknhweQtaOpe3wGpYwitTmprRHMHv+5m06fHYZix40qiWMAMdzbWaaKC6LvqUig2iQtIr0bi3tA/IVN/nIoIZR+18H9LamoiddAUs3iss1AjK+mMkrzXioWGEr/8pl7CkNM8w/erfrW13TaMBb7uLTlbNL1PcpDIzup8B0iOpTscBgu0Mcy+f9ByrzSWcq6d+yOlhG6yLezD1rbuJqy5ANfsxuunVbib4VHO/+PG6ZDa8lV5cmIAJxYjpZk0VyHxzxA8J9XNs+XjWA0F0E4DRmgkeM5ZfsozX512dOeiMADtTYhb12wZqzWhmrJHOhnLfdCyAcrBtT2 # This value was modified by the sealed-secrets pipeline

ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
    alb.ingress.kubernetes.io/healthcheck-port: traffic-port
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '15'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    alb.ingress.kubernetes.io/success-codes: '200'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '2'


postgresql:
  enabled: true
  auth:
    password: "backstage" # I hard-coded a password because for some reason, when updating the backstage with a new image tag, the new backstage pod can't connect to the database:
                          # Backstage pod log: Backend failed to start up Error: Failed to connect to the database to make sure that 'backstage_plugin_catalog' exists, error: password authentication failed for user "bn_backstage"    
                          # Postgres pod log: FATAL:  password authentication failed for user "bn_backstage"

serviceAccount:
  create: true
