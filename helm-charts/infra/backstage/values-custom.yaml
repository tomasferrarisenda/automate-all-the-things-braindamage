backstage:
  command: ["node", "packages/backend", "--config", "app-config.production.yaml"]

  image:
    registry: "" # This is necessary to override the default value "ghcr.io"
    repository: tferrari92/backstage
    tag: "16" # This value was modified by the backstage build and push pipeline

  extraEnvVars:
    - name: GITHUB_TOKEN
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: GITHUB_TOKEN
    - name: AUTH_GITHUB_CLIENT_ID
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_ID
    - name: AUTH_GITHUB_CLIENT_SECRET
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_SECRET  

  appConfig:
    catalog:
      rules:
        - allow:
            - Component
            - API
            - Resource
            - System
            - Domain
            - Location
            - User
            - Group
            - Template

      refreshIntervalSeconds: 5 # In seconds. Default is 100

      providers:
        github:
          # Catalogs
          catalogsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Resources
          resourcesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/crossplane-example-manifests/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            # catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # APIs
          apisProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*api-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Templates
          templatesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/templates/**/*template.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Systems
          systemsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/systems/**/*.yaml' # this will search all folders for files that end in .yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Groups
          groupsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/groups/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-transcendence' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Users
          usersProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/users/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-transcendence' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }


githubToken: AgB41w/ibeueli8QKXLlWKjnJv+QA8R4T5gzXhulWtX0lm7y4Qq32zcj/BuCwc4CRPgPAzYar0pkxKkMgQKhqIxEWaiqSakP4Ht6opxRiYO1SQzAyYw61+N2Czmv390LADXholAiMukuvQwAO7u8j/ObyWN0wAknNmlQ4gXSyUe92aCHgK+KMNeXVk77GvTJFWsuA4/TjpV4FM5x2ycKJJvaaTNaE7dpwMthrybeStGHYwhvU3oh7w9ln73TEBeN/a+SuJAzieAo8HAr0CbI1ni2hlQwAMnIhXRymySBvbMVITulyNmMtgdn4KP3VJ8kXZRTZxq3NTkfND4uZWTPsdHf7AjS0JoR0wXbhl8nZRKae2S6SFLBkVoxxObfhoOG/Z52DIrZVuDZ3HXpldGuc8O9E/gLsrPBhuocq30J517tOOjiccWqDHaecqU5IBOUoD56UapVakQDVRiLo8v9DFFx6BxebMAltEIvJCqJ4B0dz36iNBL9X0hIA480nuZjN4O9fpMAcIAHMJF4Bt+XQkBE5siSb4I3nzFKAUTwoCgMYFlxtTOUkxPyvpSpQTZZOVt1z8Zt5rEIm7qdGR6kCQ/+v5N1BJ6ufYjjK1T7tzgbMxG4lGsfc/F25cZlvx24F+37PGKLYYeNCj6AwDqPiYdVRAirAgVOWoeV1s1dJUTbFBZVhl0fb9eo5iDMlIevYavCCl356/lrmtIAlAAta+KmarONKt3d9DqCK5JCmpvm/3k4skoa5NcT # This value was modified by the sealed-secrets pipeline
githubAuthClientId: AgBmKoWb0hIPqDVp1Fm/6yxzAyw4pYNGyvnTm6DBF7hrjmNgUWYNpZUvFQsg5w9GFL/xskoRV4GaTt6Z7EOcujNzlckm3YiJbhGBx2v/myRA0DoiiXViRBNkxGc4Nbpp7ABCza4zTbnEPTtnWv+qj/Kaqz82VTWvma4X8lJCAHlvetxiwBx462v+qQRH32oSr9SROOs7k0s2+TX7nXiwOZ/dFr5gJkVwmyPNike0pxrfrMWX97JH+PabhrjVyE785eETclgstzTKmiJNRfC/+VBj8mhILOfgjGB/AC2GCaZ8l6/C9KGauXcDBvOVbBKq3n2ARBhm+GRd75XkVCT6yweqViIxbXaqP5Nru7IVldnjKZFM6/Q/W4s/vaEEOFJbsq+v9y5LwpVksIUZRxUignp4qYGQubZT3CSwKMj63SiF3QyptQbANGaauMBf8j+BSZOgDP3F/qtvDmhJaGXYK0i9xE8zHUyrA10VrKELnOjcn/dCaQ69uBUi9VQLVejnetM3b1CMZLEw8WtLWtSghLd26DOIELDaIH0hIDsGQU3lKoiQjn3t7obWu8CLh6lZFOgC87FkK9ejtXHAUwQ6MReKYJMcn8bPdGcytyriHGnHph9Gl2xayPo34bkeMsDhQeuF9Q760YdMqDMlivBDLuOR2t7JoCWJgElvsoHF6E6wgP5nXUODLBVEqXB+H8NInk7ELuZeggydZnquhWbqtAmJLgOUrw== # This value was modified by the sealed-secrets pipeline
githubAuthClientSecret: AgBx6SZtd4TdjH///B67SPD5f6MQ3a9ZWeOrHW71RwIMsRpD8y1RosInLPD7AgDNBFntESEYcOclGUShmptKSTimabsUg70LFF6KqLE5fvkIlghSgZt7MePp95uy/nnxPVHHg9LmUwOqR+Tuuj81AgxAut9nmUhgCkkSVlIpY56R+Ngs4avmDPq9DUgRpiaoQYyKDqubMid5PjPoptNjSRLuSv9ISv0Eb7LnCJzjynMIONFZoNx9Zq6SfSnAyAe8AqigkA0iI0ZhqQKcOUb26Iy/RMd+nYySFQcKrU/Vk5yWOBzdeFwI4G6/PPv7h6iJVjPwXkADQh5eiDDPxzFQ+zbCJiTv09LFEp6XC/+eFuYAWjjTvnAe/dTjvA6+rJTzamnHeVsqPI5/2Kx1GtFmJXu/MTWXqkp0D1NpJgJgqmaGJuAnkoCfxLpvfDUTyxyV2e/Afk58VmvBu/eyMVezrECl5ohr4cYlIc3TEGkcai6yOJuEAbSY03nh7su7mJ9NYMPMKuhlY6OYIqNyY7KrUUUndnKIVY27JTLEzTNmQUUJMxxwrLhdSdghqLMFnxBhF5cNfwypBOICkZItpLEBlJTqMzRPcCadAc3Ey72uIB7uASyQOHZX+PBAZhGTswzNLd8gOAhUBuxookTZXo/8FETbKP5ZumsiXnvCqxLEzbpGwjQkrIlFLGPTwAh8CIUGeiLjzP6HCeJ2wDn17lsL7d9MUOlawbSsvWA/jgWSduzcJjuPq8qqdJBk # This value was modified by the sealed-secrets pipeline

ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
    alb.ingress.kubernetes.io/healthcheck-port: traffic-port
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '15'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    alb.ingress.kubernetes.io/success-codes: '200'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '2'


postgresql:
  enabled: true
  auth:
    password: "backstage" # I hard-coded a password because for some reason, when updating the backstage with a new image tag, the new backstage pod can't connect to the database:
                          # Backstage pod log: Backend failed to start up Error: Failed to connect to the database to make sure that 'backstage_plugin_catalog' exists, error: password authentication failed for user "bn_backstage"    
                          # Postgres pod log: FATAL:  password authentication failed for user "bn_backstage"

serviceAccount:
  create: true
