backstage:
  command: ["node", "packages/backend", "--config", "app-config.production.yaml"]

  image:
    registry: "" # This is necessary to override the default value "ghcr.io"
    repository: tferrari92/backstage
    tag: "16" # This value was modified by the backstage build and push pipeline

  extraEnvVars:
    - name: GITHUB_TOKEN
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: GITHUB_TOKEN
    - name: AUTH_GITHUB_CLIENT_ID
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_ID
    - name: AUTH_GITHUB_CLIENT_SECRET
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_SECRET  
    - name: ARGOCD_AUTH_TOKEN
      valueFrom:
        secretKeyRef:
          name: argocd-auth-token
          key: ARGOCD_AUTH_TOKEN
    - name: GRAFANA_TOKEN
      valueFrom:
        secretKeyRef:
          name: grafana-token
          key: GRAFANA_TOKEN

  appConfig:
    catalog:
      rules:
        - allow:
            - Component
            - API
            - Resource
            - System
            - Domain
            - Location
            - User
            - Group
            - Template

      refreshIntervalSeconds: 5 # In seconds. Default is 100

      providers:
        github:
          # Catalogs
          catalogsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Resources
          resourcesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/crossplane-example-manifests/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            # catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # APIs
          apisProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*api-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Templates
          templatesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/templates/**/*template.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Systems
          systemsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/systems/**/*.yaml' # this will search all folders for files that end in .yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Groups
          groupsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/groups/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-transcendence' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Users
          usersProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/users/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-transcendence' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }


githubToken: AgCfNXlA8FUdm/8iAdYRD20pex0/pbvXdi1Cf0sL2mZnIIaCpV2v7ZM/UjJUPRxtjluPgcZEm2RVDrajNNyiU9eSbfmOt3Rhv0rRYzJ9Qwx9bf3Wu0D0dxrha2F0hRkr494qNEqPdIPaCI2jD8JhspagwfhKp0b9GDYTnn9ROURE2TdNDIQuHhPzqQSRxZo93ou2sEO+R+BlDSUeki+Q4/at9eHOjuPC13hRzeGVObEB6FRvncC0QjgFHI8D6NdBEtws4xDtrBg+jty3E9a2c/FqlL6v5MIqJdHid9lHtr+g+hUH2hZdvZoTlUXz0BQ5Bck5qTNlNkEiYokBaC2cyMArajtnB2uvyGUQN6hhL3UT5Qp6vPS/kFJPbglUmXfKNcekWdZG/HyvXYXmvu1gJnvVmFkJoezahiyPvoCiIlpP3zkbK3MEWlvGpIpqqeVVZM0ZHsKwwWJgnX1gz2VXzLp8GODpMLFKoo8631r6NyehmbCldhvfQpMjixptFsYJgFVWumiDwzCEypRy3aCa+/mFNo0BpCxA4079xYv2d5YwpGoDW4vCqarwW3dfCiMpNiwGsDYghNuXdKVBS/SOx6uhu6jkl6m+jJK/qWeQik2hI1sOGozM3uFPg8Hx3713e36cstmfNxLxZXZIYIh+z6Oni4V47q0FmaiLGnzn8KcAenJaK2zgwjyGMnVi6hGlcuDtjjkYDbxd1SW4bXykN4mBgpB9d2plK3TB1FrSNao7gnQQJhUa4jQq # This value was modified by the sealed-secrets pipeline
githubAuthClientId: AgBNV6odvoG7yvRnDs2iH2whMEUz/BJGfm5WF5i/DDtkdwO0WqL/HkTFGUmsg1w3idqMoORK2Mi2OnttKMwkppWWt3cPiIFjS82AQYvKolO2FSu5/QXSIS/KpWlef2fHWzSI0DwRtYctdoNNn5l18e576r4Z6DQJGM0Er7c8wmBxkOoUZ5Hk5MuNSbBfdXGwpZ/7sPcnxiAjHD1hHfW1Jj1I+HHJMpUBMtN+w/CwyhKEbicixLAphgx/Phq6nV4TGLfVDnaKZVjhZxixP2ATZmRNSdCgsqJz0nKsY6VEWYqHPvzpEb18uYDpY8QzpmssK4l4SPVPZt3dAFW+VLOLcPHf8QrITjHpSvodTV182ovcFf604MiTZwpALrzD6/uiT+/lM/QPlCjyGZiB9M7GQ5FLGciOmnalgnNlKWjj5seAqVZG0HmUS4lH9wfnrG2EcHUnQWVDloIOcFzY3SbT9vbNC1/x7KIR6VHTJ6n5E1+0Li4NCDaHllMgKILshRxnQx0c8en5FGx4Q6jVZgSd7KXNW4FlX8hqH+TbgNX++RGCPB3RvtpEA71TesQk01xImNI9JVr3DnC9LjQfQlTNJfBsmbthkQq9xPU3koBy7wkJAiUfGcRKqb/5oZtvz6a5qiHTTRwmp9vJEeLCzdAfi8MKmyNHgbvc8v0FQB4sBI2X1J4Vzoi6DTS2TtbycCv4QhmZC/DNxuclQ4ZfejG3Z5Tz43FSqQ== # This value was modified by the sealed-secrets pipeline
githubAuthClientSecret: AgCJDnBeTiphMWmP71LcUdRifAgnjqvctlqHZpFu6qdBZmMvDymlb5TKLgzhMlSV3nl0IwR9lENRwm2glfIDS8DATFSXOYqL3XSvIuuL9z7HF6cWnK894AKSjRdERk0SyHkFDVbcGc7DfpMeLVdH+XQKZxp+1S3jUPaRd83kGzaVp+67xgkXpVaIMmD90uTmqic3aZ0O4r6i29WbSZ58lt6c8m+KyuCahkuwkMBDC7UX448FV9i1zaGZokSAaPo0/N4GgJqmzclgR7MoA1HUkvP2LiwUAPGHQH0PZ6r4EvxJVaTEngdgWGEKYUV2/EtYvMQvst5spdsDw87VHNeYOrlgGplbYRlBNyY4csG0tdipFXjSYw/DGBdU0gXkhj65c1hxYpy87H9g7jblf9T3rRpUpj9pknmHyhNJLO6NUC7iB1J9TneFc2WiHPp9TcgQW0wFMtDJQaoTXVRLwgp3JBcs9B2ecQ/pTh1lCNyuihmdMJFl60ruUULgjeI/Ht8wBc13qsyQzANZ3WpbfEKqE/TPJ2fgPMS4ZF+7Vqgh69iURc2X1Mvdf8i1OW8u1sHbygDXqPkSNBoQ7jVTwRERCAeZPTDHag+zaHjl5xz3egCDePzlhPmPwStQHy/yk+LEiqJ/0cG9Ynzp7Dk/nVdTAs0ccRtAt6Vn4KJEccqYQMSSSFgaOgbHA3LDnos7pTumu1g6HzCD37Sv+qNOK9t9hpFkmghhDU5JAZwGJo96c9OItDPvVLlaiYOX # This value was modified by the sealed-secrets pipeline

argocdAuthToken:
grafanaToken:

ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
    alb.ingress.kubernetes.io/healthcheck-port: traffic-port
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '15'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    alb.ingress.kubernetes.io/success-codes: '200'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '2'


postgresql:
  enabled: true
  auth:
    password: "backstage" # I hard-coded a password because for some reason, when updating the backstage with a new image tag, the new backstage pod can't connect to the database:
                          # Backstage pod log: Backend failed to start up Error: Failed to connect to the database to make sure that 'backstage_plugin_catalog' exists, error: password authentication failed for user "bn_backstage"    
                          # Postgres pod log: FATAL:  password authentication failed for user "bn_backstage"

serviceAccount:
  create: true
