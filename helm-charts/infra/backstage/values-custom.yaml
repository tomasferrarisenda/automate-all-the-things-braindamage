backstage:
  command: ["node", "packages/backend", "--config", "app-config.production.yaml"]

  image:
    registry: "" # This is necessary to override the default value "ghcr.io"
    repository: tferrari92/backstage
    tag: "16" # This value was modified by the backstage build and push pipeline

  extraEnvVars:
    - name: GITHUB_TOKEN
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: GITHUB_TOKEN
    - name: AUTH_GITHUB_CLIENT_ID
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_ID
    - name: AUTH_GITHUB_CLIENT_SECRET
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_SECRET  
    - name: ARGOCD_AUTH_TOKEN
      valueFrom:
        secretKeyRef:
          name: argocd-auth-token
          key: ARGOCD_AUTH_TOKEN
    - name: GRAFANA_TOKEN
      valueFrom:
        secretKeyRef:
          name: grafana-token
          key: GRAFANA_TOKEN

  appConfig:
    catalog:
      rules:
        - allow:
            - Component
            - API
            - Resource
            - System
            - Domain
            - Location
            - User
            - Group
            - Template

      refreshIntervalSeconds: 5 # In seconds. Default is 100

      providers:
        github:
          # Catalogs
          catalogsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Resources
          resourcesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/crossplane-example-manifests/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            # catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # APIs
          apisProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*api-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Templates
          templatesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/templates/**/*template.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Systems
          systemsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/systems/**/*.yaml' # this will search all folders for files that end in .yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Groups
          groupsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/groups/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-transcendence' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Users
          usersProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/users/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-transcendence' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }


githubToken: AgBQJj8Zcr0BXil+vwdQk1SDfs0uJ2dCu8vbuwfkX3M9FWeSz59to2DXv7oDavB/g1ECww8crH3/LhM/oGwoeh5qdGH+2c1JVYSH645TqEVpW7IFtCwqqpRvofW0pVEyaG9T6p2jW1NmkmODxsi1p7T5MI/D/L25UmJ6ZiSkQYErxMHde9toH3q8Oi6fqVYZGAf2TsDVaNKA0/fU6ddxq+m68/7+ySJfohndWD4IUeazM2wIp19sadOk+HAHPbcT0qeOD9OeeK1s8d44StYD5chgSi/wkHxIMoaVseSwV9yV+dqTXXTK+sVjvwEiNqUBgqj+Zo//zipQ0ZcJOpYNXCOPoErhAIh6yJhN1JGjmc4GpjRZK+MLPfmy2qobm1ZtUa0xaGNFTVe67PCf/b3dVxsZUgi0x97SHyUasyzKbWNXWJNlPYYbsDy6tqvp1NmuHnnkmM01sSw8rEokKbPkMs4+V2z5Ca6piBRxdd8bJp0+VgHRNSjWln6tzuLis9nE+YiGypMMEt1CBj6AwmbAOeE9ZJvonQKg4kiL9M7hFeZKcilFN5LewcfWg5lOVueQb1VFzs4B1K9ZO5sXVnYtfH8xx+uFuEzVIrSEY7RdmhXN7TdE+qAPeIZl/aLDk5psxvdVszHO2F44LWvV2VbFKyBB27qFAaXiw3q8oXw9ob6Lit1xxJHNU95Sw20tEvHZITfQTiHiVJ/GCnljb/gB34t2suRA/QFoRb2H378VNXJpJOgzkBKf5c0v # This value was modified by the sealed-secrets pipeline
githubAuthClientId: AgAkU9jG2ggIUws91wfFwQLFpZtTNZ43gumHzD8Woqq6xyBEIs41I8lx2K6p22tKvqKUZ1lo/BoI72Yiu2go/W0wZR5D7zWvwBvUM7nt7McndgxS/N9txt/wpNCScdgKBjVLMjo/AJw7BPt8Ceh4m25u4t5LAYZZNua4ILh/X6t7iyhld5XmE8PI4/KBReAmW7/F7bCaD8mjfNB7ejnOYfj4VTYyv/3K3VAIcPy7waCvWZbtSe80em0MY003rgIWbVHIg7eqslWIck6NaUeBKe6iGOBjWF+iyafNtkXYMl0YI9kOuwctWCICgr4yJz4bb1gAQ3kdy3mAfWAoEcItAqK36GVys5cEp3eMFUCItp9jRVcc32jYRlMAjKx1hYpRRyZqDLGZlSNpwceHlYpO7nEhD3NgtkuAmklicPrVeKG9cB8YxjZ53aRZTbP167yDVYyCpoHmNC2Z5qCytIjlZRO1k6y4oh6Z8CtGjtacMTiX+QhetZ8TguDXzHBSnkQl0bs4xr5ACaVMZBR4YeeOs6WOzIKAglT2laDUV2k2aK5xoKC0/yJ5I/gJQZkMwiJOkr/ow3eTWSG+ffU78klISei2mKNJn3+VzTBZpGFGiSIRJk1yfJA6BeRgV5+XEiGCkhdUSXuEnLOqyw1SfS3BXv4UEW3EhDxIwQwHTyWqfiD+VHXYtaiddl5l6b//C+7b0A58dP5WDUBbluWVFj75A4AKBfDWMg== # This value was modified by the sealed-secrets pipeline
githubAuthClientSecret: AgBPZ2o7SPSeXZyPkeq1aKoY2AcL3g4caXk/jFDrKEUmkvqOnLPvHI4eK2uzs6n5eR4WAmq3vZ2ZMZHG1YSYlltMGxqD2vOrFYknw5bP6WmsujzvFDgfjvIE6JJSsflaSsok4rJYgXhZMK8uLhMrYFG6Hlmxyk5GURpe5N4Q4u554yB9TPAlU8t+UoRlz224cyx0TarmyPJgMNrkbn3s1lP7mteiiqcgbUMmj4O1LK2de/Bt/RLCfGFzEe5DcKK/VpZUfseGI7bdm4Q0mk406dr97SAaKERzxK5cUg4FWtbE1pRl0p4MW6FYSFiDOsmS4QzXL3lOLauvuqMVgoO286vtB6LbV/0ydCU2WMekn+18ourXjkP7IODAnTGV6O5CIe0biyCfKBJRsCs/+Mye9i0yiLkyhXHwBfwK4ZkShdVV3JLWwgE5qHRHZtIh30Jsa0wDkCM/d3EkKxC+sNm3q+VisrmTvDGQe0o8EzBE2Lkjnbk1ZfG2s6fJUzZMfrbuAWmlhvkfQ8LG+bNNHGFM90GHI7d0FkRfVoack+w2Mp6yyESnjClWN2+diRCRSPDUVeu8Lw6EZN2qliNIdJxwMdG2hVHn0iMFc3bV3U65J/72CE+IZKtJw7VpBFhN+cQi3oz9Ir4YhSxna/MBIz/uERO3Id3F56NXPkd/KHnlksKW7Z7NPT5Csr4x+F+zoOxWbBTKZkB/r4g5DlOCfQQVT2v83ZMgzO8/tulgjVsRRiICdG/F2fAwd5sT # This value was modified by the sealed-secrets pipeline

argocdAuthToken:
grafanaToken:

ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
    alb.ingress.kubernetes.io/healthcheck-port: traffic-port
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '15'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    alb.ingress.kubernetes.io/success-codes: '200'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '2'


postgresql:
  enabled: true
  auth:
    password: "backstage" # I hard-coded a password because for some reason, when updating the backstage with a new image tag, the new backstage pod can't connect to the database:
                          # Backstage pod log: Backend failed to start up Error: Failed to connect to the database to make sure that 'backstage_plugin_catalog' exists, error: password authentication failed for user "bn_backstage"    
                          # Postgres pod log: FATAL:  password authentication failed for user "bn_backstage"

serviceAccount:
  create: true
