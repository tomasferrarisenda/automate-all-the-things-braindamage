backstage:
  command: ["node", "packages/backend", "--config", "app-config.production.yaml"]

  image:
    registry: "" # This is necessary to override the default value "ghcr.io"
    repository: tferrari92/backstage
    tag: "16" # This value was modified by the backstage build and push pipeline

  extraEnvVars:
    - name: GITHUB_TOKEN
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: GITHUB_TOKEN
    - name: AUTH_GITHUB_CLIENT_ID
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_ID
    - name: AUTH_GITHUB_CLIENT_SECRET
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_SECRET  
    - name: ARGOCD_AUTH_TOKEN
      valueFrom:
        secretKeyRef:
          name: argocd-auth-token
          key: ARGOCD_AUTH_TOKEN
    - name: GRAFANA_TOKEN
      valueFrom:
        secretKeyRef:
          name: grafana-token
          key: GRAFANA_TOKEN

  appConfig:
    catalog:
      rules:
        - allow:
            - Component
            - API
            - Resource
            - System
            - Domain
            - Location
            - User
            - Group
            - Template

      refreshIntervalSeconds: 5 # In seconds. Default is 100

      providers:
        github:
          # Catalogs
          catalogsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Resources
          resourcesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/crossplane-example-manifests/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            # catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # APIs
          apisProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*api-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Templates
          templatesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/templates/**/*template.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Systems
          systemsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/systems/**/*.yaml' # this will search all folders for files that end in .yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Groups
          groupsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/groups/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-transcendence' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Users
          usersProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/users/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-transcendence' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }


githubToken: AgAlrMbZWDnBK5h5q3MgPE+z2He/3oTQDg07vhAmKASG0Xxi2dasXVBLso6aXXODmaP9hJcy9DlgDxeqimI7X+0n2JMlDrCL13qxivsKkKxymm94kXHgFT4Fou6k/8VCgsPliZxkiEVN1BKVcTua/JEv0hFdUYiMDWi4ybHkHapwjvXR/DvlKlj7lpMHF7YB3z5KunWF8ysIOU63gJZMa2s7R+xQ6+kMAeh6SFxTssrSckJe86AfRppp3BxrqjRU+M8L8KJ0gXfqxkwJqQJ8yURVoUVfo7FHfJ1NlaRNn4xgLJVDwBtso2z1RSX02xivh2E8dOI9+Yti88xDobIT+oE5BF7QXl0sdu2KUkctQyeCes5AyPdNncUoaLrCfYoU4rhkWykXsni8jsuhoiTDdW9S4XWpnW/AoI12ZxvAveorqiIIbp1tbvRFw8GlJsl3IszlvCoyUNANnEjd7ViQ4fLCYAiaOMpl2P44ySmwGD9LPvnKbtOtpoNAT87BCRcnhJfwNHNytdriIIKbCqst349OVJVxHJpgio9TEa60swElI3R9Tg+fck8in3QaivHkaQCX+ThV2I9uR26Q9wQFfRpP6dTqqoNTHLTwdD2L1XEE41GIpdOrJbDp9S6OjsHhbeseHIjempG2nUeWUsYMepHiIKHFsKImTxkHm3e7tLdlUWnQ+pyX0aLfouyTzHc+zNBbmXj6xpU12UBAQQ0DWllNwn8mhsnf0bEWxD3xdY3i5rhvYGwP4QJM # This value was modified by the sealed-secrets pipeline
githubAuthClientId: AgB/Q1g6oCTDQwJXM3v7RLRhjQNKWQ6kzsgYSRjUoPpushwkveAi3LHd4vlD2cgPfvcD26DxHl5XPfbwsoZYOgLKy2UX2fX58ZDDCEzzkn1CuzMQcTFmf0/0fbJLnnusQfd2DudjSNnnWQVgL4DcdmwQZ0I+uBQ5i3ggk2HNMc8W6Coo6Hg6UYO+0+CQiYXZdenHfmWUYgA50mRDTMejLVcTbOe45KO+bEfMD6zrIF6BwideKHLxzkq5L8VJ0M/jq4Mx6Vrwt9lVcZoIgCcS8+oZ6JXYRQPibhzXwdlQnKsUPSonI9smtd65ujPgBi82ynUj8NSSbOdG6t9MCv/JOKf/YEpmYsNBJ23oyM4xXOOnLduZOJ+QMSyEW4+d8oF+Ey6VbtVLWY9zvJkmwcQJqawthLVUfS30hfXSblUE0sGbbIbfa7lsEFs9Ugy1/1LqAohyDZgz4WDq1bZQoFkFkJqlPrDMqcroUfWufHrQyprX22MpNqmjfNEQIMpl/kWemL55tUvmVTiONwJLr4uRHaE8H7lUgyLDIoMPQeLBhx3IUhVRPnfWHApOWNy71i7B/e6GenrsUiYgHru7DEXGYuGV9KSuH7d2kpELcAozUNF6DbA4kxLrqtnwfQRab/i7NiD6HwT2uvuY/j91J/spclPd8KcT5zeYX304NTsSf7KNjqv8aDQIBxdMc0wy+eHgpUmMbagfHy3i37uskUTZthSjblgicg== # This value was modified by the sealed-secrets pipeline
githubAuthClientSecret: AgCaVX7NI0CfwbCmZSRf1unED1LqFNgundqWYQStTFuZUjFh2Gv0qNPggUbJBF6tYSHdwkeTldyzWIoMxPOscGNAnteZnap4BNaTXLRGYReNShq2gbXwFabL4aAIHDlygkJesVYcRYlII90zNXjdPuwqfr5ZMLypEWoONMuaiAfDb99Jn4YoSR8xODby4EvImFaWOVXPwwD5kcdln+EurTLgvLyLTTZ4HtPAg+dyO/0mLdmOlyqP3Lkk9HJ4K4ff5HNPQXgZ40IddC95ditCuUmZ/pALrP3zlcjDL1hLYaorFQpElsfhyfaoyN/ZtRknp8CU0l6TiEyLAV286ycqkiOkAEGpa1sKLTn0lPtZVTgsifD0qt7Kyii2BaqGeVKtoh6C87nCnGeApSvJUDo6YAOhhdomN6Rd61jcpUTd190Us2t313lWQdipR1qxPJLDnu+viIYdG+jndwVzW+2skDR9AZY9m4Rr2CT8IqoFURJgNoZmArDqhQnWehVeAK9SlomNqBA+Xxm58oNT9FAslp8k8eBMYB34A1aoj3edeaQngC2z2SvQiTKAnbR7JLe3N4wlhH+N/HMRqP3wniBkCKY6Llbb9A2Q2L1tD6W95XQ7XjhvABkx+AqSwPSB9G2+yjJatqqfwMkomvdf5ol2D+coSBkhzeaDY4qLsTN9SghmCyb+dBtS288kjIX5v2FZZt1yrIY8aU33nGfydNJZvejXoFZuiHu4pphycsQSUR8ZVpubn/zFp0t+ # This value was modified by the sealed-secrets pipeline

argocdAuthToken:
grafanaToken:

ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
    alb.ingress.kubernetes.io/healthcheck-port: traffic-port
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '15'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    alb.ingress.kubernetes.io/success-codes: '200'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '2'


postgresql:
  enabled: true
  auth:
    password: "backstage" # I hard-coded a password because for some reason, when updating the backstage with a new image tag, the new backstage pod can't connect to the database:
                          # Backstage pod log: Backend failed to start up Error: Failed to connect to the database to make sure that 'backstage_plugin_catalog' exists, error: password authentication failed for user "bn_backstage"    
                          # Postgres pod log: FATAL:  password authentication failed for user "bn_backstage"

serviceAccount:
  create: true
