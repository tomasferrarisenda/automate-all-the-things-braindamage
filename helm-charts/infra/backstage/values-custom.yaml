backstage:
  command: ["node", "packages/backend", "--config", "app-config.production.yaml"]

  image:
    registry: "" # This is necessary to override the default value "ghcr.io"
    repository: tferrari92/backstage
    tag: "18" # This value was modified by the backstage build and push pipeline

  extraEnvVars:
    - name: GITHUB_TOKEN
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: GITHUB_TOKEN
    - name: AUTH_GITHUB_CLIENT_ID
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_ID
    - name: AUTH_GITHUB_CLIENT_SECRET
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_SECRET  
    - name: ARGOCD_AUTH_TOKEN
      valueFrom:
        secretKeyRef:
          name: argocd-auth-token
          key: ARGOCD_AUTH_TOKEN
    - name: GRAFANA_TOKEN
      valueFrom:
        secretKeyRef:
          name: grafana-token
          key: GRAFANA_TOKEN

  appConfig:
    catalog:
      rules:
        - allow:
            - Component
            - API
            - Resource
            - System
            - Domain
            - Location
            - User
            - Group
            - Template

      refreshIntervalSeconds: 5 # In seconds. Default is 100

      providers:
        github:
          # Catalogs
          catalogsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Resources
          resourcesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/helm-chats/infra/crossplane-managed-resources/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            # catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # APIs
          apisProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*api-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Templates
          templatesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/templates/**/*template.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Systems
          systemsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/systems/**/*.yaml' # this will search all folders for files that end in .yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Groups
          groupsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/groups/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-transcendence' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Users
          usersProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/users/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-transcendence' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }


githubToken: AgCBoPxDKo5IC4SUDRrcRZZMpNe817hdQwUXq4kqGjzvkT2xKZCXSf2fQ0Vi0/+jJz32aqENWb09+tG8lXHskAKemAFAkBZo9Jga6gCcV3jjqhB+SUs/aPoCGDoD74zgTdX9KwRkSs8K/i6lotxFEBC9V13Ibay+Pg2fnO174sckA3u5l1eVlDuqCUcn5YbcBetskzEUWsJMUKSkHzn8dEuVWgFmbMmULa2GI/kSe+tyCGPDqd7M4QEjj4tzP9Z3MxiHG1sNslzq80cSD9dqUC1XsoLBf58y30GUY805/sCjNF4NBXqC03v+PHDnLHlEQ4igYiuIVNki39HkKEWw0zNHvFYTDDpb14giPTagLJZxndcfVAE2g9hVNYy3SSe/opsaqJvtSaHMcztNhRVc0Q+UC9mmY4m5P4Szgo3gq8FeW2HLitWskZ00+Ls8gTHAdsB4/JZBvEGaAy0bGAmALdl2F0gabzk/qp141thTL/a1nxkIN0pHFJG+7a4Rv4US0ADcOg66wW36mMa1wByaIYoeuhi36DDa7Avk+bNObjYLEU6X32iUeuSceaJ4XigPih787IKuXcdHPU1WgTdroO8K2rL2IzLq3qpRmA8/Kz/aEqqK6S0sZ2q8MiYOx8uI3D3/N6pr05HhLmV5REXq0hgfxbyDoRZ/nPrl45AWPy7jOEPNeFIrdYSrr7svYmhlaY0gvGH0HGpm0TxgsnRkUOt3OBIjCqGo92835+0WNzXoqnKBxw3teOBy # This value was modified by the sealed-secrets pipeline
githubAuthClientId: AgBURvxxU9DKzZoqpDLL4P/W+x4nsLY90JK3V+aFKIf1iMKG9HPs6iNCyGJEW2pi6UdFYtvoTPNCrDDXfnRDoV/VOfyc8a47hu3f9gIA5mbCfiHP1f4OBqP8Vt3t60gR1XC+yZmqjBl1IoDILo8/J0cu+0ak0+WzSRvtrK+XRBzFaUYjPdnJ5FCgoV+rDkR3zd5FTm30Tbq6L9UZZSkE1mHW2AVE+dvBhlrzsnzgilwYwwjoB6kTe6Hu8RCXZh96OyEVfsj8KcmcDacSUaOnwqHLnxW8aphfPf9aiPLr9G6rR1JN45cXzN39fCndzCLpRVWOFabIt6TqC9rvhWgjthoeyWGWckE79N3mzMWIfZ6y57jR/n4JQgPjJOYv32jCPY0jQVAEZxiWj8/ABgwaS3YZbi0oJ6vKQ+TJDADwozZekNGag7TUwOW9/7mIFs9cruGuo3ADC09NRUvWkuGVbV0rQFpYI2PLxS4TgBfDOPKB3J5YcyX1K1pNYIMiWvDhF2FvRVHoBt7OPwTVWYJ0nozugAM7vpDgTLOqC869gQFnGkKJTaXPlvfRIu9kjI3cb+mxDT+eew+XLjrJbifg6PSRtiN/XAEC0WQ5sACsCFJ3HPFR/2C82+pTlBEHR21igzTxkrrczG+xR1hDDHbaNkufZabWnEaznG6GZaOqB6VBiagJS9yZJxKw2YYRLvyqDPLPEpBo2KNUh1tayoBmHdn8ZKR3SA== # This value was modified by the sealed-secrets pipeline
githubAuthClientSecret: AgAGSXSf9j1otG/nZu19vByhKICR8cEYwR0CgYZDjqxQX4OEIY/nrLx7jXSLVe/q8pkx3KFtyZDtGdTMYGYP4TWSCcd+FWWkIouZXV6GU8tQvZH9NvLQ8luMY29t8IRrFaquRAdDUsmoTC7DjuAeZUousKOpbn4cNT1JVC5HqmipRn2crcPA007Ghsrf5sTHjnjt9TODQ53Q5/JL5KMRYlOgVBr6jdUAamscwa5JDiK3QKrU9H6v2yPqfyvlkT/4TpTOLhn+DhNbcinJ9CWSJMeZamKhTiHcRdqRjMsK3LM0FCB+CHPSuFXRdSYYJ1A1Bnq0D9JTpemX9OG0wiK3LKNffS2cQAB7rUH0DZ4xid9xFhI7yA9lKYy9rc8yuu3WMGyY5ULJycUlDTaMUpKYIyxO2t7034XETvs009WDWwbFPRUAkckZRdCnMREM58UnMLFVyW4gBvrwjLf69uLcVeDHS2PpJnAKv9Nn+mcmd8TmeUBUlL7T370QCyv26YefSu5HPGWfTJntdJH+/y17lxHnnBSKo8Xtteh3IYtaJGDdg09nUQgp0giAjzHY6zj9R3tsu+wM39J5SB3C0c7ica/JpGhQjzY1+g6KaFLQyb0iD1Mc1RG5uKdauH3qchA46F/cC7PLBlkOZq+FqWxYYH+tOIzgHCGr87OpBSWekMK88vZSJNcjAHcNw8ETD4bZuoMQEYzz/WGoIz0arXR5ynuvquLxBoS+9c2YR8YfQtQ+L2LEE5s8eDcx # This value was modified by the sealed-secrets pipeline

argocdAuthToken: AgBZ47hmK2tnTg6hWp/QG9hGuHv13KWhh2cwoxmmBMQ2CC/BuYqkw7dAT2OlgDm1xsBjG9fbFtmC93C2E3kMoOSkrUOF3AmwWK6gKrDJ0lfkEdMdiBHwx/fOU2ov1TzvA+zzCUni/GJeIxuuyA0ErIXDXluLobSA+KJXt80z5TiS4E/8tfvCkHaSNZzPWmrkdCLEFVIEWvaBv0DL/+6zuymfxSjovyReoOMB9oSvIsyKo7bnn+sJfxa72FnNtGxg1NGZOIA5mZhl2rwRGIqwUKJnKBkC/AmAHAig3OUC/EQ1vIjBRKg2wiADUJdZ9T+yTGe3NLqDwUkAqJtReHj0ot23cmodcGRQVBSZzJob0QbFikqQXVABbd+FVDL2gVym+vLVk5kENFW/WK79/6Rgcr8P/pTBC5wJHOese1XaR5DkfhSqe25tGj3FKYJ3U9XgHjCk+7TVqMhii9sP/Z4vr75L+0E0VD6mj7Er4JfZdO2RmhQiZAd/dZ/vvTVYO0s6EgWaF2MbCV17VS+NPmFgOLR+Iu1Wp9Hl99fIvoF26TRjSl6iBEYM86WB4XFOq3vPt9pDNnMfNtIZ0qaYT4tVwkPp7l4uoutULV9D1vGt20S9tiD1OxwDqnu06HeI4xzJyOB7PUca8KG/PpkxIm3AGIEfzJVIHT+WvWd48bZWg4zGBSlwuJnLhRAadCOWmfyFGYqZmdXCVcws+HH5p5ic # This value was modified by the sealed-secrets pipeline
grafanaToken: AgBlDki/z6hiXfdSPgRZtOMkP2iiRdWm8eTkLLGD08QvRHMMKAmBrebz5bKTv7+7xAMbVJfLtr7wokvaQv61zW2Suq/k+KHf+3z0n+FDoK2xeeCCXEFKF1/01kbn6lgrdpHj1HgmNcofOHiXyXC060iwa1X3lFf9HL4Fr/rXSXgtoP4ytBgsuEjk4rtT1+ZdnpmAKLM4pQwknyEK+VOm1dpKZS5tO0DpVCktC+vVBPJUahyrpaxLkHQOFqyYUKTsNd+MYG7KKfoYxrLCruT08QJW6k4+LBIAL3GK9BCywtT/8D2ePpYlct1SXj5IxNL8Ph/k0Oo6EWrQjr28kuXFMF+BZpjOEi8hG6Uoac3s/mNSlI4zvmftT11k5qg+RTemblOsmudhMKONFVlnl/tXGKtKvItXNq9BPoTxKS9MTYTBVCmziH3pxQnxTA1eZWfxiDl6N3mo1z+jtMYJe2jy//+7UHgc1VApq+amzPDg5CfHng7P4fxc9XSvKsAmNTk9kEgSWf9nmx1JF964q6VEx3HzMkwtdcCcScVdu00BgtUi/kQOoV+81bakVK7nPhfcNDPo1oh+ET70lkrmqQDXmFoeXKVSpRofGmfmvkL+WGO7wTOMjI4P2ybkNMGdmTdpahlsoO2DMdFl+76YiJE8sA0YJKMJtUlpgH3xTyf/35vI81AE8sT9CAsk+lmjk9ZFvKrsaeBYxtG3CyJHgsLC8xbYhvxA4Vh/EH57yDY8XPrPzUbPc0yCMKS+vK6yMiDV # This value was modified by the sealed-secrets pipeline

ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
    alb.ingress.kubernetes.io/healthcheck-port: traffic-port
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '15'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    alb.ingress.kubernetes.io/success-codes: '200'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '2'


postgresql:
  enabled: true
  auth:
    password: "backstage" # I hard-coded a password because for some reason, when updating the backstage with a new image tag, the new backstage pod can't connect to the database:
                          # Backstage pod log: Backend failed to start up Error: Failed to connect to the database to make sure that 'backstage_plugin_catalog' exists, error: password authentication failed for user "bn_backstage"    
                          # Postgres pod log: FATAL:  password authentication failed for user "bn_backstage"

serviceAccount:
  create: true
