backstage:
  command: ["node", "packages/backend", "--config", "app-config.production.yaml"]

  image:
    registry: "" # This is necessary to override the default value "ghcr.io"
    repository: tferrari92/backstage
    tag: "15" # This value was modified by the backstage build and push pipeline

  extraEnvVars:
    - name: GITHUB_TOKEN
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: GITHUB_TOKEN
    - name: AUTH_GITHUB_CLIENT_ID
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_ID
    - name: AUTH_GITHUB_CLIENT_SECRET
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_SECRET  

  appConfig:
    catalog:
      rules:
        - allow:
            - Component
            - API
            - Resource
            - System
            - Domain
            - Location
            - User
            - Group
            - Template

      refreshIntervalSeconds: 5 # In seconds. Default is 100

      providers:
        github:
          # Catalogs
          catalogsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Resources
          resourcesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/crossplane-example-manifests/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            # catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # APIs
          apisProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*api-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Templates
          templatesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/templates/**/*template.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Systems
          systemsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/systems/**/*.yaml' # this will search all folders for files that end in .yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Groups
          groupsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/groups/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-transcendence' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Users
          usersProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/users/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-transcendence' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }


githubToken: AgBr5NGFiej8D5KCDA99u0Q9dQAvJQb61MnhXD6wvR3Ef5Hy474RAD7uzvwxHop1lH/KsO3HAcyjmutxeSdqUmz7TAch9it9CVzoRxckvHJmCE6qp2aK/UvFSz8r4msMFh7SL0AS/yoQyedmTsYgvc4DEsdDC34RwkO6kN+sp5hDjUEtHK7DR+jC9LjWJ4WeTMwwrcAq6azhmaySKLg1CnAncNbRZFPXySIX4pkfTTVCOagguIm2f79ZQ82zg8L05BhNPSIyXkMhC7m5+1cL7Wihe/LqleKjJLDwA83eV+gSVLFos49Lnc2EJSFQKBRzoH1264R5AyDLQQt7xJwkQBGW2sXjX/W3EsPIC5fAeTMXtTG0fUnK9FUKx+uitpKoNcimPV7Yfa9J+zgA0zTqv8oTUJaqnJCmN5AuxDklw/Id/Xu4jJ1Tii0lGoRtn2CO2+a08bIHv1hKD1YcaZoH3Ni4Sjqli/XdxiyEgnj20tBk92cNzy0RyxRObW2sod9HnBhbtQ7lzmp0AAPgvC9g+HtftcKIfEj8Adhe3npJSeVCX5062eruRCSGGwsfOUto6VlN+aqrTAdc0SMhFtUhEx0aZ9aXRDiv49yZ5h/5J5kwTCsPyeUdeHBiiZKCuuNbJ0pXUpzmJkd4l1vrYAuU1p1zb+gX3Hh3ukrmc1uRdpXLjyD86b7eL69z7DoWCoROElsDUiUSNLHMHc+YUK5/Wb2g66hw9hKRKB5cDyft4F9HkVVw0h1dEFpu # This value was modified by the sealed-secrets pipeline
githubAuthClientId: AgAWxzNacKqgNUIORJwg6jqo8lZQaemS+B4YVvr57RM6EGsfTASEVwKilj9imiJWTo0SKoJUvF8SKMEWjxTeeuHXpodDiDBcMVb1DVRJZNc5heBAj2s75Pi5/jeHFa6dc8MCHsgfmKvIMc0d6IeNTjFSgr5mVyuCymxp1bVLwsayi4FzWACj4Y4fs3Lj7msDis3lKxTHEno7IeradHmB+n1vei2/gt8doyZzLsCO8FMYT0q/yUqb5Nnkageq26PekNxKB7/o+cudAwyraA6a+lcG8ACv4DZBivpGMzWYOqdQpTHlN7iCz5ggPaIj2lIcKhgkGmaqJSUWu7c2fCLODSfOJ5EQpsDX0YJ6cUG3XE+ToY4qS7hgHeaMXSta5uKvYa+ojYZVLDtw242xz5ykxGHmZxALB8HKoosJ/YX/l/gjrNa+0su0rsog2MWI9ssWb/oaBIYXHGE0DGwcWNH3PBnihwDRZZsvQSNK5AKflRIA0q2k3sHidHH5FJ2XLeu/qfPdxgE4yKl3AciDKiWiCk0FInLOKYMWKTyQvunAB9VUEfL8XW/qkCW71Ww2+S4+bbUsJb1hMykhu2Xu/pKNvKhIuHOUNpC8e7+Pxzor2uOG4BbX8+Ns3ruHv9Iinu2NtSwJHlISrzzhKWxFVls3jviMIgoWDeSDSzPfTuIlX1cf1y5PnKNAEvSq+XMuELM9Zet4mYnl6czyzn2sKznFXfZ1i9tZmg== # This value was modified by the sealed-secrets pipeline
githubAuthClientSecret: AgCyuC8z90UWgcD/vPFsbr6RgQdnTW+Q3FZ9mctbvcLRbfYxiDL1SFBOevDmv0zjRjOF9t41GGav6Vk1qC9Me/ltuoATC/RzgaWxihqLFVOwfPqhf/SmUkKKrZ3SupuOkyxxjjl8StwDLMnmJnpjIMcuFzvpDQoR6DaK60wPgi2ki44j7v+/SrMB6vhmdo4rBq5aBy3cnw15/HkQsxNqiZ+BnLVRGX5Jyd9qiXEvvht8IxHFR5z0RtKcnWK6GtfHfpd5KUIXzEfMVZPeIFxlk7ildLAkvF0oCZGe39CWBC1lCvgJJJI1E7ZDeBm8pin/yn62F68I+jbqg62b6oEkW724MzI9A0DzWXPCxmZ2VNefyManrnKIb3MvDbY+Q7365q4tsqe4s8UZnPlsYj+gBu6DH+tqk05vmLyrvJSuAnv1e2zPbCKL+hJ99oUZSi1NrrJaMPuZ/wvLBo9R7UVnLMpEPmcK8VCpgeM5gQAPAdu9RMmYTqT2oLgnNAWilMNZtbMMz8Wzv9tTYxBxetj7ObqxdIXqOtkHrNLNJra1r0xdN6+BoehOCJ3wLM9KxrWsoJO5W70bfoYwz70WreC9GROnngNBXrq/sbXsQdOjx65nmBNT1AoG4z4fTnmdWoYVF/DncckuNm2Ya25fT9sCkoxAyjLGJoR0+BA6NOI8AmBwEuU6JdfN+nFfu2AyHTRgvy/bKo0adbMcXRDeUsucBwGslx7vjX57d58pB3rk1EQADGmLgvuCeGCp # This value was modified by the sealed-secrets pipeline

ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
    alb.ingress.kubernetes.io/healthcheck-port: traffic-port
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '15'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    alb.ingress.kubernetes.io/success-codes: '200'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '2'


postgresql:
  enabled: true
  auth:
    password: "backstage" # I hard-coded a password because for some reason, when updating the backstage with a new image tag, the new backstage pod can't connect to the database:
                          # Backstage pod log: Backend failed to start up Error: Failed to connect to the database to make sure that 'backstage_plugin_catalog' exists, error: password authentication failed for user "bn_backstage"    
                          # Postgres pod log: FATAL:  password authentication failed for user "bn_backstage"

serviceAccount:
  create: true
