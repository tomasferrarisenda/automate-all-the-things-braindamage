backstage:
  command: ["node", "packages/backend", "--config", "app-config.production.yaml"]

  image:
    registry: "" # This is necessary to override the default value "ghcr.io"
    repository: tferrari92/backstage
    tag: "12" # This value was modified by the backstage build and push pipeline

  extraEnvVars:
    - name: GITHUB_TOKEN
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: GITHUB_TOKEN
    - name: AUTH_GITHUB_CLIENT_ID
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_ID
    - name: AUTH_GITHUB_CLIENT_SECRET
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_SECRET  

  appConfig:
    catalog:
      rules:
        - allow:
            - Component
            - API
            - Resource
            - System
            - Domain
            - Location
            - User
            - Group
            - Template

      refreshIntervalSeconds: 5 # In seconds. Default is 100

      providers:
        github:
          # Catalogs
          catalogsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Resources
          resourcesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/crossplane-example-manifests/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            # catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # APIs
          apisProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*api-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Templates
          templatesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/templates/**/*template.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Systems
          systemsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/systems/**/*.yaml' # this will search all folders for files that end in .yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Groups
          groupsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/groups/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-transcendence' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Users
          usersProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/users/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-transcendence' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }


githubToken: AgAua8eAdrjArGMaqPk8NGrcq/J6O6V3XWHprZrLdcuCAxiWGc2vorprAcGcy7H8afUQ8a8NnTRDbOynulhPCu11Co4QDsEO0zI3bW6gIPDfRvoa6Q9O1lXCV0pH8DOJ9skxZAB6+OB1w5w2NcHv8dt1ARgSkOCe+qOgodMwwT76SUELhOD8tc6v+W7lJHP8mmjFl2snTfvkuVFVkBWa+Ky94rr1HUoRm1B/0MBrL4Q/8ZzlQUe2qTLYPDk+szUVqpKyB/xoDNuXLXuj8yGB0bPsF7fmv4jmCXui0/yJF8aGu62BRz6PIjDT4WwhJF+vpDmq64wneHDRNKwxQgWfr40sX26Hn8LtjUuL2UZ45qy1N51N2ZwF6ca+aCtubBSS6r56UtB3ZEpQi0Pg/v2uv4qGdRlp1MFHMp8kqo9FM9XETInKDi/IUWRrqlPL7lCVJpfrEUQ5PH4uSxrFUzM/96Dhvnv/y0+/G8Ox3q5igb2+WWmeWVeAmrBECUXWO3wNA/DcDZbUe1IjjFyJ6GR/iYMW7+c/CGTxGRYhVI9UypdcJnycjEdlqbopybMg00LkpeAmaBIoEOWX0LpRdcqMrvtSD4sZF32JO6rWPjGL7BDSNpbSomERFyls1oDuMIl6RM5UIKtf1q77bf6b1D8tWoBeyLtm0ReqyycPdbBoFyr5QgU1CWo+x4QS/aH9HOjgfyX+tC+TPmrFMQWuDsmRW4718ISAmQynXxLuI/YtKO7//r03/twAKHnL # This value was modified by the sealed-secrets pipeline
githubAuthClientId: AgA8qIBRqzA+ZU7STPPZ2J4fsDBL3Co89oCkHuq19G69/egdM4HGlVqoH/S+7qAsYzuax1IrRbYApy278dnJwZaAyb5thWFYvpqhb27thIRKIn5wjhzUJaO7mKGyBce56oM/HjQ5vH7OsdBKVup27ceviv3PuvI0Yj8Er/aY4f2fKp0WVNW3nDvg5aAb9tA5KDF0jCXgn1XU/1JelTvWnp+AwdXSk4jQJa2iY8Za8LL1uJBllOhac8LeaJXmjCkAHeIrm6NwQQshidfV82UXhQj46MPqmjRZjLBGZRHGILf7C9TAcaZMB+rMRQvopH2aS0URk8rM29v30T2jAU4aDqPXo3PTVorQOS9eRoS6zrEsl7558WjG39u8BCAjOwkgwet7n/3+8P21U91Tt/lp2rs1pEbpUGUhUHeeykJSdTLMbYMs4zF6LkaSmR/IxUl61Dnt3bGoNQY6APp1Ata/w0FqsotIhqn3d9EcslKTI7GZGr9pdIfUAlLIcIopmpSVmltBu3oC5pO13j8HMK6MCm/DjFeOW+HGW2YgXAbDWa4Ok0J2+yVxpNNjtRLTXkzxSmM47PUG1PCySFgVHsA/OU61aiHAi/MBIMYu7cRoSbqkJejUIVMEBScPhnglfqWKWfLc9n6Z7yOIB99GcetmW7nMKV0xXxDO0M1PQBE9fE4tNWeLsYp8+M7ktSQQWuX0ddcWuYf373bYjz/jSgVW/vpk9fEm+w== # This value was modified by the sealed-secrets pipeline
githubAuthClientSecret: AgB/yDItQhiNLZcVLeBbSrLFzUMiwfKywg6XpQNhm4cj1c2XQT9T93rTSGFskiCS1q0qq7bFVK4ZPwSj+ZIxlrMmZzWrVWDxyWqVlvXeYsqhyGAF68m4kQHA3LdJVmI7WX9BrFCqthfcgc3gv3PAtNs4imOesWKAKmjAsK051cmM2AjQMX7txEuPip++z/u42LbvZejm9lW9VWmvnKrnSMyCdwL94OWztPp587lzO/yoCt7ecxVO0HRevndE0K1NYgB4XUbp4CEp8OvgTOpuw3gFl58bPPbr0HqwwCKzQ80hb4Fz8vDl7IpKVAByVI81n5F26hRSLKYzSJRGkRd8BjehTxZG0z7nt5IoF6DWhOxB9uYaS4kA8ZgFXRmfWSlfJwo+tb7liG6poVkSfai0ik5JCmBIk4hxOSPP0kuvI+80ue9z0ofEiUNHFKjs8pt3ZkTK607F/pVeDW7GmZH4LNfwkOBp4f7V3/C2o5LS0MaWwxz9QUoFnkhdUzROwLRXxCvXGecTb70yK1GiBaO/bw/vFIQGkoouNfeBAX7vyAPpxGLb2/23PVc40NhxI9WWhjvIy3R+yHshvg0Z+W89wewmnMSOnBt683lN/Spgxi1JO/zFFUMIrRsTEod4VFV2aRjKGqay9uCAxBwz+ubr49o0K8MAe9oxyOaYM+Krticq28rixnmFNIbYFjxNMWPdSCFqAnrWcUS7q/nnewy8aFllWkGAuq56YETHN6o7w364lCOWJ4d1dlU9 # This value was modified by the sealed-secrets pipeline

ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
    alb.ingress.kubernetes.io/healthcheck-port: traffic-port
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '15'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    alb.ingress.kubernetes.io/success-codes: '200'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '2'


postgresql:
  enabled: true
  auth:
    password: "backstage" # I hard-coded a password because for some reason, when updating the backstage with a new image tag, the new backstage pod can't connect to the database:
                          # Backstage pod log: Backend failed to start up Error: Failed to connect to the database to make sure that 'backstage_plugin_catalog' exists, error: password authentication failed for user "bn_backstage"    
                          # Postgres pod log: FATAL:  password authentication failed for user "bn_backstage"

serviceAccount:
  create: true
