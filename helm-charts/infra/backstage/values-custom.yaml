backstage:
  command: ["node", "packages/backend", "--config", "app-config.production.yaml"]

  image:
    registry: "" # This is necessary to override the default value "ghcr.io"
    repository: tferrari92/backstage
    tag: "16" # This value was modified by the backstage build and push pipeline

  extraEnvVars:
    - name: GITHUB_TOKEN
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: GITHUB_TOKEN
    - name: AUTH_GITHUB_CLIENT_ID
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_ID
    - name: AUTH_GITHUB_CLIENT_SECRET
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_SECRET  
    - name: ARGOCD_AUTH_TOKEN
      valueFrom:
        secretKeyRef:
          name: argocd-auth-token
          key: ARGOCD_AUTH_TOKEN
    - name: GRAFANA_TOKEN
      valueFrom:
        secretKeyRef:
          name: grafana-token
          key: GRAFANA_TOKEN

  appConfig:
    catalog:
      rules:
        - allow:
            - Component
            - API
            - Resource
            - System
            - Domain
            - Location
            - User
            - Group
            - Template

      refreshIntervalSeconds: 5 # In seconds. Default is 100

      providers:
        github:
          # Catalogs
          catalogsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Resources
          resourcesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/crossplane-example-manifests/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            # catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # APIs
          apisProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*api-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Templates
          templatesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/templates/**/*template.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Systems
          systemsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/systems/**/*.yaml' # this will search all folders for files that end in .yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Groups
          groupsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/groups/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-transcendence' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Users
          usersProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/users/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-transcendence' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }


githubToken: AgBnVqZdvDT+0tZttylysI9HVV20v43tN6Xicj/HH70WLTY/ZvM/RyO68bcNt44SOMLWRPMPdb48w1d1LKLg+GyrqjespQCZ08KMVu7q4v7yRVzSd0bsvBJVksdCXVNugxfEXOhbxjnE/qJkZw3GziwqWc7izdP5DpVK3kggJtackRbeUethE7bjlYUJzSB3fFsq7FpSGs8jcc5E3PGabvjS4o5sIAqoBfsxapsWZxR2/dP3hybkVRyUnHm7feaIheZLYm3T1fEn8/28vNoFAoWBOQEov8Lgzemy+82/fyAVksHaor3GLTgh7NvFUp2jkC/gzoG9mGieotUBIk0dgiPd/k+7nEngVVi2mIM/2n68laRzJoKWHQrebvMziMiV8qHWBZv9EnOoJQqFAgfoLamsmFULqg+ijU7/Sh/ajomI4TT7v3NbWjJFycfhR2bnLBi8XszmY3y9s2vobQVI/UrI16wouMc7gltOauK0TMjoT27CnEYy0/H7KNc+ecccGFGbGT1limR9zx5YlYvhxtJAYoLO8dM8JKjxsXqUgrCRM4YOjgb8QoA9B6M+kBWSm3H+7G0z05keIx4+YsQy9FLJw1KDnJYh/Q2Xye2q4618sWDgQcRv0mzom6PFK7fUVjh9oeKOpj5l37R9vIZdFvzkSxqagRwtNV0VUwT9X1tOOsFCiOWcW70FXndVZwkhIEk5a6Np5qBEoLfHXqg3+0VuPlb0i24k84XW0Kd9oTZ8tC95wSxLiRDf # This value was modified by the sealed-secrets pipeline
githubAuthClientId: AgB900U9MEhdVolZWulO6777K8FVy1B1oPOyBczDtnVRT8zAbjy2ttjnzX7VHVsfVgStGV3mNKMOrLj8o4z/zDM6NyAz3uxJKRWcPXGwVVXy6mko1kN0dTDLpAhZ4M3ucMHvDxc67mB/LtqYlQ42FqIBmK+xRFiESGzKql6TTvAx2NJ4s+PKtiInFzfMu+P+lpQ17C+544WhQkj0WP5Bur+hzqx25cuN9NNsHDNQqrnqxcxpdOGows3nzGWXNeLhotzJh1VEGRXCsNVXC5RJBkDijRz8CrkjptdYMZuHLC9CJEmOBM5Z04WY7kESne2K49vWJDJm6BPN+n/RYPrO/zBv/icqs3GZ0bX2h4BP9WvcoAVK/02y8Kz3GMfktk1oJ/ig2rRZf/NLn+6GhkMrILxCH+Xf5Y8qKs1xyAcRtS5Oel1h6frZ3roURjaO+dffwtChvtX5KmexcFYusnbaGJx/+YPg1Kb5c6l5f6Sq+UP65uuD+f0/gHdQIn4BQiyxEba6jE8xmNV7Cx0bUXxjSE8QcPnYKTwDMus02VKTmqU4NMgwmvE8u1yMgmDopmXn4xX56hbnhyMuouz8JtQR0rch2UrZPRd8VLrftPnEVAsc5/Ucd2X8qaCup1L7KqqGz2+1IBWkWFRWRlF6GG/TCgenBP0I29ou1CgIRBEeyPfBTeNedZL/tXJTAMN8ab9drdBsy19Inbp15/UDhdg6eGJv27JZdg== # This value was modified by the sealed-secrets pipeline
githubAuthClientSecret: AgBDl9LM5ysq91qECn/SwxYDpDEDsPUFsS7xXMDgXDTMyJPEO24XwtmeOj1wgSL+jF1tH7bhdFm+ZCf++3dEYXq1vJauqKxQ06tHA3vGy+l3kqq/417sEDVXHThOsZOqOgZWg4F1LMnTM+7yyZ67nD91exuQ7et+ADyqN2IepRW11/DIsEY0slr2tCNyDeg+qeURYK2XZjQ6eX2kVue4p2UJLju3SxzmiAUr23q71HpOBSaLlJm9/MUSdg8OPV2z2a5KckHXGozsEf//jviPkP+Buk76v7+kpDMAdWLTjhN6y7E6bwTR2gohr50uNI3iQvemsD4/bLy++5/jwya2X+Qp2ZRj7+uDjYc3dXqDBKgF5bxQFwdQ4bVoEucSf8OFIpwzUDp4ziF3Vfv1xvd9hsiNEvKuKSXTAPFugPXplWXWkKrR/Px0xTWTV9oDseabBHBZwXPyNyOGz26/pXDpy+J3TXvf/2hQxE3NIhwLPtwtIGyFcqF+5ddhDkqVoRaq+T3ogm51EivQUiQgz6SCfwnqNWGa49DZdEsU5SPLdmkILzciCh5JNA8onNnu0havbUqCb0FQIbSyKKA4TyO+vlQCo7s/NAGCTb+mLmmDHSlgCoHC830mOfSRd3gSFjdn09wIhHT6gsO8J5iaI56uV+U9T0W0BPyD38aWajXzvecXzJB2TCNHkoZk7PObd7IG9MLopMUNZalQZEQOHydvPwAR5IWjsYSReubACSvy8HuQucGWhbkWUDwr # This value was modified by the sealed-secrets pipeline

argocdAuthToken:
grafanaToken:

ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
    alb.ingress.kubernetes.io/healthcheck-port: traffic-port
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '15'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    alb.ingress.kubernetes.io/success-codes: '200'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '2'


postgresql:
  enabled: true
  auth:
    password: "backstage" # I hard-coded a password because for some reason, when updating the backstage with a new image tag, the new backstage pod can't connect to the database:
                          # Backstage pod log: Backend failed to start up Error: Failed to connect to the database to make sure that 'backstage_plugin_catalog' exists, error: password authentication failed for user "bn_backstage"    
                          # Postgres pod log: FATAL:  password authentication failed for user "bn_backstage"

serviceAccount:
  create: true
