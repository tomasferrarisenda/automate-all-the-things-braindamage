backstage:
  command: ["node", "packages/backend", "--config", "app-config.production.yaml"]

  image:
    registry: "" # This is necessary to override the default value "ghcr.io"
    repository: tferrari92/backstage
    tag: "4" # This value was modified by the backstage build and push pipeline

  extraEnvVars:
    - name: GITHUB_TOKEN
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: GITHUB_TOKEN
    - name: AUTH_GITHUB_CLIENT_ID
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_ID
    - name: AUTH_GITHUB_CLIENT_SECRET
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_SECRET  

  appConfig:
    catalog:
      rules:
        - allow:
            - Component
            - API
            - Resource
            - System
            - Domain
            - Location
            - User
            - Group
            - Template

      refreshIntervalSeconds: 5 # In seconds. Default is 100

      providers:
        github:
          # Catalogs
          catalogsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Resources
          resourcesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # APIs
          apisProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*api-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Templates
          templatesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/templates/**/*template.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Systems
          systemsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/systems/**/*.yaml' # this will search all folders for files that end in .yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Groups
          groupsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/groups/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-transcendence' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Users
          usersProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/users/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-transcendence' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

githubToken: AgAdSAZ7WcBIGrqom1hH4i+rzZE69r42bNV+KgulCC7PTvBz8jbFNZup7AT2f32oFBPFpdKzEUnyahT7izf3+EY0FLo9apT9snWfJRLH8Yyhi7t+WdgEyThJSzn3W3IJyUuJnla9NY1wyBAEgB78eAzcnbPKhFkxOUFqAmuTtEJgERjb3mzmkG0vIWFfItJZcY3Sdz8/qPiRz4zNcaifqWO/M2c4yILoTCXuFFF1jkOfU/3jo3mTXHWW1/5OxXj3FsEZ6z6o4DgXxgmqnrcpAdr0hQ9veZXMWD50pFrSJ3Q78v6RxlLCrse4uLtkm3Qgx8Bua8/VREpPRSngWWr+lQoPcyyCd2GcFrl2jrSFZWQsK6qVkwT6Y9KmXDr02OaCgXGMM9vZJWbMu0ks1RjxsyniZxdzD/tyUDmErZ5l0Ol4z3DdUMLC0sltAKq6rWddqOrlkhjyWyoMntvaVioUuPIyfLpm0+xxY9VnJN7paTj1o3xr2G7vaewlrmtM51DNqKTjIsgR1t62nFy6XPIr6Zt8IxYge1fFZpAvuDsTuiwHuyR5pYOBZS6ndSGWZVPrMCDKUeBm5rvrABih3FFsddYn5dD0yQJ2iuyrwDxL3rOXbLBlHX8FsUbTkEdNvHHQh1wVj2jTiiQs7gNY1VlATRheIww/LdgXARYk7CQ44gIEazCfcTNX+X57XjBKfSZIFF4vai3aXsI0spJYZhMll3hHBAKS+wJroeHTLyNZSKerl+S5322uo2Vk # This value was modified by the sealed-secrets pipeline
githubAuthClientId: AgCltR8qjVerNNtNwdaq7bvClXZT5NwBGMIk7Ccol/5gHNE+uu1Id9YRjcmQKkJkQKj1dz1N9WgiORaf/0pJCcz19y/1ng581xHTjhWCgt+Df8IftmQKGXtS0Mc0KrowupcZ+/oSzyGWTeaC/hPywdbCb8IVHztNbchm/U4Xz/OvxxTOEl9zd76iNb7ObnU04DmBGgpk/fTyAVXAcy1U+zRdNffh7siE4rRTKLhEzhkXWSub6o2XORZ99p1F4T6rLHxfS7JH7xJQrNNusTKyOb3A1jTg0N5RAenFTQTRehw3EbgghQo2fZjv6+byrFRn5+XjS1vw/SmjllbnHKRDheoqhv8d0i3I1RoNjY0iXy7as2RkiQwFSEloJ3e9tNMwTYWQR0mnudw3PVNj7hjyRBYHBAKuvGG7kOMCwDEZ+U7V2Hxht3YPmYtty0X2IHGeJY37+1gxU6FeYoaq7De8tLIg3vhWfomjc/RLE2uAsdthdPArJMz2ideLN6Lk0bZKcyzOu085uk8z8jGv7TMMJPNyiv99FBb3qomW8pwqyv9u+lVlaMunCH9CdPPszzoaL2ezL4zlCJ9//LBsMSAFAdIkG+IXYorToDgpwGXS07nB79E0KSbymm0ntnYh/fO2h+YbH73fCwt+Jv1hWejRl0/dK1VMNVF+xese3PRZal0XloH8vGQmWulbwi7vEhQyOq8h/fwklU2o/G03Zf+trNNpx10jVA== # This value was modified by the sealed-secrets pipeline
githubAuthClientSecret: AgA/3ztBhoZLS0JPfxgShV133zgwFtDcBOTfdyxIXlXq+qsd07EB1jYLqaYGrcWOS72I10GJxfkcXhEoKBJOVkpIfiEmiF+i2Vj3uASEB2zNt7tkuML3tDEmpH77cMMBb9o6PuE2M57nlX6+gr0OTrirXzLshWGLXZYL2qplrcVv9r5VsN5vaT2/So4Nv0UfjQhrAbiKk6TowE/8ZjsPkGucTvk//expsbKwiDXBZsQr1MxUxeleE92NfGP5We0oCmneodLy2/CFrCl7ruBNz/C9dC+Dxy6ZWH6gi2wuHJUPuCMNABfTbmdTjo/25/WuRw43ECDzjrK8odvQZl+RYfAb2Pg3K8jicLWcifWieOSDLegg25o3CstaPniP4n0SbIC1uX2eamfjUUVgMX3o+8ZZNeo9qfAAN4e8egkSzMAq1InAvoNoAu9zqRntkRem404hQQFtr8gMa96mWKpte8tYtF5gGG+kJWSlnW+S3GCNYc2+TAGP9Ns1ilim8azi0Qmp4fO4TuuwGtKoiXm7vz2bC20D+aEN17aNuJFDIYdd0JBCU0DooHr7lyrvgNoLzF8ZIKdoBbyAWpqfFgyKCel3EIU4sdCeJmWaVDTu2M8g+A1H+nmikrG4b2fpjcgxeTlj1bl+1JvoOC25OL+c+tu7yKyOnhC6MLR35CvYZvHULDQAHMuS63cefLZGuio5lWTJNNqGLLgEviG11ZyMbK1S31XgyBNaUQuEqZD53LWavsoIBLUCJcZz # This value was modified by the sealed-secrets pipeline

ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
    alb.ingress.kubernetes.io/healthcheck-port: traffic-port
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '15'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    alb.ingress.kubernetes.io/success-codes: '200'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '2'


postgresql:
  enabled: true
  auth:
    password: "backstage" # I hard-coded a password because for some reason, when updating the backstage with a new image tag, the new backstage pod can't connect to the database:
                          # Backstage pod log: Backend failed to start up Error: Failed to connect to the database to make sure that 'backstage_plugin_catalog' exists, error: password authentication failed for user "bn_backstage"    
                          # Postgres pod log: FATAL:  password authentication failed for user "bn_backstage"

serviceAccount:
  create: true
