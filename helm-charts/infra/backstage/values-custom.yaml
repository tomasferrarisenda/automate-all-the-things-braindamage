backstage:
  command: ["node", "packages/backend", "--config", "app-config.production.yaml"]

  image:
    registry: "" # This is necessary to override the default value "ghcr.io"
    repository: tferrari92/backstage
    tag: "22" # This value was modified by the backstage build and push pipeline

  extraEnvVars:
    - name: GITHUB_TOKEN
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: GITHUB_TOKEN
    - name: AUTH_GITHUB_CLIENT_ID
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_ID
    - name: AUTH_GITHUB_CLIENT_SECRET
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_SECRET  
    - name: ARGOCD_AUTH_TOKEN
      valueFrom:
        secretKeyRef:
          name: argocd-auth-token
          key: ARGOCD_AUTH_TOKEN
    - name: GRAFANA_TOKEN
      valueFrom:
        secretKeyRef:
          name: grafana-token
          key: GRAFANA_TOKEN

  appConfig:
    catalog:
      rules:
        - allow:
            - Component
            - API
            - Resource
            - System
            - Domain
            - Location
            - User
            - Group
            - Template

      refreshIntervalSeconds: 5 # In seconds. Default is 100

      providers:
        github:

          # Use this if new services are created in their own repositories
          # catalogsProvider:
          #   organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
          #   catalogPath: '/catalog-info.yaml' # string
          #   filters:
          #     branch: 'main' # string
          #     repository: '.*' # Regex
          #   schedule: # same options as in TaskScheduleDefinition
          #     frequency: { minutes: 30 }
          #     timeout: { minutes: 3 }
          # Catalogs
          catalogsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Resources
          resourcesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/helm-charts/infra/crossplane-managed-resources/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            # catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # APIs
          apisProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*api-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Templates
          templatesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/templates/**/*template.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Systems
          systemsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/systems/**/*.yaml' # this will search all folders for files that end in .yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Groups
          groupsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/groups/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-transcendence' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Users
          usersProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/users/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-transcendence' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }


githubToken: AgCdxXLSibYVUfHluz9i05emvVSuKvonvc5urAQS6JKhfoWQ5Fx0rchhLmobZhPHxurTsR7DnIViU8DPCIAfimGabxp9PafSX2hnmd56zA92cIwMZqZD3k71GGCJ1o9tRp8fPiP0KEnsf8WyXPHx06A8Zfst3gJrX3+rz929y44DYcrQnpLKiqJyZeImxelmIWgdgDveYgchEJWytwDkA5skEN1haKJfM1NhsLfDs4TRQ21PTyTitHup8pAbHPKkfhsHBPe0Jh5aaJ8kjP1HN2MZXU+AsuUVf6MGMoMYD3NcUXuR/oxq3KOYjwADRd4A/01438sQoaHcYJqjbKkFMh0E/j4Z7LbfpBB392XEvthWAv0sMf93VAh4UHy3q7oRnxSgXzSvbrYdkKGKZ4CkS4Ar3+eS4cEI5Ij+08a5TkuauG3X5zXhEJFj93DmLgrU/NSU6MPCqMMrTVW8TIfD2UR1f2Kk3s/hNQeeuHDDVOzGdoMSpx1aEUS1vKOsvSQvRnQu60r5ngmEvPNqEMrmCo+6t+vg0kn4u90qR9TQLHbITGZ73OITe8hwSuCFgCRI0+e0q8NsERVk5DPrdUouJ7dv/0VMmG4UeS6dp3L17mnIKq5vJha0PyGUewyCQmDPp2EFK2NvPRakWtSEzp5DSyHJ5isv2COgRBpC3lP7XsB2BTw6iuG2CLfqQLe9XsTn251BeYqAC09mJeFeDlCJGzb2xOsUzepi73FSzl/tIVmOtZDbgZHhdUkQ # This value was modified by the sealed-secrets pipeline
githubAuthClientId: AgBdXFchOYH3sGpReY5oKO2DRBhdj0k6yafEFweeL19Jd2Tawm4HXWt4ykti7oRyITTIKiLebjRyhyLhtIVB0DpJVZUBTU0ynbmyv+Q5sde+P/bi8agF15Azg0TqRHgAB5DA215HBZkQZO1Vfj/s9rC6xvxfheQMLYGpu/luIqYZ6POkPwOqmbVPznNjo6lF+uzO6jml/SMTX4l7fFWEZAbV4XfGcqFMpcA3CTiIlQUv+s0izb178fbvtiimaI5XA4V7sKsuvwXtasb5o1/LxslPaE0Cgc9Ak4N2AxEsjSeoEqpM4vuGHoCkol+8EXHZRowS30p7HqNZoyzOWbC+4Qnnl/VsVC2owyc10Z1IbjWjvJ9bG1DyFnLbqz4t1A7+RLAkkq7xzF81l6mEWBrcSopVe9ZsUVPzw0dR17ioy8iRSWhahjSlaELcmeJL4M21RhFN2u2BowCYPsxvq4zFU1L/oF8gr6+6+Vem5ej7o6pPJ8H+l61pdIF6jrZZTw/q81h+cRkcfhwi3WzduFAgE8l99rmxWPw85c3GnazfdsVBgD+KMJ5zaz+r8Eqr1iQSLxCBNKBvVoGKM3yFBaDWVHoQ2YWyfVfcFW08ZYXyRKYynHCVTSZQZ8eAhYzeHrJsccygZL4T/qHTGqdsgxTklVw37X2dPv2+ZQ9YkA7yozlH/3CUOG4dmwU8z4MAX2JjPr/aWO2WfQJMlqnxLLsW1AMFNKZBUw== # This value was modified by the sealed-secrets pipeline
githubAuthClientSecret: AgCcHDIffJu7sKrboDGKb2WEbLiR6t4462dHMoJ7braZjY5+sHNTLoB5HzhFnT0tJzlR9VBxrBWep3YH8osqUh19iNTvsH81d60SOyMsTcp6+u+45b3mDY4zGys65PhBqOwebkzSyWSLllSaoPz0y5rtN+D3SbMhRHRkCkohm/yCHtnOphYG4InkAUgUZZZUltLrYIFQYj9CZVQ2AkbFqDcev1GY7F32RuE8LAmGSD4s2oklwsM/xtOFwDZTsmKLclzpOp1OT04T0IjwPZKG3QBzsXxKHw60rM6O7MuilNGjjU4/D/X7P2WTYCpkausH1VAnsTzF4kXTLefdt/9AhNQhUlMw9oiq7iT8FdAJ8I0SdjLpnRwc+Wpr9+ZZs1z2oVNzI6SjdtFEIjCJI6ewjUcj8UqE2INKsa4cEMjcEbN/4tU4TLevoRiusgvK0xq0+aKdTE3snsGsSD5aGaA46lyBywi5ZgGUPh295F3nQqEVR0ktRSaRpoIcmLjnYFQR6+qUfyYah+dorqVUac7I6s28ncddSUM8pJ+cLK6xQoGjGQHuPdWXlTjfkfVRDzQCZnrmxjVFoRhk8RZBacuqwi3flCtBuJhIp0/UoUYgZeqR84OJtEJ62ls5jqw4E+TKfFNPD74sHGZe/XCf2KzbZADzuelLiOzudHSUn14yAP4Bx2i1tn+DtzD83Bi+FUr17PrO78Fnoqqj4OAhv9LfCzgR4S6pzlKMgtMuRAgJu5TB20GRkqljEMrK # This value was modified by the sealed-secrets pipeline

argocdAuthToken: AgAK7sTzNg/giTEmlrNpB+63C1Coj5fEG6wtLDL9CN9ofwrqPdG8VsYNeokkRZEw+4w4a96PKvhLH8qVjMyDOlBRMQVvr+1UYVw/OC2V+s2DbOHi8QXOj4FbIezt0UrnxHGGj0IEmW5atn86RBCJ6aTDXvlABBdut1FYRYrF00yQnhMZ4dKeVAF5W6BlLx8kibvK35LeYzwwumlOuENKPZNUixzr98MCC+UDr2xk/of5QqLYSG0MYnN/1REQ7+RIm6ti1LYhMpvq2PAInAEbi3CXOk/Meb9iLzr14IoD5Ekv2OirCfqsGcuAkULNjeI3ONk1lgEg7Itm2EUS0jwXOf3Lz3rtV6khnK3AhULIVZW4mhagS+mL15f9JdxVq474DUlRl3twP8vk08F8Lim5RKHqwGEjwb5NhBIOcETdwn+zYFzOprpPHkzn7BdjFjc3I6lNVOYg5Gc/0iY2B6BOvbPyqpRr4ggyGm9K0TGjvzBkGh8wnwFbbt0BxywlzmS+43/FetNfI7LHPg+OwPfWlSjz1SuzJGcQwJYMyCcVA+G7Rqer8cQKxSyXn+RsDKokdvY4UsyWI/gZ9oDJm6l2d+9ONsTfHqaMujxsOxFRKyhYV4r1DCOEAju6wDp8Uy79pZUin7/MrwpVo9PDPTlJ9jZ1w3H5O37y+18iaBpGoaID8HVxFQAqLzhCsFkZ9s1A4dOfyZFef65DYSMp+f33z2YzFoCiqbgxqsf3R79cPv+DztOqdkA7aAzxpNAQtxIMDM4BHadYVwv5PVrLMRSdpuntENijiL5KcbRlrB4EOikt0gcePkPrDWIudv7d6oRXNnZE4Mu9z0KqwADW06bjECQceMFS/W/sm2gwTYAk3c47YC1FqUoQCGuRPW8kELBcjL3keIr5XNmGM4IxkZuekeMMbLekG57rVYpS6TG0fkDOBc9YmLIkrypZ5qeCNKLci/ZFQ7PPI7ZZHigQMGjS5dx+YDTeHiZT3sxcg24OWbuv7/WJ8H0S1UKbtqhHA7hL6nJCrOGtXBvzgnx89PEH # This value was modified by the sealed-secrets pipeline
grafanaToken: AgBKQOten7J289kNO6ib+R4ovukSKGs3nxzknufLhfYx4i5/5LYYz0gBFnLW7jreegFXmgUVJcIlisbHl3VZHOsvo5UgaZE4OfuG0LWfq0MtLrzcK+S6gsTIGQPBe4umbXYg6uA0r+ulpSPMDnGi4mqG4hbaDG3UURcCxYMFrjKlOn65isgsqX38+2MyoANC8g86cXdB79f85nLk7NH8d107kqwxcsxVgpAtCL5rnCW8hla2Zf5mJToHg4jUGymnDwpNxRFg2htdESA7OFCnPbU/7nUAXFkMJvYfrQ26Gh+DlKlYjnY+JZ1B4oTxRRnVjOoBGSA3V1ewcdioJPlGAboVspd1t7BNuM2bqP0/1N/RlcTNQQ0nBl2TbN7Fwozi1fUuMTg4BJ1jjUqQ2WK8UPF4620CIKjIZapd0rh7/kFgh/WLHfxlmm1VqX2jh4Guzcl5HOebayNj0o7SMJCfMljBOFiGR+LFmYaHpkRjDhTXm5jpZ7EaPI+MSUwWaeShs3farCo19dpb36iAFeFMlzS1cj6YpACVEs2jc/Ii7T+stvEi75O4vkCoT/FQJnmaDGu2i2DrZa8qrfSpC6yktdqSGFNDr+56dzuZpBnlWAjumPQ6IjzlDoznnpzqHhVoyUeZjZ1hxo1PIYpJFqJ8LguHj1HHvUZUrmnojp07DJlOApSKCQzntqFbK+/tSi5iZFkDWFABGaYpvTNZUiUW06YCL8r8kXpW6a0ouUyjH/SdNzGrWBWOvgBbFL8E3K67 # This value was modified by the sealed-secrets pipeline

ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
    alb.ingress.kubernetes.io/healthcheck-port: traffic-port
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '15'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    alb.ingress.kubernetes.io/success-codes: '200'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '2'


postgresql:
  enabled: true
  auth:
    password: "backstage" # I hard-coded a password because for some reason, when updating the backstage with a new image tag, the new backstage pod can't connect to the database:
                          # Backstage pod log: Backend failed to start up Error: Failed to connect to the database to make sure that 'backstage_plugin_catalog' exists, error: password authentication failed for user "bn_backstage"    
                          # Postgres pod log: FATAL:  password authentication failed for user "bn_backstage"

serviceAccount:
  create: true
