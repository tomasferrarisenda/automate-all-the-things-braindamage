backstage:
  command: ["node", "packages/backend", "--config", "app-config.production.yaml"]

  image:
    registry: "" # This is necessary to override the default value "ghcr.io"
    repository: tferrari92/backstage
    tag: "4" # This value was modified by the backstage build and push pipeline

  extraEnvVars:
    - name: GITHUB_TOKEN
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: GITHUB_TOKEN
    - name: AUTH_GITHUB_CLIENT_ID
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_ID
    - name: AUTH_GITHUB_CLIENT_SECRET
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_SECRET  

  appConfig:
    catalog:
      rules:
        - allow:
            - Component
            - API
            - Resource
            - System
            - Domain
            - Location
            - User
            - Group
            - Template

      refreshIntervalSeconds: 5 # In seconds. Default is 100

      providers:
        github:
          # Catalogs
          catalogsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Resources
          resourcesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # APIs
          apisProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*api-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Templates
          templatesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/templates/**/*template.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Systems
          systemsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/systems/**/*.yaml' # this will search all folders for files that end in .yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Groups
          groupsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/groups/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-transcendence' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Users
          usersProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/users/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-transcendence' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

github_token: AgCPmDI9QLCfKEYHEVael7+fZ9FmV8SVeijNLjS2qJbefOZJ5VKJEgbO1aJBTuXZBHzFtUjPKlQW3vOk0vNYav+CgtiXJxuhY+FaSm5hpaWYUcW5PBh8tqYJKaLwFvuzqvuOYb1GN+li9CM5Qc5mEWqu0Nh5ezRrFl1LZFGwbTlCb9dY/F+eqVWphd4tfmJJaNNbJHN/MwnOJ8q63cF0oevJx2l4oRzIqXwVaWhQz6wGS43nYf31ReWUR0z0b0RgTCYr25uuJFP0tcMMWkMuPce6A4JG7mImFs0GPRqD1wpZc2VhvCB56BXPQYSn2B2yi/uUhY4K3QPHRGMuHEFHdNNvfqqp5TLWmWwmcQhcyhRAkmvehkYh3UHzPtLqqd6jEOBnbsUtJxWKt+Hkze8veeeFIjGuSHF2NC6/d+IV0K0uI4Bjc1uFuFeI4j5rgQCc7I13b0dMkkfdB8aXeNC0kfB+uTdLKFpiTxjRDkBHOwuNrVgzp3hZDnzrQ0VDLrLiTtn4a2N8eCi3to5Q/dj9wqBeJhm0ZRQODmyQRH0LdiNrd8JDfZFhJo8X3jO371BITOG51MYpou0WyHCcZI9YLcJyBNGCttREyXCnN4tdyTzMpRsIl9WDxFXfarxFaVGaGyv2OtWTV7TVY9EsWPTVr4+upXBfd9IoHC23YMrDHXo1IBxyVR8XqdIg59kYZlnWRYd4QdKbw8qEiB8gp5U7IPl5o5tJF2g+G8tDtvjATObGZgFI1Z0Ysn7H # This value was modified by the sealed-secrets pipeline
github_auth_client_id: AgCZyvPT7In+QxKrcqFJWOx+Se6GbH1+5iN+ZyKFWWR1bvTucKco3c4H+HOXZyuQbxBnhGN5GyK4HrGmyUDJ719/reKDIkXy/ZmWiE8iost1MksyVwZDhsEfEb7zO1EZf69ZubZCa8JmrJ8UDoS6+gcA1HlAsFyCgT6O2OsOQWymTtSBf/uSDSlOPYUaT5NJWx3NK0V2B8Cft6kVb0uNWfd2X9pXQuFKPw5YxCWFjIDHdsRJhCpyVs1s+/aHaovcC41yc3i4vN5TpR3AYEyX3gXNG80cxxm/tD0RXzUjAhwZHZqKb1OwJWxmZPGT22uiKKswdXQGOXIUVgkgED8zlTbbogtrydzw3oj7WBvA5j8TUeNiCx7IBUC4SIxzUGX2ZqZWNoF7szIRhwQQ0BiD2hqqZcyZqVd97+pq/2OgQ3wYcMU3SGLEIjH3UoMDqYiWGE70HQ9fcnubGhvp5g//X5dHrob3SBKNDLQskrwGSIby/yaV4qwzGu9zcJzPTueb810bOiQ9J88dTS3lBbERo1j2G2lwv6SD1z91ScWOIdwOEPBgQmOoEr4fl3wFVxBoDXKCh07kcT+OwgRuvAGyxM+0HT9sq8yKcqjuPRYXF3tXeFIrr0xd/UqRtsrsb0xxM+dQDtDIMCYGYXpe5JFDDAIxjy5xPjdemcWpLRNoySqJCTB25K3WMlpvjrOHJdwYRQb+pYpD86T3+d/haBV/WP0n4suPFw== # This value was modified by the sealed-secrets pipeline
github_auth_client_secret: AgB/EdteR5v16v8NuvJQZLluI4RJ7Se34aVXhDeDxd8ShZs8vXm1isuKPDKgbf1EoemtrQ1K4w/Aj0Ik6EDlZaC7rdFMkCiFbFjOjwDwUhovlIwBf+Vya0pM6VNyxCPDRdnWfcSnd3rLF8jQuAu+/8Dzza2wxFq5tDi0PPL5T5F5SsNguT+5TTDYWCjjFDYYTlziWkEX4BldA0MV5LHvgzZrAV55bqfuYM9xY+sszTqdkw4YnFDZ16kv2zBPSJNhcGSaywm0BYlRzyI8jLenzKF1Gqmmp7sNx1cChWIR8oXxGz9R60WmC59pYYHgXgvuzkr/TovJmzbNTY6fAUZ9mhTbDbrjdNeMBHMHugbubyiqkUYW1OHQB529WL3h0kQxZONAOd9m7cxNDCinHKHXmqLtgEutBFuxgdOmiWxdVizUgZZqudfKqBq4q6kQ3pcDjdSCYdzyIt7eiqnCWGMA/0t8VzSmRYfwLysGMEL4JZPU2eG/rFnb1+8K2X1Nyi0WHCbpP/74Rm6Kw/QEFttzGyGNb1lXRPsI5EbDARgTbZvR9iGqJHX6rx22ZjtkG7Il0aRkpWM4ad9K3aXbFYI1D4nZB9sjwK+IkeuSGKgBsI273t90jN5rc/biSZ6taInLzh+AH3LTGWT/gtKIt/5BfpJADHrcKPLxOISqv8Ae0t6ZB+uVGamjw1LTt8JtM8F/HlyPjSaN+gqfi7TwP5RxXQjydUE0WWGr57nd9lPNYuo1znmvAWj6pHWu # This value was modified by the sealed-secrets pipeline

ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
    alb.ingress.kubernetes.io/healthcheck-port: traffic-port
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '15'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    alb.ingress.kubernetes.io/success-codes: '200'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '2'


postgresql:
  enabled: true
  auth:
    password: "backstage" # I hard-coded a password because for some reason, when updating the backstage with a new image tag, the new backstage pod can't connect to the database:
                          # Backstage pod log: Backend failed to start up Error: Failed to connect to the database to make sure that 'backstage_plugin_catalog' exists, error: password authentication failed for user "bn_backstage"    
                          # Postgres pod log: FATAL:  password authentication failed for user "bn_backstage"

serviceAccount:
  create: true
