backstage:
  command: ["node", "packages/backend", "--config", "app-config.production.yaml"]

  image:
    registry: "" # This is necessary to override the default value "ghcr.io"
    repository: tferrari92/backstage
    tag: "22" # This value was modified by the backstage build and push pipeline

  extraEnvVars:
    - name: GITHUB_TOKEN
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: GITHUB_TOKEN
    - name: AUTH_GITHUB_CLIENT_ID
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_ID
    - name: AUTH_GITHUB_CLIENT_SECRET
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_SECRET  
    - name: ARGOCD_AUTH_TOKEN
      valueFrom:
        secretKeyRef:
          name: argocd-auth-token
          key: ARGOCD_AUTH_TOKEN
    - name: GRAFANA_TOKEN
      valueFrom:
        secretKeyRef:
          name: grafana-token
          key: GRAFANA_TOKEN

  appConfig:
    catalog:
      rules:
        - allow:
            - Component
            - API
            - Resource
            - System
            - Domain
            - Location
            - User
            - Group
            - Template

      refreshIntervalSeconds: 5 # In seconds. Default is 100

      providers:
        github:

          # Use this if new services are created in their own repositories
          # catalogsProvider:
          #   organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
          #   catalogPath: '/catalog-info.yaml' # string
          #   filters:
          #     branch: 'main' # string
          #     repository: '.*' # Regex
          #   schedule: # same options as in TaskScheduleDefinition
          #     frequency: { minutes: 30 }
          #     timeout: { minutes: 3 }
          # Catalogs
          catalogsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Resources
          resourcesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/helm-charts/infra/crossplane-managed-resources/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            # catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # APIs
          apisProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*api-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Templates
          templatesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/templates/**/*template.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Systems
          systemsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/systems/**/*.yaml' # this will search all folders for files that end in .yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Groups
          groupsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/groups/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-transcendence' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Users
          usersProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/users/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-transcendence' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }


githubToken: AgBPwfMQPER3Z7PTKCCTE80I1j6gSW2dUN3oEFeIh83ZO8SW4PzynWu7GjbSKXjSUnuRKQgehZYj6GRjOvgLbVaOpIWn1WZs5FMOIkCpdbDg1JJn4PBk7Hyaj3AW6M98um6dTjG7Vr25PuCx53FlH/ocDkoF0PTLeAOMpRo4bQB79L+pPjtNd7O9JpWVyLPDvwz0Cmp1MRF6b+yJ57QqsIv3d2BkXsGfux6ZZ4f8pTda6ykFM2Iw/FgCRUsPenudYSGpOSzgPc2wd/cLFiFDGGrC2mUaFD2uGVICWVc8AOc7BbpydGXmA3Bw+vQNdQHEzd1SgOZ1jbrZATtWf1t8J8fqAsVN1y5AsbiENDYWnaFVzr6ggRv8PYMuAKNi/WLF1Gnb+lXt5T06i0P4xAFD4A2JXj2X5nHAnXky/vo9gLzznZrAQDFYQ7xuYYVC4yiyKaLXaQc5mqoYNVlBEPEuhyt3XIElPtzG7OjgP+P5Oye2IqUmhJhB/LYuIZojQEORI0OLC9OkD1eAhhghIC1JzjXB/4tYyt2OOLV4M1N6/MPQiPW4R2jG1BPmug4jSswpicRA1OprbQFqa8zixpwYLAMWVA0Rtnh7AbJ+o4Hs8r+aU9lvb0f5Ag3ip5DXvDuwvHs/WalwFlYM4VVC5z192shM0Bgh9avOh5Vcx9E4Gp0R1U0PBLFyxonwd0AvNRrZIN3vjSww0Rn9HnCVlkJSSiD3+/05ICNU+TaQ5pNWf123L/4+VGf0lgAb # This value was modified by the sealed-secrets pipeline
githubAuthClientId: AgCKmTC2cIS4nVq0i4BpE3TUamwgpZxMKvPyJCr3MwFZzjZEgLRlEmU53yHGcxZBk+REsTuAocoBHZwqvjQUozW8ga9Hh6yyFZP94vJQCb0N5lpVXulYwDG8aUcBqA1YQ+TRVxeMFdMEWoBH9XV2DmnvbSq9YBQhvFQWhrugvEa/P4vqapRZZc7bCUWzIOA0/bd8LnzT1K+A60tJM5w2AsVWPfvH1E5IGtsYqsNVzUo4vcjhhGIk5BUvcNtGlRqISv3Q5/qDdINY6GYOS3t5FmlDZghZP2y6T1mbqrp2C0iacZSX9PoyGViQAmdgEde7NcWEzCAOOe6JQ4lfiyZEfwo0doSEHcYWdvKpRGCLE9gkp9/egIl+jaSLFb1gjjNbSgNCBs6rDlHOl4gbu3wa0Xcki9vavlCPu2UEgV5WsprHKz8fjiKjz6y6fLnnPfL0gMNwhH+iCFHrpXdITjUuu0FAFrUUH+b6DOKUZPsdYKEbH8DveRd1lVdjBVbFXmdpKtq/Z+qe+Vg1CjCcwwIzV3WF6BP+fzd9mhW9pHP7vPNYweKGXScU7pY2s5JM3ghzGMJpmx3hueTx1uPw9uj1uWU1q/CH7MYLIprLh2zbeAzqfUH3IGnuwYJUM3c7rkaKZGiDCbo6O7qpBZMs1R3Yk3RTAmMVDQrN1NzAjyddeh09pJgm6LthxTOoFR9Evw2y7HJsc3GwwdScQpYzrA5JIV2xcm74nw== # This value was modified by the sealed-secrets pipeline
githubAuthClientSecret: AgA0uaQeppmtP2bB/1YvB4rKtt/aDOVUlBauYL4v8FzZPcF/WJ4xBpPIulpDd3KC6PcojNhfTRbTiY1+rvyYpcLlDvt5zxGPwx4+OOBIlKJ3PA7Q/lwH8oJjAFbghqQcEP+/dSq6Gn4Y8+2MAV9Z4pnY88aRS1AcIPiogMNQfuDD6n0OsMW0E5H+ldTWyFQtLI4yEETOEFtZPCn2VncJqp6RRAX1kuwT6NVAkFWzGBpNe+zJq21Z4RPbuISj7KzIrfmyBKfVC0OX2BPUFAIY5IuWLp20hIcP9XgwiR1hxCxL4CiWMUjt0uQxNqnW+iUtf28cl1zojWAB7nMK0UqesRQO8XrpiRnaoe/Pq4AOatfqNhSkwWEOc2LxS+n68eJbcFzUqZ53jbOLGj62sIc4IgAx2awVTC0kk03CJyM09zC9gNtpUFiAY6Iv77179RjuHo157WtBANJ5orZaga7erCK+pzAWA8dsnUOheBSKUdMNo+LgysiIUiSMdhY6HDL931I+zRbv2P9kXfiZ79hcmb6pNf72Fd1S04N/u5M2ss0IQgucNf/0XRwPsh4aKuprzyrUUyDLx+tTaq6+Yfg1af2md73Ygxzc743GtmMNTXX4OqSPZ3d0hGFKlDKIvPgrcP5wYbrY0eVOptq9qpTxfiD6qGXWBtQJJncZ02pXVQ/2rSFAW54tH5TL5l2bmG+gYJRMeO/iOMByyXtdhfQ4CutUAy9Q2RIyREQy/d1dJeHjw5P2TyTclANE # This value was modified by the sealed-secrets pipeline

argocdAuthToken: AgB8E5Zlnr0SLZ27xCZa7BleSxnf5T6wau02smIAc9gpbqCetfyrp92LdZtH540mRLd7MLI4nPDc+b544siZu24fEZwCx+sgcCmWIvS8ac5J8Pbvceg90agt0bO6S3bAfTQ51gIyfqjnCZUdC3Zkn3NR9zxzo1Fb1BjhkS6cPgCKko4hzJRyF/N0pYuxpJBNbVwY2IgsnW0PJAcCxFO0bciKK3n9RZnyPqERE82hGor857YXljq2yutwhDY8z6ItJ1P3HP90GN4vbzZJoHlf4oWXOakl1Qc1aD9NIbF1GzxLYozX4B2r1yusnJiNM8wyTWFV9hi6rIn7ucAVxec8yq/hebKnfyb8TZ8n9H1SHENGivJ4B37edRyiN6gVtWWJ5C2AI/+aS4S1htxLCz79nTcm/Fe+/we9nGTunug3QrpGdJllMc5Ydymg/vxAn01+TGZMFREJFj7tVZh7PUdnli/rx3mrjXYd8nzvzWd2p1lE1endHqX1TshJuDxrAtBfibg5/5ILwwQ268CrwwS0N/4gZ3P2WEjlJ8od+Y82+hYTPvqjdXW7cZuJqRr/GkCR61JB34gb2U6dKS5o7kx1dYsUOWK8yj3zVUYJaZW6A2hIgvNaWvaYe5uBA5zkY0WXRBtgEjiIvxVRLXqiLm+KTbK/1WJ0METj6ZAAcaCgYTpyJJ5iymUyO0DrkZJN8squtrSB6yf5uxag0/2ovmZRdMwSvsp2vx88HmaWNA5RGMrqif2o+3+hY/P8moRTvU4JBl7sDBDJhtFP9Lpjgzl2FkG6CtbWT/EOOVeDGd6bHYX/q90YZwP64cDMgizjBVdCwQ/yZux7cP6a8WeJnfA4CQNJB5qHycNGkMjRuPeSIThC3AxE+ZMqY+zZb2qYYf44f5Y0pREOq3ZfGi3WsdCfULX18A2OBzq28L6ApUOtaia9Ci46ZmlMeqRDikd7IDRPHVqVXt6w9rDTRRjPJC6kYX1mVKx2v5JXHvAhl6XCk7MUXdE6//5H3O97SQdRbUIlgpRLIXD7YhVT5iUia3WQ # This value was modified by the sealed-secrets pipeline
grafanaToken: AgBfjxAQgk6Tbt0xi1yiOHsyeB1BSTfuEVPGU8HdD+k3F7LKTXv/eEunbYMeA9Zrs7NuCxwkiwG1Rjtlpx14bQ/09NRhhh2zD/h9ZVF/fdw+pg9bgABHDPwBjGRHERroXdhXfaC6pC9I9wZPWa5RMLMbbI5DzLZL3plB0EbBaoN/mpP1ultgi3JW3BKbNJN6R6gxmoWrastHtaCZWV8RsfEEL5s3XWuTZnpC2rfYqFm2rE1FkYvWBuMH6FPn2gK9YmHDvjtSPmLkqNNnIOus9hS6ADHvAPD58h4rtGH9dLOyoKIptXPGcEM85/vYr3bm0hB2anU90NH6qOKRgT9ETbaT+sIzAtNDaKvUAnf+CpL1IOnwSeKCXlf1fbVMtoDkhUlDwranA6a/xJWgNWSdkI3Ri6N1uUklPfclIkc8eEBx+FIqFeL9LZAahQj/4xx9M/OIHasoOIoWOaW/cE4pm3gACZ8fdbDVYTsRkG2O0o2lAKxYYDM4kACIC14AykGrnEv/O30HQOVLk+hyQ26xFmMA3KMKwcx/nZiqNQwz5qrtfl+i4H5KGm49QAdynjZ0xJvcVI9JUlfa6XF3duNjY8qYv9ofmCd5rZaRYvT0UotRCFe4BFJ2wLF74yp6Q83X9v9kKK181Y0OijEyG42vRIwDZNnUx8Mkd0zmx0EpqUjh/K1Ld8CTaGLsc1tKPJKUT78VW0Y5QCtJnwHASZXmKND7DIZAyhC1NQESIVEkGe+UE3Bssvobmb6hJa6f8/pg # This value was modified by the sealed-secrets pipeline

ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
    alb.ingress.kubernetes.io/healthcheck-port: traffic-port
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '15'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    alb.ingress.kubernetes.io/success-codes: '200'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '2'


postgresql:
  enabled: true
  auth:
    password: "backstage" # I hard-coded a password because for some reason, when updating the backstage with a new image tag, the new backstage pod can't connect to the database:
                          # Backstage pod log: Backend failed to start up Error: Failed to connect to the database to make sure that 'backstage_plugin_catalog' exists, error: password authentication failed for user "bn_backstage"    
                          # Postgres pod log: FATAL:  password authentication failed for user "bn_backstage"

serviceAccount:
  create: true
