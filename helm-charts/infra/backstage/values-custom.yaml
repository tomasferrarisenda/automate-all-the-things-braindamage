backstage:
  command: ["node", "packages/backend", "--config", "app-config.production.yaml"]

  image:
    registry: "" # This is necessary to override the default value "ghcr.io"
    repository: tferrari92/backstage
    tag: "4" # This value was modified by the backstage build and push pipeline

  extraEnvVars:
    - name: GITHUB_TOKEN
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: GITHUB_TOKEN
    - name: AUTH_GITHUB_CLIENT_ID
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_ID
    - name: AUTH_GITHUB_CLIENT_SECRET
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_SECRET  

  appConfig:
    catalog:
      rules:
        - allow:
            - Component
            - API
            - Resource
            - System
            - Domain
            - Location
            - User
            - Group
            - Template

      refreshIntervalSeconds: 5 # In seconds. Default is 100

      providers:
        github:
          # Catalogs
          catalogsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Resources
          resourcesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # APIs
          apisProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*api-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Templates
          templatesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/templates/**/*template.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Systems
          systemsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/systems/**/*.yaml' # this will search all folders for files that end in .yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Groups
          groupsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/groups/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-transcendence' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Users
          usersProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/users/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-transcendence' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

github_token: AgCI/4s7WxgGcaV8QfrDJkcMqoxcao6zrX2G+0fE0E0TPYYlfJSk+Jftxc1z+Y/Io+6N49OtGvB8RBhu/9ed/htRltaptR+d3K5VHGKIhDFVuy2e6/tDTKHsTcS/k8sPOJkj8/4XsA4UbcOHkrsIu2QYqFLrtMbP3z/fxVQ7pH7m62EzLt93mDwwyZ5ZmPweMWXNnwQl3VQQV6I2Ce+OXq/EUAmCT2S4A/Ifr11nUJ+VpIoesIKiZAJ16bd/OlYolbpwUl0aATFlTzB7Xd7qx+lfn4VqF505woHFw2Obp0G49flCTT7wz7y4RLA3c+xfFyj5XzxsJ84uM4qZ3mZzaKRIGArdduGTZyh5IAIwXLE9yiN5fimOmoOk1JWE/FGt42QsdBn3ladFGWlDB/H2yr823c1FwukSNV+i6Xd3ZfXCIG8Yk1PUvfymgMrJzpJdkNUJMchyYA1xRf8S4asFxrvoYSLaLKREdpcSSw8bql89WsQWGd232SW+aegAoEJ6u1URz7CVbMBOB5gCgZ4jcMmby3hTs1NnE8rh3n46JRzcENUmdozAY3rm7Zf2L6LYJBonGX//2vUjJ8QB8dvCg2ww+cmO/HenOhfXMtlHF+swWinCGMLfqIVgerwbauwDToaiIIsFS+RIfquQr4/c2snCM0Hj2hGBABiap4MMQUg4PlskEjHA25k5Jzi7IF1LWtOBHohgRsGLLWNq6QLcEe0RwXrAUTpkpXyQvyUOVSy+Oxi/sDogkqC+ # This value was modified by the sealed-secrets pipeline
github_auth_client_id: AgDP/LQSTdfNF6c7duzYlVmTOtIg6QjiJuijVVwnIwjtJ/mJM0OwRQfXkCbWzFuSCIa7pSftgwMBOkMinoGW5ySDkMtDbj4QpI6tggsgu/aNm61AZyhsQQd+MxDdoX2Obw2HFpAgPm+MnsI2jk28KMhyTdwKGJvCQQnq/LWlg1n25bVxSrgi+uJE2nAjMzA5Bu0RbGdIq8WWZLXap0Cg4R6NqgiTs48IhcFqUGrvnfmPRGi8tcaUxnYbrLJrAwApmQypPKals6bAkOgeplmahk+RMxjLIBZpI+V0LDmr/NVE5sdx9W8VnBiBC3Oy4YIbhijKgnI/GgJVuuKA1rSk7XnWRYjMFrvCpMM/s/Jz3A6MbD6znAnWi0lpVBhXebqaM7ArEcDMaFtNjCjIZPil2/VFMnSCQd9zS+iVO0yy8RxMTrFu0m7cCiE/MGb/k0P6kaz9tXkvqQHJ0f/AVvPGEj+5CAHs4dxhHKW5wpEntAxlFgH3UalTEbuBiWWVaiD+zi6nNNTUmq3bzlaSxxUWACZUrBz/phyPW8p8X4j/2XnNDMfEUPd2PjeZp3FHwQoFD1dBKrZX5pA07g7p0xRr99Y16PVZUtP0FZovHGL7JPlh96aDTvJoXvu2Av54tqj2vtleaNO3VFvWNsD2j5/pdaW+dGsgWyeAV1KCoW1Lo9XdAuoLoEtV2CZTwXk9kD+5hFdmJHZzBu3iNFrfPeFgWNOKo9MCEQ== # This value was modified by the sealed-secrets pipeline
github_auth_client_secret: AgDa1JqEvZFXsbpybbUHV5oEeJNgHy9FNHwoiJHDEJ1YHi1yfa8KgdK4AQwcIDmAck2MeFAj4wtAx9Qgq2e/YxI8nqSaNv0fGVRdFefKo9o4/+WpcbFVjln3w7/XX7kVuuOH7gfJL1ym/3l58ADwIPMERu1qYsFHZSTY+IllsHrgEs/YUSYxRz5uKvDyPwEL/ryDMvh86TBEv5KzFrxikrzf8FWTPuhfM96y0p3xhCy+mthjoyL1leyO+SLeg7/08mbI9/+FHkdG2CIL3ZBGrSklg0NMHCvG2WyddFrMdafcGWadIK79EIuedLxoq3j69AZiSaoLGI3nJjc59y0aOYP2TG/4iIuo3lyn07schNU/lm4h7/11KHTM4xo9lAXP1jCcS+XYPY0BKXOnoh0Pqov7qtuuUaLKIMFyKW/PJ0hXMwghdfBfgC6xi3d7zjhFZwPRWlpQywLMER7Mt+VjNjO+QTUz1n8KgrHa/hDQQviPLzHnqbMEwBGt9uRIw+E2gadMgP9X9vZo0g5Ragx7A/LO6f1K68GeMV3/h57aFdnnQvH49Z0AH6f7n4i37JhJuNiVLjSrd6Bh3Lo9abSlVBnYqHxL1wbyuuzbMOfqjVKg2rPnI/ol1PzjqJpO1TMdonvwwSc3Gs633KDFlGyJ5q3/fcIGkQ92TjM2LUo/EmHjFj0k6V1Wdgj1a9QR1PQLgUgC8l9F1W7pd+bMbFfohZHfXp/7BOqeWIhGOoOBqvPiQOWkHAPb5/qF # This value was modified by the sealed-secrets pipeline

ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
    alb.ingress.kubernetes.io/healthcheck-port: traffic-port
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '15'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    alb.ingress.kubernetes.io/success-codes: '200'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '2'


postgresql:
  enabled: true
  auth:
    password: "backstage" # I hard-coded a password because for some reason, when updating the backstage with a new image tag, the new backstage pod can't connect to the database:
                          # Backstage pod log: Backend failed to start up Error: Failed to connect to the database to make sure that 'backstage_plugin_catalog' exists, error: password authentication failed for user "bn_backstage"    
                          # Postgres pod log: FATAL:  password authentication failed for user "bn_backstage"

serviceAccount:
  create: true
