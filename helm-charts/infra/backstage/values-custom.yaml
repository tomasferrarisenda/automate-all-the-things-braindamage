backstage:
  command: ["node", "packages/backend", "--config", "app-config.production.yaml"]

  image:
    registry: "" # This is necessary to override the default value "ghcr.io"
    repository: tferrari92/backstage
    tag: "4" # This value was modified by the backstage build and push pipeline

  extraEnvVars:
    - name: GITHUB_TOKEN
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: GITHUB_TOKEN
    - name: AUTH_GITHUB_CLIENT_ID
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_ID
    - name: AUTH_GITHUB_CLIENT_SECRET
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_SECRET  

  appConfig:
    catalog:
      rules:
        - allow:
            - Component
            - API
            - Resource
            - System
            - Domain
            - Location
            - User
            - Group
            - Template

      refreshIntervalSeconds: 5 # In seconds. Default is 100

      providers:
        github:
          # Catalogs
          catalogsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Resources
          resourcesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # APIs
          apisProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*api-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Templates
          templatesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/templates/**/*template.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Systems
          systemsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/systems/**/*.yaml' # this will search all folders for files that end in .yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Groups
          groupsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/groups/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-transcendence' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Users
          usersProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/users/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-transcendence' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

github_token: AgCn5LT4AdfqyR1zyefAoqT92m5EDrRnZ/CDhaRPze0dXrIQLEwWLKNFHLPzBw7oMW1bs3Z88BVNjMo/cjWr0xxeLKRgPap/s96FrIt9v5Wrk99YNBU0dUiQb9KvZvb9gEADo+2QRtJGJUDZOxbYrUJ5EHu+x3bkostkbtkObkSouXsotuGj7pq/ZdeDKr+QNwFVWVdsWAg3uaG5ORgxiMz0Frxv+TsgZ67kTJnhyw02ZFLRfhzZFSDMRmmADClnnv1xvxit3EICkpUEjYiLIrY+PrKEXx6Ye4DTmwZ/Gkfz7gTNa6+Ivozvymnt7NNlPEvM2mZ/P3GDCijimBSWE4DmQbZDtOXjK31sMDyfEa0sZo0oONcWrDFOnvrMIFC3Z+CnC6AyZC3//bSRtSNQqlMdo4kYjAvPHspLT8ZSSjVRbRE90c5out4Bemghqlek9VM4inyJQ5aqDRHbODYbyccYQb981Yp6BmM8y4y/8tP+Uce2izSRyj/g0sSi9NqvRe2iYXdrFaZx0B58xEduD+ay/GWG2WM6gtBKLAAAN32FB05Y8ezHh24wPD9K1nklpjewewFo9xwKy46XQ64kPkYBM5ZoF8w8HVbSfCnycEHWdbKqAT6blURLKkvKBlgBuIqJw8aGaZYWGaOepaGWdxm0yZDPtTKQr+0LCOp8+gjdlTjnHDuKazrE4TuVeilGbvawpuFEPRLd0FYZAIdEOz1cPNw6ljOeEyx1TlW1KSf2+HfH9mZB8RBU # This value was modified by the sealed-secrets pipeline
github_auth_client_id: AgA2Nbizqtj1aKVz6XbM/HuwDtIBThblJbBSAYjrlOCYGT2VrmHMAnvEdMv/f5473XpRMIeFPC7qONfH3wNgQTJ4EW0J3HC7sZWHdfh5bm704BO9mq2Pv4VTW9DjYNiygocKWdAWCRI8a+FiyNtURkJNqo+7HVntlL4o3iMkvgnD5HuSlSSUm7edzgiMo7mH1DYET3EzBbRl4IU/5nyVw06HjcEpqjcVZmzbC+NKnyXn2J+bmBtVQS18ouY296swQVbOA6w7c+K12laiDZpPRz0o2hs2uCk0tjShE19QxGpZOyRq8kkMA5IZsG+0VXL0R8y/KQnemJXlunWQLMRl06VKp/yJtVkFwyMtDasXPXDDyRTh6Qf4UNzNg9ef/QB0/ddKuRl517ECNKVVlC60VYqeWjny0QxJFEGaOGweGwiSZUbAcnE+d52AMdgFpYckxOJau3z4W7ZKXdY8sLBrpJ+CM1WYj9J4SjwsiFg0U89cDF2JH1xC97NgHBJ2NJbJzwWqz4T/UykBKzKtvKP4wkMJghlfNxtAU6N1rnwx/97iPxyLRRuFwTxGnzWO8iSfI5UWtQ5/Jzs+mF56wPNJppP9RaGmB4uo8gVQjPWKmgZ81wDcVZyPtrqFLfrupcpg/Eu08In+dpUyWxiTMtaWYWBXppOsXsw+q4BXcSBHpLq0eMoQR8cBlzEZ7MDqyVRTq4LtJwBmhz6ZjyWolQLhfvlsWUFY8g== # This value was modified by the sealed-secrets pipeline
github_auth_client_secret: AgB9q+eeX/eRwh38cIEZHX85QjFVzod8gvUNg7B9BTjGgRGbpO9flXdB3nujllxsZpzT2219LIAbrbPYF8bOxNya29B5V2j9FTR2dBWsZ3IpZjqrE9ukavDfaZgClXu92FIslbQFFoOBzERcgaqRT49G3YOOTM2n26EtaHWUwgAtbDQ1L8nTuiwiYeRNWGu3VMzvhaDeWJ3Tt7nNy2nq/+ik5VAsQtV3kBDbdWXdqjHQPGVWqjPc21aWsEn2mJDsA170Bax+leTH14ciCN6a5ogN3wwLm4UMgW09XsGMKDnxQ+WgrY9OAG3uLw/sn/PedsQYlxdZ5J6kr5cwv/k3bp6s+pptAGCtYD+CC5Jp+r3X/YB1o09y7NJn7TsE/1xewwQh9y4LN35L6c4z31gjjTTyDmgRvSs9fcsa54TaLrPYoynFt/1yIEbPAqnokFFsnVYKX0q7yDHKgZLVvtAApRjZBbHZb142pwZE1B2SqFIsPT58Hc4bOkE9FWOIpbmD15uEKL3j+yl6dlMdO7egydtOfAwfkDuSjWhnEWeYoI5CthYU7Kj+vheIe99C1snb9qBHnrmpFSeoGHwUOvjgNkPqY6Mau44u+A6MFak/otj3Pin/commVOo1G8JL2I4BFWMQcNi877aEVNZMw0CIatw4SYYcIko8ufsn/Ed9RJtfWBrDgTEF4PziXrGgqfAunhyqw+HsoY2MWPDkYz7mrBnhPXjMlNroBxOWFaqsJoGFGKv1r7IQoB5V # This value was modified by the sealed-secrets pipeline

ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
    alb.ingress.kubernetes.io/healthcheck-port: traffic-port
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '15'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    alb.ingress.kubernetes.io/success-codes: '200'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '2'


postgresql:
  enabled: true
  auth:
    password: "backstage" # I hard-coded a password because for some reason, when updating the backstage with a new image tag, the new backstage pod can't connect to the database:
                          # Backstage pod log: Backend failed to start up Error: Failed to connect to the database to make sure that 'backstage_plugin_catalog' exists, error: password authentication failed for user "bn_backstage"    
                          # Postgres pod log: FATAL:  password authentication failed for user "bn_backstage"

serviceAccount:
  create: true
