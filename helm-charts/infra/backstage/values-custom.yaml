backstage:
  command: ["node", "packages/backend", "--config", "app-config.production.yaml"]

  image:
    registry: "" # This is necessary to override the default value "ghcr.io"
    repository: tferrari92/backstage
    tag: "16" # This value was modified by the backstage build and push pipeline

  extraEnvVars:
    - name: GITHUB_TOKEN
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: GITHUB_TOKEN
    - name: AUTH_GITHUB_CLIENT_ID
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_ID
    - name: AUTH_GITHUB_CLIENT_SECRET
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_SECRET  
    - name: ARGOCD_AUTH_TOKEN
      valueFrom:
        secretKeyRef:
          name: argocd-auth-token
          key: ARGOCD_AUTH_TOKEN
    - name: GRAFANA_TOKEN
      valueFrom:
        secretKeyRef:
          name: grafana-token
          key: GRAFANA_TOKEN

  appConfig:
    catalog:
      rules:
        - allow:
            - Component
            - API
            - Resource
            - System
            - Domain
            - Location
            - User
            - Group
            - Template

      refreshIntervalSeconds: 5 # In seconds. Default is 100

      providers:
        github:
          # Catalogs
          catalogsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Resources
          resourcesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/crossplane-example-manifests/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            # catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # APIs
          apisProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*api-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Templates
          templatesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/templates/**/*template.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Systems
          systemsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/systems/**/*.yaml' # this will search all folders for files that end in .yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Groups
          groupsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/groups/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-transcendence' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Users
          usersProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/users/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-transcendence' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }


githubToken: AgC4eWZ+qAKm4ZG7vSnTJOUtMvl6AkbcSwPgppS4jYVTZ+lCc1Biwmxee1Hopi40kQe/A0H755y9dmYX01kk97/Kh5agaB0G1nByoyhAnq+Q0SHKQVu+OhB5RC8JpOjW+s07nsvkXQCU5oOW3nTrEeuVYWUX7UQpgpfFxN87uvieuk1llWKcBQI5UUUp9HI5njkaba3meNCOgZnr6wYczWEhFeLWjo9q2FJ21vBXXQlr0B0clEIBwsq6QA6QNjQF08CVrsUCFZbOJedMjZQkjrMAipMlO156bfrhOnJymwd2zIRhrmu5mA7+WodHSCdSWcn2yaEQu7yH9B2I3ZagvEA5/WqtSXmFBHp6GwqYjFIWOK0746QLw/SU8p6+vYLLovjDmSUU4fxGS1PherHk1au4ZPwmh/yGnbBh4DkLKnh2H7sHayZk+Wwxn9AuwaBdIpYAe0RbRIx69+P35LA7SDRwvmTNu5M45I5ayKr1jiZ0FlPAxkrDUjCv6PXKFZgp5ICRHMOzq7hDhlXm2qhGG3SuowJO3SoMmBHMP26RM2o3r9ULJVAowE45+80Np8Q78oLNQ5eSUiwJdqCrFnPwSjjeshdV7dqYQXq/7yqT9Q/ruWe7Hjkurv5eeE22UNwxXCQqbqh4+u+OEn4+vI6g2no2pJig9ilKZHBBbtCKBj7QT3eM1Wp3tCekWuzRuWJm0jfGApVtYWYnQOjTqZmcwaG5lVabrFsXKNzmNcVmpBB+ZZ/Qu1sULmNm # This value was modified by the sealed-secrets pipeline
githubAuthClientId: AgCHpBPzpgTd7InaFnuU7SOtAXB2xrm81uTugbmhybfEsj3J+RCP3qGamaBRr2hhA82MdGqV1KU6uLirvxQpEaOqU3rjWoxGInedsgVJUBkPtVRkCSsR1G5+6ySKkfigwBAm07nGM5WrSUrB2jXR8PqNS0zZ0V407Xu1qpY+DCavSD3rTQBjuz7GPJp1SezpOY4s4uDQc3K2Q6KUkJcfLJXS4WCnU3efykf57OQjPn5ULt8VI7X55wSxbrcuLFNdj5chA0xKEF8zkQRBRa6+RYP4PySWjrjh1H3PxQ81yqrXwi5DQXn1i4nMaXJb3I+H0IhaMAltnKO2ED1bZ87kP0poXPBqMg41Up2hrxKPdidqSDjyOzc/MH1Wi3fP/7GueZ151c8aSZboP0DEyKmDUOPL/H/KnpNVPQLtEjQ5WV7eVPOIfkTCeQ7fXeGU43jATdAy8vs4cXtTh/tyN9B4Hnwkn/v/+tcvlGLSRnb8QauEWi6p2YGUZgpxmBuXXtcIR25RkNTTbWxNTR6Nt4zagojPWiLm89cjlmJbnGeVJHq6NwZ4NprBXA3Qv9PAhzSWVNJxpQoAUycjPYqXk1ZLiei9K0N3XWwqHPMQoWzsnXz0jMwvNTEkdJo3zn/waAt9d60CFz3jxEIxUFrIn4/CFrWuThAMF252sigcEVIRJ0DAo6joibuBcuhXdtpGXrgGGTQ4wgovn7i42YpziIQmP3XGO6Cp2w== # This value was modified by the sealed-secrets pipeline
githubAuthClientSecret: AgCNGJaJccTM5CLd5+/34pCUrl7kTNnRkDAw7ATk1z+XjW7cw5CyCo4Chi2NmG5Y6DZYGKFdCoS301WPmILw0suIyYiP4c3vB15LqIpXRoiPod7rmCyLnbbIiA3V97T07BmGTxv1jpf6mi5mmuQTf6JmRyVUxhuTAax2/EUQQmUMnq1oSAfrFTj6akcMBgGhYNA1Chd4vZq9NzVslrvva3lmiNhFfzy2ofOj04LRq8NByMkZ05QnDunRuXWKnTupc5Kk9ol+rV0A+oeQbBuHAHKY7qfxME0D47Xcutcjth7TWlywFf8GgQLbWR7bh/fheS5yhW4ZWTq7K6+dqiM/tDuzaX6IwAhvb05Pdc5gUvxW6gqY2+nBh7c5KJtXfGRFL3eITuy8GS0BlEANwmbbxtOG86Fc97upHERfljaGCPzW3Jdk0h/WAc3qm3fN8uDbrHUXDxiXQuCssMG570ql4CJyBLftCe4WLjPRS7A3SbfXuEOSPpZc8cAb8Dq2y7FJjC25tPindlW0ODjoa8SNjmQBNvcomh62k+f21B5TBOiiwfE0wmjEqlSMXFqhjT2pAQ2C8+TAjrlmve/8tQQrO5fSA+dtDoHfg3BngWZH2lMEhtbRI6WeFDNCWEk5TtmwXryqnnQ296vGoyBWtMB26aDPyPIVjBie/2N+AP690DNyNCNSi9jF082ie3mAFt8grB0yGDnRbk9e7RihA8jtK7KEearfqDnv2VGmMBOcOeIaaeMKVDBfHp16 # This value was modified by the sealed-secrets pipeline

argocdAuthToken:
grafanaToken:

ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
    alb.ingress.kubernetes.io/healthcheck-port: traffic-port
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '15'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    alb.ingress.kubernetes.io/success-codes: '200'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '2'


postgresql:
  enabled: true
  auth:
    password: "backstage" # I hard-coded a password because for some reason, when updating the backstage with a new image tag, the new backstage pod can't connect to the database:
                          # Backstage pod log: Backend failed to start up Error: Failed to connect to the database to make sure that 'backstage_plugin_catalog' exists, error: password authentication failed for user "bn_backstage"    
                          # Postgres pod log: FATAL:  password authentication failed for user "bn_backstage"

serviceAccount:
  create: true
