backstage:
  command: ["node", "packages/backend", "--config", "app-config.production.yaml"]

  image:
    registry: "" # This is necessary to override the default value "ghcr.io"
    repository: tferrari92/backstage
    tag: "17" # This value was modified by the backstage build and push pipeline

  extraEnvVars:
    - name: GITHUB_TOKEN
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: GITHUB_TOKEN
    - name: AUTH_GITHUB_CLIENT_ID
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_ID
    - name: AUTH_GITHUB_CLIENT_SECRET
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_SECRET  
    - name: ARGOCD_AUTH_TOKEN
      valueFrom:
        secretKeyRef:
          name: argocd-auth-token
          key: ARGOCD_AUTH_TOKEN
    - name: GRAFANA_TOKEN
      valueFrom:
        secretKeyRef:
          name: grafana-token
          key: GRAFANA_TOKEN

  appConfig:
    catalog:
      rules:
        - allow:
            - Component
            - API
            - Resource
            - System
            - Domain
            - Location
            - User
            - Group
            - Template

      refreshIntervalSeconds: 5 # In seconds. Default is 100

      providers:
        github:
          # Catalogs
          catalogsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Resources
          resourcesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/crossplane-example-manifests/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            # catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # APIs
          apisProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*api-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Templates
          templatesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/templates/**/*template.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Systems
          systemsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/systems/**/*.yaml' # this will search all folders for files that end in .yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Groups
          groupsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/groups/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-transcendence' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Users
          usersProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/users/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-transcendence' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }


githubToken: AgAbGNIBtIYtNeytOzAUETKdT4R6STTLkaAf1SlBV8hjuqu/ixkpXhhPSwA9afeJ9LsFi/fzZDYSIMgl3XdTgoifC0606vNL2STNYgp2HNqx5JwdKr1KVh02lF3GtCTylGjIhwMsG3ROgG562obUEX3wHqvXEL1mZsICKABJ7UMN8rVSIufqQ+EAkMvQGRh1nFfV3kGK14uDa1K6MDY6QumN9ugADv65XyOplLQ/fUAvbnvEhadzI89QuqS5dTe29/3zZWZNy42Q7xRkKKhe3WtxxkE+MPQxFehKSQvM3rfkvuUX/ZW5sfOdVGuahJBVQ/+kocVzdiyAGf4kaCSbFRpFgvjZZBXpjodHNhPIOQWvm386myCXNRas8VViffaprQ/Gn90pFzpOsNWRiU8cUzbrpF+g5X8E6CfaSgJxXJGkGiLfeKHt4zIVYnqII73o0Ol45x17xHafXlcWSawKO4X2u97PWtf0oRbX6+8A41QrjX4ADl81yfwUMhGSXyDueCVSg6V4piAFTlMLuEK6N7l7xiU6hVnDwmutKUrhXvKIIpsXZ/rLn1lkEmfZUA2+bdgY9RxXNzlQevVXS2bxAyIaoXb3KA2XUt0gw3xYHv8i6l6bOqFUGgLfmgnLcyfCHnq77CIJhFtzpLthB9Z3CZ7XwRDwrYV8jjb9tlUKioD0SDDAW0uXH6vvaHV/1E3C4WjnvUHMegJr1bbXutLBRjgYjYzGxPBA2H9nsR+WmkwrB+nZbbIkO/Xx # This value was modified by the sealed-secrets pipeline
githubAuthClientId: AgA1EuYn6ksu4zUrzeV0A0sJLnhMXXQprqdyXb97Lh337AB9SFs62panEtay9uXyoRsfPgyfFK1imDQieeRMvc8OH4HMdTyYDmN8rvIsO6/dI7KGEuU35otEjsi3/bgkW7WIToYLyOVJ3oMarB7C80W/8wjRH3b6S6MNiJcs0lI/ojU4GUA3xbd9BTCOwYihh07YKJtPWEHj9ZbAEwysVh/to5qYmRVTh1/aGoZxjjbuTN1L5L1cnl2xgwk8aS9yhjoe2BdYk3FBOvl85rnegTjyAA14fum3vmjmdABPHuGbBppnBu6S98oCt4p7AJI6DI80nWMuaJIKWXmHc80AKDgGLDWR2I0GoJLu31wJjcA4BKEB2xrlM+Y6zspm4VHB/7ZWZ3jGf0+aVxT898RmBLA71+7VQbvtvOySM3QcCJInOyiMNi06+Q1i6rsjnn+pFyANTix2Y8AHyG+uBFX+qm7oWvevVvvm/DqUZcc2MQzvU1LZD9IUrgSeS4exHlsQki12yRuaYljAvFHHHEx40983oopIIEoXaDxbhOwlp3p54dQEeUbwNalhjx1GQ9r6NRHJSYXoy3DUD/UP2zNFfkz27RY6w0vlcbk/ZLUWONswatw74+DNKTkWvCQtW6mRFwEh82LyKlyneZZAb2vIRbcQAVU1uH0IBoxl/QhNfbtnqQ+fQR9RdiUFdY6JGZGo134Pe3jxxmNT8QqRi+AmSN7WGXwxzQ== # This value was modified by the sealed-secrets pipeline
githubAuthClientSecret: AgBB1zakqnR7Cg1w3qBedNssPbI+uaC8uq1cWyOAdn0QsI7cOcI/p2TSwuVQp/w/VHn20DSLbDHAxSYhdf+QoOsnSegnzLXOOTFB9TKaF8/p/juwOYX4tRk6TmLA32eI9YlFCat7fkX+mODrvxw9eCuSx7cfQMFHFNWlI/FUfy7kHesGok4lEh3Lj2jHKpK+qRTMEncf6+LLfJZNRQgyuYLe4r7KN7Zo3jqCRxI9Uc4WA5jzetziG4rXYvxOhbW++U/kuzl3iR945wD/4nqHZ0/adOqTWh7k4bLChokc/UunFRGSW9f0YuNg3mbU4lZ58kf0rrdRFxZBnOrT01isxqqVXU6h05QbEazQMU70fWCfS2xUPbtustD3ZrPejDoOLPPGcMjtar3Dx5I1AzvdrFIj9lJz6Jm+skhk0LMNUvtsRu+LmeV7avacqi/cgXHqiSozpgjycAv5caBp5SRvvghRJkpgOrY7dnY8hci7W8Enk7WeYQkaXiiVzNhysej3sRbsGBuZEI0jcnh8kbTHA5KMOFGLr5wFvgKCUyEDq86xqQfSlVu3tcd8DgODhkQWScX9q/ukZOEUcpeyhVeGIKDhvLfnHMMyL6YWo8K/qgQfazjPbDmhqsYF/rHqA2NxDeNpIUoz+VHvWPu48YZ//69Cxhze6NN1gVoYBi/fJ3TgFKFtTo0I9zbo3kkj7hWT0dg5OCUyINZzD4KuW+CjxOoZ8fdvLEr+7XSO8WhhV/1iQoEiHtJju8b5 # This value was modified by the sealed-secrets pipeline

argocdAuthToken: AgBI0xkCdFUltvuu1ljiPWBYuNRdgse9N7xdhPKNaKymbuOX9kvWyZK8X9yNspW7FcBPAfOBwuM4Cz1nsgv5U2EzBLhtnj7e0j2KCjnJOGYIdN0RAk8rReuh5VCMK41lQesP+yfOGRHO07JcN86oYDcPO4qyi9t57Pv72BJI9C9+T8aHw44QamZ6OG8DmM06inDelEIbBoMRUgmaqo9prahTYkSOkkKwNZZ5h7UgiZlrVAbU3cMGovi+Pr31vr1/opXrcOC6u6Tlpjd11rwET3nMhMT3kZ//TNrX83TPY83tmu2aRPyvP8a8GUJkmCI33jUQtlSKFF9aCplCpV4vhc/D6R07H4YbZR9X5jJDDCivWV2BJlXX92cUWVI8z9dXRy3u6e0SBj/ZTwAG6lgdAg5j1T8WmX7IqEj6x92robS3gQh2Yz7sZHT7y1YEpUjQqMNfbhVGLzQ/YnmwY7mF8I3T2VArqL/vv/3Znhv3xHOFYVbjMwWCsvkZ6TkzmM7N3U3oZd8XMjnzDYVkoxs6Y2EyzBj2Vs6czYUpKOo7kRAbTDNp795w+cMSwx5O3wzNQ2jUJu8bVF1QPtnGdFeUXpPndu2EO5gVfyh+Zq/W7LITcRbEPzV7FSmzk+ZBKDU4x+RWO2vJSmHHIk8plDVR2PirRGPM1VQEDs+vYOG+tXEw9DlyNU48PsR7GFz0pZ3kMG/oIQBGofAhDsgwvnWh0vIrmztjyYA5OBe08L5NiRYiaGe5vin69Mqy/kKgFv1slX7YA7rdpgdqwXcwdRFxMuEm6moR54MvzpKcox4WoDm2ebnoFrlbdpWsr1226xFSVj1HJLGkjwxkGS7HUh5KalrErKDnX4tW+2kq5RfVBiM37Gf58XyWtyjCQv/gvZUwzFRrYpnZzXzvyHMJuK5Bmj4LeZRVzMZyD/Lb8ZBuX2I+OdhM/orcxkQmqr9CdZ2y9S32evAJ4Ld2JO4ZCen9YZnw1CKMyDzp4o0//eqf+NgGJ+gxPRhGizinan+OveXRfWw3sR/6Ftvr6bm9edTh # This value was modified by the sealed-secrets pipeline
grafanaToken: AgCLgpQInRj56a3rEyKTq+gktTXVAanmz/Z2tzTqdu2cwLGhmDH+Bl3N36238PJorjCBDuUAlQactGB0I1EpHfrSYbAv/3jJu8+LHph+2xW45KbooakIhPd6QHG42VuLMOdjQvxOdf0YX3gaiWtNU1UvNObr+iafC4wpPZ5+l3xTbrmkaZiZZggHNVlTu8HwuIDWLbeqpsV0j9E4cyN+Z8WVvqvqH9jOeCyZ2s+mrSjKr+zcxQSswdy+wwzwNbJWiNnajngFPIQLGG6k8I+ec5wL0OpdM+/+qYin3SfmibfPHxcKB8eiQVx5fgOPkfcuAPEjsc4+eTAgpeCGcno8QmdyIOvhl4C0jcB1XeqsYZG/BCWUSH2qZCC99i7Xs3Wa2a8v88VajMzDEhuoybCwDryH/rTc4kERdvIvkiakAA8oCbYNDTOvB4P2EbPd79MxjpRuZEbmoSIXquuHgV7OF551ShBGWGsbZZ7vQTKS3+8mJSL/6gceav4yLjCGobVfeTA1XVdnd2WtBMlAFM1KzWX0mW8Cm8n1kjgr3SmjLFUdqoV4DVmebCkP30+bm4QBpGwDo3TL1ui+4URIv3HnG0/UPcUBhh7TBmbn48W8hyBrQU0BZe9GH6RTA4SAP2qQFGo89zT0ALtXlq3cJvzLfVg8Zd1NO3JS5KQAWjn/0qRur8wvG/LC+K3C3tjYIHYpJol/k506As+zSdMVSXveFqdKSsHOzHmw+0epPpJVB0muqzg21/VCB2Hy7y+HLCkn # This value was modified by the sealed-secrets pipeline

ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
    alb.ingress.kubernetes.io/healthcheck-port: traffic-port
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '15'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    alb.ingress.kubernetes.io/success-codes: '200'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '2'


postgresql:
  enabled: true
  auth:
    password: "backstage" # I hard-coded a password because for some reason, when updating the backstage with a new image tag, the new backstage pod can't connect to the database:
                          # Backstage pod log: Backend failed to start up Error: Failed to connect to the database to make sure that 'backstage_plugin_catalog' exists, error: password authentication failed for user "bn_backstage"    
                          # Postgres pod log: FATAL:  password authentication failed for user "bn_backstage"

serviceAccount:
  create: true
