backstage:
  command: ["node", "packages/backend", "--config", "app-config.production.yaml"]

  image:
    registry: "" # This is necessary to override the default value "ghcr.io"
    repository: tferrari92/backstage
    tag: "22" # This value was modified by the backstage build and push pipeline

  extraEnvVars:
    - name: GITHUB_TOKEN
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: GITHUB_TOKEN
    - name: AUTH_GITHUB_CLIENT_ID
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_ID
    - name: AUTH_GITHUB_CLIENT_SECRET
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_SECRET  
    - name: ARGOCD_AUTH_TOKEN
      valueFrom:
        secretKeyRef:
          name: argocd-auth-token
          key: ARGOCD_AUTH_TOKEN
    - name: GRAFANA_TOKEN
      valueFrom:
        secretKeyRef:
          name: grafana-token
          key: GRAFANA_TOKEN

  appConfig:
    catalog:
      rules:
        - allow:
            - Component
            - API
            - Resource
            - System
            - Domain
            - Location
            - User
            - Group
            - Template

      refreshIntervalSeconds: 5 # In seconds. Default is 100

      providers:
        github:

          # Use this if new services are created in their own repositories
          # catalogsProvider:
          #   organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
          #   catalogPath: '/catalog-info.yaml' # string
          #   filters:
          #     branch: 'main' # string
          #     repository: '.*' # Regex
          #   schedule: # same options as in TaskScheduleDefinition
          #     frequency: { minutes: 30 }
          #     timeout: { minutes: 3 }
          # Catalogs
          catalogsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Resources
          resourcesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/helm-charts/infra/crossplane-managed-resources/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            # catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # APIs
          apisProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*api-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Templates
          templatesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/templates/**/*template.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Systems
          systemsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/systems/**/*.yaml' # this will search all folders for files that end in .yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Groups
          groupsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/groups/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-transcendence' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Users
          usersProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/users/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-transcendence' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }


githubToken: AgAejPIPKP61dpYD2emzkgcEwKKFDWaQmqByGcgI2cbGhe/YleAK6FQhFjEjRt+xxA3fwROvL0WL1Ff23/FM5Py9y+KaQG2VWVXSm5WL1+6PMh6hkAHlE+xA55Bdj5ofI2fUmZRc+Ma57F7+u4NXAoM1To2NKFtuga3uNmg/KRkGZKBJyWczmH5maC+aFgEW2tu7unSVoaHm/VT/553Zfn8mz7DeROquALyBc5C2Bb9BAgFwE9eP6Do9GPwLmMQvMj8AH77ixW/xgWY/mYe6LpLSEkNPZCRBoKImg6zckV/KgUoAEa32QlI9SvQcBSE4xwDbnbZpyJ/t09Erw87zTK4hCENsDsaxSZgClm/qmEd1BVZUqsSYL8cuDLy20ciHNp1FJ7dn+1+fN77MkQ2gUWE+/eaJFDTdS9cX1AY+vh5Efxk0auBnBVannI0NEPMrg40VAUwAeWk41kOJ8XwIA4i0HWIirG6h/B7lPrQALZWF8AWSG/GyrZMnEwObrqCbjb59hh/7yuivOKNg6U78Jg3aMjkRum74M3+CDq2Rn6OLsZ2VQVeSLWKSp6ZKLpLrs6fqgfdVtctIVnlDiGOfhn7S2tuXW+taOEudqS09iMlV3p137IxBV/ZhOJJRAOxXZw4q/HlCYKE1Ad/aA9OiNgoa83c4N04+/iOuIVjZlBza6bEOPFh9SLQQbQdp3DmVDx1vUyA+CPdjMPHedILWiTMo/0JCf6vHkZOdIkSQdHZtkkEghEQjV0Y4 # This value was modified by the sealed-secrets pipeline
githubAuthClientId: AgDWTBhlQFvbViSsE5elq1kc17KZRS3pY77n8XSaOkzNM5ek5s0FJlGKbKuQ82mXd9QNQ0eTgJA6f3Ol+zO3QurZfPi4C9J5iPHwgJYCf6/UX9cU+B/cHlNJfugMnMqYC4+o8uRUCIlMXXwJskkdiJMgDZOXuNxMtHnnqK+9a0l8cbNe9NIXnBagRHBBqIYpWlenSloDU3HFU7N6AS1OvSpmED7lf7lbSWcP37B1CVSiz1e6mRwrcTMt1ZFJQ1LhA4Dnt18nNqMRFeQ7zY9zXd+LgCKO1SLcJet3gwqa982h0HVcn2CpG65RhsN5tkrEcCBeKg3b66AiOZD5Y1bi+zMcskj7gMLc6CZ26T1Y1Yz3NCAw51T8orQgcXkdmkAZ5kpFifDoTpUOkeWtVwOjXG7oefLFWzXAS6qEQqlm+ndFNqKlaofH73NAPr5FYZNImkObE3ey+bN+C+uB46XGcm7wBR+wIRnlD16RpUTwLKYR1bNv8XsPRM/9ZQ35UxXHkREQMoSgMdC0JOQH2QpTKSYdbzVVf3MKOih4b2wzZk9j6ELjSKGKludEO2yoLlzH41ANBo2XLGSIiYgs9Pg0XLm/Nj8mTYk4ZJliWrSeduXfgI6MW5kQv7toBR7oEfWq2Fyil4gM+NsH+QjVKaHeDVyNQFZ4jf9sZmq4YwSbDHbzfJBD2YFit/TUinbDQ5FI3x5jl3RagqTq9CqJDTVEhpx/d6JhRg== # This value was modified by the sealed-secrets pipeline
githubAuthClientSecret: AgCNSPrD73fZb3Cs8bvBXajXnhQvS+uOh8gV+Di7QlV5w4HUvmBwooNNbEcMeLVF6cyAdqPYhhAvbMPfNlfYlP75Ss/BCCwdyC09z2jhR73smEUifLFoPmInzabYp2N7ABtSRAP01VtuQSrFq/FmWYrx0mlneOdEjexrKQhDHu+rmoyq67CWtyZcvxyoM31XusPYLMrpC4xYeq8P6HOuIC3M6M7IY2CaPZqXWw/xxZ7vWqU3ifOaQEKEDolFU1ifeHnWD2qPtHXOv/zUzo5myDdBN8IB7EZUXOYdWzhARJrO1ixY2t5o1QrYHI/y1V78Sx8SoIOycdUFUrRkQZe6IQknpicz832H45Cuk+Y7o/975uCd6APSR5vg07069G+lqUk4o0aUFfDEiUZEnCSyjvj8hUVCNti2JTnvNjjsHuAnNA+5cqyTx7l9vFz47jdJhJNKbJM+0yPLgD9bTs+mg+dxiK+RR7jBNlqm7a8spkEit14vFbns60eaVOlpR+sm0vaca6YPiJK7I/PFyCOGt2dXdd9lkzNQPnDvuTrP5XVIWBsxWeais+rHE3olW6sYZhl41zWaolX9GEWo44XNsRbfJAUvNzUYOVTorNevzjT2p/xNMcljBhjOb+PVQQwxecKF0j2wODpdkJYZSt7SWyFanfcaxc9gK3rqsQt5ZAD7VhzspS4D0tdIup7F0mCrFd6PSkx1xIiKwNPw2hmHRMN4RpZ8APRZTl+z1DUsGd7JK9zhGh/hvOLQ # This value was modified by the sealed-secrets pipeline

argocdAuthToken: AgBHGMcIqmE1xfAwz+vp17HeDzQOFh+VCkYiIRzpqA6OI5enrgIC3foAxsAzxk5PTswnPJUPeFEu5+QZWFzBvInGWOxjE8CzseRpP/+g/FF+BvtZKfB2mCCtDibKWiq8fptkAnXh8Z/4aCtGtyAfmV7BnzbgYDDNaExe+lB9fj8OEk3VZuhFpNts/9eEvRAe1/HXKmo84keqoVOIJHqlQHvVNnl1M8f1wSKqDkfS6Mm/V1Q1kjpIr4hnuGNHrTYAmhNJiQDTNKz6SNbzpid8ZpZp52b0tfKnD+hX20IuSs0iurqs6BiWDm72l71xb0y+Xve1J5sd0D0jjqd/0dQeTOVnV7MwTC2cFhiVVYCbrT0vGW8vt2mauR0EERAsAO1PWoVEAr/WHtRCyvJJCQRvydqvkyHvD94RyvKfMZjzc0uAbmO9Qtdx5GSHJDTfC5A6L6ORSq1h3aaqLrn/rucF87fhLVS1C9nBhN9AAmnDcC9p4/K1Da3FkV0KcWW9MjIk0j82BAx05hiiNQ+wsq3Kn73bBVH7oIC618wTwBfwhyPIrF5juAWu3tJ8tWQfcrjAgiTIoPiJnsgOgjL5046FjAARzvrAiq2kEnFOYngS2osPWVtTSmSG3wFN4H+YjOJNjkLOfUMszFmKEzKpwK5ZREipLNz/bi2W8M+7KMlOtaOrlmU76f2OMZSnxaAnKULi1QuSiIsZKO5h9YA0GBvS7SCA/Xl9rpq6DFpUdeKMDDi1B2Qm/MKrxHpgSP/nBbFIlF50kkZP8vzxe+MZNHSGXFZteHPbh17hjwBhnIx4lyRChQTpCbb4vWqMd7B8219eGcFHMR+XvgzE2ANx+RvNEZQ1Qp+L7Dn+iGuWyBD+JSt5j5tbkqPqAK5zkoaG+9n6MzG0AlG84K2xKXMVkuFb1ReTsJRLBylcRbJs3xhIc6Y0LmA2MlDRtcUV30pLtxwFqYQnty9zswzbHe7/XpNIFOtGuHYmrUnH/uDadYDgvDztFWZlHow0Q896JTPoK9rq9PMRqgDNEejn9tiQc/Ma # This value was modified by the sealed-secrets pipeline
grafanaToken: AgAoCWq3QhCybO9XZPTT/aOKUJ8mClwOXlVkd5J2I4arMq7hvxuaEk/t7Hlq8OmL0Ct6obzBYM1okROseUbALxjumNZoqWaIK9uPGNW2P8YArjzG+Y0v6L7BeGh+xnI/2DBx4JVGchVDKnRcStl1PIPTq5KWMWYhuskTHXVTlK/W2+ClcrJO97YTLsZ1FgTxL8lCPUV5hCSGtHz7NF/ib7kSO9iMGCT3l0FRKjjL9vz7+MVV3tWd42O7OPNhyOEIwRr2YVnwq+S4vV5gLibvr2gz+yLy2Q37j7cWuYXMPAbavgGN9XeUfHQDgc8sgyAvcosXLJrNLB9UxPtWP52qLwakN8C6rykhk3VlHlSiZRCp6JCCBsiTLfXyutc3gJo1FqHemOABVNE1gtu4iFhH6c/Cbech4/PKql1zTeNBliuSgFKwNe9r5B0LQJU1FTHD62U/BgEFBAZXDA8a2ZBXTKVYhf1RIJjuQhHsvz0Vx2ERixzCPFLcFrHjo1Hsv/jZRKcfKMaKEKZb+iNxrGu1E9kt33hFUUcJF/YrzTo3RitE/9QgIEFLwBBvmQP+lUsLv8rWQ1Joc2IVk28jRAmPc7KUx/2legIpWP4YxVar+KULWx759dyYt8Zs+l9WlZ0Hi6dumRmL+F5IU3pdL6d6UO02FUHIPWeSSaq0OL1bxszTT1sYRuWPSsLRmcNPHQ4Ig1qje1yuDkR9HH/YrrJizAmNgjPbejDkJkD64QW21narb+GY6tZzub4k4SOM/cHZ # This value was modified by the sealed-secrets pipeline

ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
    alb.ingress.kubernetes.io/healthcheck-port: traffic-port
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '15'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    alb.ingress.kubernetes.io/success-codes: '200'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '2'


postgresql:
  enabled: true
  auth:
    password: "backstage" # I hard-coded a password because for some reason, when updating the backstage with a new image tag, the new backstage pod can't connect to the database:
                          # Backstage pod log: Backend failed to start up Error: Failed to connect to the database to make sure that 'backstage_plugin_catalog' exists, error: password authentication failed for user "bn_backstage"    
                          # Postgres pod log: FATAL:  password authentication failed for user "bn_backstage"

serviceAccount:
  create: true
