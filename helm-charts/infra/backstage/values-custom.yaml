backstage:
  command: ["node", "packages/backend", "--config", "app-config.production.yaml"]

  image:
    registry: "" # This is necessary to override the default value "ghcr.io"
    repository: tferrari92/backstage
    tag: "18" # This value was modified by the backstage build and push pipeline

  extraEnvVars:
    - name: GITHUB_TOKEN
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: GITHUB_TOKEN
    - name: AUTH_GITHUB_CLIENT_ID
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_ID
    - name: AUTH_GITHUB_CLIENT_SECRET
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_SECRET  
    - name: ARGOCD_AUTH_TOKEN
      valueFrom:
        secretKeyRef:
          name: argocd-auth-token
          key: ARGOCD_AUTH_TOKEN
    - name: GRAFANA_TOKEN
      valueFrom:
        secretKeyRef:
          name: grafana-token
          key: GRAFANA_TOKEN

  appConfig:
    catalog:
      rules:
        - allow:
            - Component
            - API
            - Resource
            - System
            - Domain
            - Location
            - User
            - Group
            - Template

      refreshIntervalSeconds: 5 # In seconds. Default is 100

      providers:
        github:
          # Catalogs
          catalogsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Resources
          resourcesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/crossplane-example-manifests/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            # catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # APIs
          apisProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*api-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Templates
          templatesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/templates/**/*template.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Systems
          systemsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/systems/**/*.yaml' # this will search all folders for files that end in .yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Groups
          groupsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/groups/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-transcendence' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Users
          usersProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/users/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-transcendence' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }


githubToken: AgAKFSVo8LPBD2YiZS97tHy1ffNeWlQ4URVsN6yq8vcKtA2ijKQh6JNHCX+m4gvWyeSRAgEiv69b7AuTHicl6tJMkv9sbtsLg1G38D94zUT42lhRgO/FpQNBKwZRs0jLikltau9GOddqfkauEoYfet28LLbCo0l//47+Uq56+qMjJT1n+Z7477tvgSKzDG2nm5C51pmr8hnD59iLVJg1240ZFIqQ7zAC7zh0ERqE/zJ9kK6cBtgZ1EfigMI1uIL4hxLgkB+F7ml+W15z7+OmB0q7kHpUtNDtqnkej+l5HKXZBMWs7ozgeh/yENr1Nqqsi7thyRQJrsQvClCBFBwMJ0rcz1heNmtaS0uvhbPYdZOsYGNeMf+7bJOT/dVT5QSVThic4CKNr9K33R8qK7G5fxDMdlSKZvsm1nsy/wWQq/nRid2LUwV6GKzVYEgBXty7p7L8Qy1X1yTTJGlCOOOI1uy1cu9oov6GZJWTBBCXIapFGdO4jEMFSbMjpl1b6k1lC/4Hy0Rq5gNE4xMWmqpEwT4k7YYah4siIOUW3Ps4FgUvXfGG88/KFh6DQ4i36PFrs1AnAn758z4zzipvyDf2GhuaEb+aeyK7lWi8c2pxEVcpa8pZ5ua46SNskikjD9wSsNHSwHrurs7+MXS3dk55sc/RaMEwKyuysrzEZp5zMYjF2QnX8b6RrEjXcjnOftX9qRsdnlkBYKpBG6PpUDIZG6ijmqXh/15y1RYYvlvcdnKl92Jm9sMS03wr # This value was modified by the sealed-secrets pipeline
githubAuthClientId: AgAT2sKFLVHcQzQzpprAs557UilCLrWQZIzFqaiNKbqlQs6yPhcdebLz6G7WUTveppqJonkntziIzjCnwMv6M9nfeLeaMS9K7H4JOgvBKyJmXIvLt1Mq+X0jRHVLWCnJxLF7D8CGBlcoDatHH6WubEo8usseLbd+eiRZodC3wtvWAPcjtQIz+qlX3bFoXt7gQRNkDUTZTn5kHTXAdi2xSCXQyYIv/eEAZWPBYwPhuNqrMx16c+vGoCWSkYnwiVLwxO1cYnpsreAXBlCMNRG7ax9GYYFiD1GNeIksKO7d7VOrQ0mRycpJpgTtDz1DNqJBs8VkDvzppYfB1SSlncrohCXCaWx5Smz0og7MkbQXkDl5EAAg5Me1UdDr1pqOejmu1l/IIQBJ6mDcWPk/BOd1UmqngHYBIoakK121a6jXWzmcIy5YWeToTECLQg/ZTr3E2JmoAai3JvWFelsbO3hX5gV332CzXOj5JM1fd79d6YySUybgINVZE4U7yhR8ucZnkMmt7VzevS73R9vkRN364XkMlmAnlBCegOHBzUFiRhuU11DqxstGtbz9+X1fxSEgxzQpK8lTLUFuhE1TftLDZZsy2eBeVzjHTuj2pXZ+dd8wLQilitwL42zSQ1bnJa1CBlOKzT0Y1J/8lqGuthsEs5QN49y3c6N+DSXCgkpI9qTMqf4R09DIsVfedx3RPf65qWNHYG5dF0hw09szg6ZiyspA7cSg/w== # This value was modified by the sealed-secrets pipeline
githubAuthClientSecret: AgA/7o4T5Rnrt6DDlVVMNwc+BlSgzGibCMr7kQmtyWU5bfhNFsQMG/H+CMF3bGS3w9I/wNBS2SOCzNhs26EpuJYu2G5QLdfC3bI45hZZgvOetYhwRMv8P/5QXh55DA0cjUEtbtMclO+UooreDEQWrOVPXEpKO6BIr6uoRfGCAfVvbpOvHNxYWVYs/7xCmeJ1ao/IDhst6GbUnGjPyg0WVoI+J3MNkyX2DEDSlNBEjUUEx0NYQYF0jDcQ3xlzrKRo56zqpwfaxyiemby1IjjmW4bak2tWG9v2zpjOIjHp1v/5s3+G8gWxdKLpBkqQhdtphvfNgNatT2/PAPnMxCfokEwrk//K3nmdBgaZxaxP7GWAe+6xhpqRkCxB7na4P+wWBy7P7u7wZm2GgvqriT4mhVyXBTyGOYeXE6OBJ6enBkp6FFQjjZgZmD0FAUbzo0sw+Q9Wh/LSYJZtROWybmsLRdVeJojg/SOQDKixLn7KYUgM92Fbrgvpq7AHJOIke9Yo2bZfEhnDwsggdhs3rkdjdt2MxKZauitpXMN3sOu+uWJJDUG54mPVtmOTSKFQ9UXfFnAGJWyBLyIHSG021XhonEDIWjP1g1f8dhaKQ+eC75mngcnitnVaD+zVCEWpIezCRbVTPHWY4Rw9kxsLC7hNOiA9vbvMCt9AwroNaJIsrgTouZlOaH+jUlrQ38B8OJSMO/x627zgpl3KYaigsMNebSB0yJjaqeb3S3EnYP0ciQrUSGV3OPaPg7EQ # This value was modified by the sealed-secrets pipeline

argocdAuthToken: AgAg8Y/AjLAVczWm5YbZFWuo3NuaufSsN6T0VNkMBCgwe4QmKVoZHFLdFYJziS9kC31gNAtfKrajKv1I4fgEHLgdSbY+TZgOJ9RA6HGoODYkqkUjPr6mpnLVlZ454GHYc7+v8AAnQ+98eC5R6PfwD56rL9bqz5RftY4ne+sFdp8MUk4JE/M4S4TiPp6NVFzrVU04mbh4D6sBqoVXV4FaDof3XzOMyuW7mFNhfskcQNYtJ7tyRD7KGFK5okMsFnPXUmpjpitqXPS0yczpyOLD6yPla9bLsS1hWNL4BEr/74Z3bgDLibIH3jpjSWSRzgDtz361okswO4V9So/Zcj2uvC0zekkk5XhsBmWSGBAvUcC/zy31ZKr2NZQ1ihNBs8p7wO5RsxBHeVkRqFf/f0/84f56HD1+Yfd48r8kD77KBG6bwBpZ3eOOKctYUhf9vTj91KsQCzbtn819dXC1TymPrtOEKwC+BvzwtdvuTCg36ZrQLpQ7MK0acKWtOlC1DRkzX0fyToYrQcyXOIiR722fbU18W06SqIqujrpUDpzTlPsM7OJJMzR0YAoLdQW3F/1KirRitPdtuHqwOw4jfgwV61q6H/Ak7wPe/oeraqeBq56NJtcl65KhXRL3JMKO0e9KJCn3pTsGl+bVFIRfLRsrbWdUqVW2AdajTby7tRSSAz/RCxiG4uiyGDFUmSvvBuBcok2xIBGiCpqGXQ9OUQ0sNKdFQrTpXyWyo4rRsNI571DEqmOXLFPoK+FO00+XnJy83NaIRo83iz9M7oHG+kPuIhxZteK6MD5jsU6s1TrylA4Vy3UkTNTK+0pXxsdxAexLjqp/HeNkZ8SNOIC0VZ+ClzrOQUqdDbk/Cqnj8wM9U4JCUpQSnBrjL/63LEIp2SMD8uJat50ZUGVjBAjMe4UilgjHmTuLegrlZbTsXt6247rkvzwQ/5kVTarwlu88vumArLgm43+pZvTQImDTnSU/iMmAUT/gYq0KmOSsS9SldgZInqUAtOxUX5ZJeZtq8liChQwLIXKaoqynatptzIIA # This value was modified by the sealed-secrets pipeline
grafanaToken: AgBMPbu8qBNUHkfcCgZF2CoDcQ2dyDuHjAGlmiVxcbiWcKsO7y4SBES+gw7hWkjPxKErw9pmgoGdR0mcLDbzHk4BL6QePM6ifbl7dPxH3a2Qyf+gD4oWwndaErgiS9oKv2moE6soBeSCkbK77u1Jm0k7kSM/+i9ImEFQ3Mw2PBw5wkHvK8JOEuGYgr8y27oR6S1oNGWTgaSMtYxGfSQg1YVp6ou9fz9unrGDLWkRX09Hi44So4248K71kKA2KT0Hk3ZyDqJNRnM89SNXoaKc1KK9+B+U62nbV+w+1RpUY/yLYhtoeL9/GGaDF0iII0s1v2ZvTSbpBVm+2s6iC7MtGaE4camTVC/HMDdhGKh2c2xJaK0ZLNLsCBNrLTXoba+ysXXZQ3+wR0jY0WPf/tqN60iUfpilAyYBEvZCczS50hOEeech30RQWWQgqagrlsNWcIRKYj0Bew8hlzvooF6/7Y32swXShcrsPIPwAaP053JzCzwXGTYp25F/QTmdh84A8xCZ8oFVQoKons6WRz6tKUuQlaaXqzJxs1ZUwm+RhuNDwVjxtadtJtYISg7iR6AWc7BvSR+7tcWHInDDEiB/jb5npQfh0KuBGpMC5gwbt3ZMNT+sgDqiT7MKj9P2JlvO6Spndpx1zV6KgzNtyTepnWN9J4669klhxj4tDbwPX7LH27TqvHELFWPDbCVe6tFUJEawWpXbUfB3g+WuQm37Ql2fcPYuFEojsfB+DLSM/gerrAdF5Y/mJkYsNJMSzpqJ # This value was modified by the sealed-secrets pipeline

ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
    alb.ingress.kubernetes.io/healthcheck-port: traffic-port
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '15'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    alb.ingress.kubernetes.io/success-codes: '200'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '2'


postgresql:
  enabled: true
  auth:
    password: "backstage" # I hard-coded a password because for some reason, when updating the backstage with a new image tag, the new backstage pod can't connect to the database:
                          # Backstage pod log: Backend failed to start up Error: Failed to connect to the database to make sure that 'backstage_plugin_catalog' exists, error: password authentication failed for user "bn_backstage"    
                          # Postgres pod log: FATAL:  password authentication failed for user "bn_backstage"

serviceAccount:
  create: true
