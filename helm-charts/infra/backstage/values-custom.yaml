backstage:
  command: ["node", "packages/backend", "--config", "app-config.production.yaml"]

  image:
    registry: "" # This is necessary to override the default value "ghcr.io"
    repository: tferrari92/backstage
    tag: "4" # This value was modified by the backstage build and push pipeline

  extraEnvVars:
    - name: GITHUB_TOKEN
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: GITHUB_TOKEN
    - name: AUTH_GITHUB_CLIENT_ID
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_ID
    - name: AUTH_GITHUB_CLIENT_SECRET
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_SECRET  

  appConfig:
    catalog:
      rules:
        - allow:
            - Component
            - API
            - Resource
            - System
            - Domain
            - Location
            - User
            - Group
            - Template

      refreshIntervalSeconds: 5 # In seconds. Default is 100

      providers:
        github:
          # Catalogs
          catalogsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Resources
          resourcesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # APIs
          apisProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*api-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Templates
          templatesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/templates/**/*template.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Systems
          systemsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/systems/**/*.yaml' # this will search all folders for files that end in .yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Groups
          groupsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/groups/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-transcendence' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Users
          usersProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/users/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-transcendence' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

githubToken: AgBu3gtXwKMoQMvGk49D0Kw3plMw19V84bMqvf6APz6Z5LbjJSFEkhDX8UiTnvF7kuw/GF4zKyJHZWLa3ovuvNmXXPrVA24S18DaH0akUXQdTcxjJ212M0cRnhYwZD2aTcoVmvy/1IRaAhRfmwfAz1i9DN/4H9p1y7mwbfB9B5+dafJOz3CnjRWGeIVO0xTJH7SaraDlHvEqpW/IxPF7No03hFX5DNEVAf99LGVMLGJI+7dRC9t4ePc+NmuPtmqWpuCxm4B+lQWiJfnDK7/uF3R4QbUY6A6PWr/apcn4tRQhsvG/7erP6x9dYtEeq4jvr7R2bG0SVJdZFTnwqFqROnKLDl8aou/SpQpVkUO9qOKtQYtpGBaoFMvSNBcEM4GL8ddnPHTfD1EBQfvzRKOA4CYFmGvgMh8ZrwscOyI4DHjq7c1PPTqQRzknQZWUnQbIebcAkrRfit7a2UAiLK8PcO6bxGsGdYc37KZjJXcKo82/17z29Dxv4H8f+bP2VZky8+o3TYB5YqsJpx/qVivYolj8q9mVkuwNlJBVc3uMqt7u1oMK8jZQCH1TTwr+b2LkvX92W9LNVNbw7LQP04jEHLuNdCjapOETIt8kMQHtAYwgTLJpQw77HL7fnJK++TqvEJjjQvixohRs9L5iZOnx183C16xZpevxGZptNRn0abDGHovbm5KfLOX2k8JcwMRekNf3C8llF4onTZwIgZ9CJcjafOsPLsUfrcJdwornKxxUhUd+K9I4MxAB # This value was modified by the sealed-secrets pipeline
githubAuthClientId: AgA+7mb47MPi4fTSYL0LICGtQ9XjzMowoMZDr40Z1Nn9lqm0xS2QIdaInZlnhQ+x4qZsWgK0acHC6T2PZ0SX/t+kymtMVKrIQDOa19/xcH/jy6CTPCJzAxXMYjQfuOPKY9LjCAroMIyj3fBLzHzLlDGqN2bP9fLVnHvg6azQxw15GYIK7g6tlYXd3NpdduITWIAURkGoEswx9afjVeNv1lGZbY/m5GRzh/xoKXD4n73Me1qp0j9Bj8JImIAl1aPkNzDjIxz0HzH3nzXb/x5M5IHOhk8gM8PggtLLDZObkdBjYTlAd03TYh/9ZH/4hJ5Sstbg9ovWvuCI6aOex4GnjiacOmx7id1ovMEEeEPMs9ly5rjyaAxK2CxmI/mRNGeDzUb2Vkt19+w3n7ErwypiW24I/r+wspOwrqIfBEXm7P8ItkbCYZkqv0QCwzSaTlPCG4MGZCxMSBb1HnENzUMcEG3Hrpyvqe47K9lTdPhfO/KpWqmSwH5tbJrlNmSqM0rXrth1fQkokYQ8TuFn3l+1cdIZMNumSIgIVotSpYNw7f0XUaKr7nJgKlDL5ge05fnVh3vcI+tTp5VDwbWK82X0ExAwsL5tj8GWb73HMG6nhLjh94KsQ7Bg3COuvGZYYO8QkGKtoYWb/AXxAhD76ylRKpt9yBbpUl9azuC0sU/ES+AQl0gCZBO7sz6Ghgfq1wcUgcvl6VwaEoEmp6WQIuzOrBHRN7le7Q== # This value was modified by the sealed-secrets pipeline
githubAuthClientSecret: AgBMETSPrOfxX+KWe0PWCrIFTluNf0GDJyS99Gv2a6iX0nX2gbEbnI/CVejWqnMJJGnZSZLdK4ST44pSeMioixs0MFUt7Fqmtd5JAhztggHZPbtHvUo5i6ftgGd1Fy7vlQZpzfsydfNLY5Nvzl40/oV9o4Rf3+h+dP1Mp/CUuKmPtaJaL9jtirlk0OxMgAgaZCC+tCAMEaExuW+93MHhnroQ8M5DJfNy5Qn6LKvIsupPrSTrEDFkKfd9kXoWTQwtlJfCPPP4U5loKN5P0vg8zhh3HQ3Hy/wGH/TbPWcr1D6bXklu97pCoRphR0k4ZTx04+MlTLELXUVVWRsRePziug5cwSqU8fVzOAp8mXz/8aC/P4hg0cXrx8NArK1adKc25M1ggBttVCjjI9kcChYdLyyDOE1j+gW43i9JuveHE9SLQa3thwO/rs5LTLjp18n6F6hmfR7EDA1QjveYeWzC7HMgkbUP9m1k36P1VOZ1yPyG4P5iuXahssNfTvMXMCcPr3LuEnqf80oa7RT6yy78xuvi6ms9aTSPVeA1CSDwh5H8WdSVnF/SLAG7pDOmF86/UrtGNDI16XjStC9wWLGEA9s2AN3vvy8+LHdeJelPoDk/cIhzcPkJrrCASbFDoOqBUooS4QsIBjVJuBfQkvUwi/3l8VZP466zzjLZc7i4iSqXLVWYKXxuhydFSzcJWF5h4v9QrGr6NfUY2S0l0wIqLzgmyyxQIXspzbtR0h09Ji39yt3XS5GTv5ld # This value was modified by the sealed-secrets pipeline

ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
    alb.ingress.kubernetes.io/healthcheck-port: traffic-port
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '15'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    alb.ingress.kubernetes.io/success-codes: '200'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '2'


postgresql:
  enabled: true
  auth:
    password: "backstage" # I hard-coded a password because for some reason, when updating the backstage with a new image tag, the new backstage pod can't connect to the database:
                          # Backstage pod log: Backend failed to start up Error: Failed to connect to the database to make sure that 'backstage_plugin_catalog' exists, error: password authentication failed for user "bn_backstage"    
                          # Postgres pod log: FATAL:  password authentication failed for user "bn_backstage"

serviceAccount:
  create: true
