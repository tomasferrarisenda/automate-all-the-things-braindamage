backstage:
  command: ["node", "packages/backend", "--config", "app-config.production.yaml"]

  image:
    registry: "" # This is necessary to override the default value "ghcr.io"
    repository: tferrari92/backstage
    tag: "16" # This value was modified by the backstage build and push pipeline

  extraEnvVars:
    - name: GITHUB_TOKEN
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: GITHUB_TOKEN
    - name: AUTH_GITHUB_CLIENT_ID
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_ID
    - name: AUTH_GITHUB_CLIENT_SECRET
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_SECRET  
    - name: ARGOCD_AUTH_TOKEN
      valueFrom:
        secretKeyRef:
          name: argocd-auth-token
          key: ARGOCD_AUTH_TOKEN
    - name: GRAFANA_TOKEN
      valueFrom:
        secretKeyRef:
          name: grafana-token
          key: GRAFANA_TOKEN

  appConfig:
    catalog:
      rules:
        - allow:
            - Component
            - API
            - Resource
            - System
            - Domain
            - Location
            - User
            - Group
            - Template

      refreshIntervalSeconds: 5 # In seconds. Default is 100

      providers:
        github:
          # Catalogs
          catalogsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Resources
          resourcesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/crossplane-example-manifests/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            # catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # APIs
          apisProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*api-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Templates
          templatesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/templates/**/*template.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Systems
          systemsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/systems/**/*.yaml' # this will search all folders for files that end in .yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Groups
          groupsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/groups/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-transcendence' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Users
          usersProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/users/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-transcendence' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }


githubToken: AgBpJWMP6jfV1xpxt1JWwsnQnChzHDTkPYz4uopvEopkC6K6aGdEH3kJ9RdH24v+5QWiDu2l5Ofzgue6T4qwLRPvcr0VDnOG/b3lMmWumfY7tjgI2Ag+CZ9fjCd5I2w+UCF5rsJis/+QeW5BQwmy4T0gzYvOX0GTU6U9cgD9FPb8BLgBKHOgRPfqhnQmgB9NsDsn2uU9BhAXgtRgEteWzrRe5ywgnzb7erC+k3aWtck2jlozJeG8lP6kNa3hnCoQZ+7KD6RdB1BK6j+dvb1ZmKYsP2QTVvsGv0oIF4ADpQ4dwRaP4XveIDCf5g/iP5f6xYxxIy+yRT/gr6DOG+s2y14tibRpo/C2BExVuonPVIdalG/2/OwQgoCyLSE7J7i27f6ml90i3mTU6biASQ/d3cqFg6lxZPjgOvceuHcM6j47DN2Agk51TxWH7r89KNLkRGJ6uDrM5OyafeOl/rwkDgFFRLSkyZcTK76CgUy8oiVLYwKHh8H/heidilyOdSO/HrbBeDKgfMHDGLthwB+3uTLtLuSiqwQGyHmgKxQGLacV3QOG1XsNvhZWE7uW5O3Wi3oCJwES6yHXaHtpLEqJwG8ozO6fbbKPZ0pwgAq02+GiqueTuVP68Qmsn2vm7SddfoAMHDfMEgDTCWxH38fNzdVGCAvnq44sZJeJPljC+CsYNBRMHoqgvJ5uuWzlJ+bGDWCYV7OVpXufbprZlaPr39GE9dGx3EY5Kqupz1wzhwzgmXc16Oqp8Hqp # This value was modified by the sealed-secrets pipeline
githubAuthClientId: AgA4AbUZChDQwf21P6lsIPhx2GsUFYNHakGKY/t+RFZ1l/DD9cDMDlc18qpdKM8ftSS5bngUV14wFvj1HgtToU3yD3dX8RKrLeWRj84916PaE7NMFuExMd4CMdNKQvp6o5onjP7arzcCtrvfT6DuFXdRdjQzLxs/wGB2/TKlYLc9qRqZjEP9HFUcNDyX/J0mmVEKnphHACYqRXiaAoYQbHBX7MDLKl+J3lQfcpihn+V1tCfHX6mk6j/dNOEIGDsdQ+Rk5kMC2fLa6WlyT2HvFqWuFOdi5Avd5z/1mA5fPxlzrJvDfRp4+5jKPReCnmuBtiu01afoMdSVcldjjRoD6h+3QaE0Q1Kj/BB7NGYoikFWUgUOSeyLGsGooXflNyuby6QxTS9wlI/Mmx7zBzNMoaFGoC6hSrBqhffBVtQnspO25EC9eyRnpsY+F08FKyKPlK89kEOdtpPHlHC0r4V5YVKXC+ndqi7PF+Qh1Sx9z3fQU3lcL/WrLeTPbHKntHrS3ZxmSTDwgbJ78QOZvU9bYioZOlYvSZtXguJBbe3rItK4qGj0GTojy1/CxaKBWVCAa1CMn5uMKShZSkS33QYKk7O1Ipp2SjJEIfWtdrHiA7S//qQqFB22L08u1ZEWICqgEV/hjmqCsZacRX5NkBIZE8DGHBGoCFjxvNsl06gyGa5CQh1n/q6kc9YCceWYra/TeIaGyRXLmdCqm6EWQvywjyq1X4LROA== # This value was modified by the sealed-secrets pipeline
githubAuthClientSecret: AgC9OTmDUVTLtle3tz0xEXw+7q0B5Wp729oOs4VYADLwm7Lpn5XHkeTjASisKvIpsN1Gf8aAZKCszsb7oovrQVtgN0UAxajm5MBkDeAebz8DhmpbA5Vm2sfUQtNc8SDdmXV5jNWqXhMhDMw/u8ylzs0a/Y4Zi8cZmY+hTGd9TICfC8QQkipVzVkjJRhX2XDcYbeZuAwmVyBOwfCd0GH98xm3NwyVpUfZZZfS3NE6wZCt83uclEwfuQew2u8PPPpy9aXECdqie3X2cvylVk9z1iEprVfE+LWUWb6Gv3QY7LYh1EewxuTLqkAax2SUC+H30WozGtpaqWnj1C7uh3l37LJt8Tf/r6KT2wspzhG3u81f5DXMgbkW5XPtfjkGOUHOLgcr0f9jpJOuR0KeowDiu5RpQjQRuqd+mF86Fe/3OrfzNxMzs3moNLWej33rP4enV/N4CpijKkQFLhNmlMIJDIlDwq4iHQt9a/ka6JMNHyJX3tuLtgCp/beLtKWyifcoLWBfq7qHPha6QCjStIev09mmDWw3ZiEMRZO2bKm0KAXQJzt7ermo7UV0DRzpAz6xazrIomvRg0YIrIyfe/ZSxrLV4hg3h4D2/t5x6L5IUiI1HW0a79za9yc5gCh/jxN1PdgPC7gMOZVONa0CYcigcUFrB7+z0dB483UMSG/4z5q2zcudmQx0avYNKP1OGGr454mvtzAC4iSidu3aFry7x6jntE8aoWKzL4AX0W43uMZ8vpUznhUmskUE # This value was modified by the sealed-secrets pipeline

argocdAuthToken: AgBnz9zwWl4dIK3osW62YN0uQmQ0nS2D4d1Dt7hz59UaqC0DCdee5kg38IEpzNXZvel04MvhlCHSYwDKTBSpzlwh3AxMQ6mOVPC405mKcnLxAOb3sSWLtD7GviJ9A7Eg9+sLLPD+1lMbL8WsAtgFDcoaOj4cseW8nxvtaLFxmuNxbGqDvRuS3mvdfBw27VSM9Qpfkxj65DzNQJrniBAVjiuP1wOP+0uZw/8xMPIgNpJpA9ZODMKdKwcsVYX8fLftK6xk1LvOBmWcjoBnMjbxZ2qZ293OWyEu37osHHNcmdeWgO5yWbaXgR/z0LDMEmFDK6ubwD8ezqRt0Rbx1Ojooy7uKI1yHcM2OtVXc9PXZ6GEkm7LZ1dHm9Yb1VQknTTeRCR3puU/F49XhW8GuTbKEQLr0o729D4plarvtx7LSKsfVv7MVOD/iia2z+ckDMezfXnFgSn+GCxdQYxIIE5ym8Cd1+dM69B01Rz0K+Z1WycnI3b6dIMoktPtVBxOWOW96yloQyVxusL5bGRjQA2jvpJkDP7oKW5mDq1iQZRHjepvqMbb1ibaElIWnOkT12JhMDMxf0LtSDES1aEvzRE6uVyzhfdZ5B4S1bTenkpnNqqYD9UENvaiKWeBCSa9VDDblS69jVsvTPbWOUszCsvOlylk87hJhl/FZUgBfkxFrpHN0QgJijogR5WXBaS2oeOxwCnEhop/rDpLJ9+yBEM5ASdsCHVLa5GrnXKIfnVnz/OTVm6KMP+WeGCDLS9v9ULMajcNkZbXBeeSXJYNVKbtxGbjw8Tzde5+sn7lNY4CiAezBPZDeduSe2oAgPk6epHL3OzCzd61Sn3RD5GkW5Rd9B+d/pqgJTtJa3zJHQe5EXH0YCiadoCXl+OHZbZsLaror04ZT5f9JfYDe7/HiQYZA4KQay83IaQsTbmdxiwbywswLabYAkGJa5C9/4K+StwErqNQQkSK/lcRX/4rZfUQ6YRTRggUF+cMhZFrKJuEdbb2obq/5BNbT3bKpQ0sHl7fZ/hdSj+D2WJFdVhvsWPd # This value was modified by the sealed-secrets pipeline
grafanaToken: AgBmJxJfd5fzX06JWfvUbDwEvuI54gTHktY6pseNPZAOQ8E0WaAol6dpeZgTZMEv0Qj4EBYQadC6C4tre1yJ5x+As7Wn68RiKQqAaXwwUQ4YNpWRsJHgmTOjnjm8+tIBIQ1XCGr6188TxR2IwwJlatYkeTfBfKHBoPskK11FyaBCkEmcoi3UBs4shn+cMXoEA1phyXccr8RyqK028QKiU+EHbm6n3p9/BurJMK9aJYnqn323KlLcCifoI7Sh0l0nsg+5y9yp6M/Ga44k7LY1dFsJwN9vp7VzymD47JC4ZMdxZS9DSpkLGLiQ1eoL4bsvssmbPlKg05kJQqb8CKxS5tlvQTrqej0fGmZXzybcxyv87kYOvP/4D4WIT/Zfi8IMGE49POvSmmgHBqCT1Sap3DxcnzliUJd8sJdO0/xIEfn7DFvHYzYdqndYtJH0j7+8+okxy2MTpcdKVeCCCkqRnqLXbMdJ96cjJv0Lj1oeku44Hp59JRXQrctO0GkKKxoaxcajtZp2Vi2OYjonzf6nk68gqZpn/zXU+MjcYmJZvXsw6DGv+WRJx85/A+aqHmX4kpOQc+i46rw8x/1RKN9TV7lXkPmAWCIZRkZfjTI+PPk+PgoVfDxLj/cFHS77JiLoCALIqkwqVdhjNWKj4LWiXZCJ0ow2b+HbJ6TY/QCaRO2vqLYHWsQ4hetFF5aC04XNh8E= # This value was modified by the sealed-secrets pipeline

ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
    alb.ingress.kubernetes.io/healthcheck-port: traffic-port
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '15'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    alb.ingress.kubernetes.io/success-codes: '200'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '2'


postgresql:
  enabled: true
  auth:
    password: "backstage" # I hard-coded a password because for some reason, when updating the backstage with a new image tag, the new backstage pod can't connect to the database:
                          # Backstage pod log: Backend failed to start up Error: Failed to connect to the database to make sure that 'backstage_plugin_catalog' exists, error: password authentication failed for user "bn_backstage"    
                          # Postgres pod log: FATAL:  password authentication failed for user "bn_backstage"

serviceAccount:
  create: true
