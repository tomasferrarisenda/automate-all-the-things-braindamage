backstage:
  command: ["node", "packages/backend", "--config", "app-config.production.yaml"]

  image:
    registry: "" # This is necessary to override the default value "ghcr.io"
    repository: tferrari92/backstage
    tag: "4" # This value was modified by the backstage build and push pipeline

  extraEnvVars:
    - name: GITHUB_TOKEN
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: GITHUB_TOKEN
    - name: AUTH_GITHUB_CLIENT_ID
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_ID
    - name: AUTH_GITHUB_CLIENT_SECRET
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_SECRET  

  appConfig:
    catalog:
      rules:
        - allow:
            - Component
            - API
            - Resource
            - System
            - Domain
            - Location
            - User
            - Group
            - Template

      refreshIntervalSeconds: 5 # In seconds. Default is 100

      providers:
        github:
          # Catalogs
          catalogsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Resources
          resourcesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # APIs
          apisProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*api-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Templates
          templatesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/templates/**/*template.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Systems
          systemsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/systems/**/*.yaml' # this will search all folders for files that end in .yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Groups
          groupsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/groups/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-transcendence' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Users
          usersProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/users/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-transcendence' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

github_token: AgBjWBMxuU4vj37pn9wPV1qvLY/ZBb/jdraxoPPlps/+kozfhf+QXB96arXaZZCZnhD9tQnmrUStz2uvjxObhMUMLmS20goP/QzKaAyPfQgrGTxeHI6F5fzMXeYiZyTcOwOuhqhgV6rZFD6XEyQdUtvRClALnFL1ef+iXJVVjABizi4wDKXwudRWU934b1AgSjAry6jbXLZPO5VIGgGaMWHI8y6gZ2BQws5vck85myU2YmmJowEo2hr7B8ORIPCFx8p0dnjvSh7AfUO9zdlm68n+HEtKJWapWZch9nld1ygnA9gC3lRxzMExOXCcGbbCc7UE0+xsxbHoYrzucLzdnWBOdkYA99KLhV4XDQ6KkhitVQRHuAwnCtEgO3Xns3HBGwq7uQ1aaXdZ6aHloahPZfjVjZelKmwyVZngzCgAAFzEHi7pMToAJEtmb1g5GXYbALSTIwqTBzJ+9DJkhvZS8N1ZW0nrLFDNtXf8an4w5JFSbl3rhZAO+PLbir+cNEpKTbtv5ylb1qNp5QTImyphrJisphciDlGwmnVx26nixI3dNvNQ7S3QaHL5OdmCc/RSRTwoaz4CwJN+Ki+vrvun5dfcbt53WLKBZjPYibE2sUWTGQ87AXFpWvHVkTSTzYiv6opQ+QGGY0H3/dKv3u/XRpQuCxHoj8+63pI34L9CWRvSxy0YufY5GCaLBQHXj++ZbHrE7sj3FVzn6hCNhn/yCnf4jQ72DDhXwTi2CfLT79yTdUl0TqDyLayt # This value was modified by the sealed-secrets pipeline
github_auth_client_id: AgBvhH74MOMQZD1evIgE1jO/ai1PYBT9kzZbDBl79HrBoTur8UDGdEsd3maDM5cBkyfBwZY4qN9vdyn7WKs0d3M9DfKTpq6QIJ0fpMVcyOIEg+2brHbuFmkM7ChKiwU8CyIGAlLHJqBN13FMdPImbSHMTe4VFR3+pRbHdBQSKYLKbm4siKMBLCHWzUVJuVhRfMSs+YTgx3GfRFJM8P+G+0UCitwAMrhO1Xla7qyLBWVJzR063CgW2WK2Dv7EScocS7++iHswMRvO+bWkZcf9btCcm6hhGBBNfOCPYQCubpyuXOkDUqFogoFojQbUhUZpOI+1+g4qjNvPy3obcgzW7Q74NwlEsRtkyGnWyqlpyyVOdemDh8uWA20rYAn0lCT/1QgU+8rVTMpjaXSIx8DvaGaP4P1uynIpCKP7NgB/9EgESCKca0PCWMdqOF6Bw2lrJo/qVLWj8NQTccvaLBmIbhfevtH9pbtDGN8tJh6an/JFP+7pmYsu5Oyh6qlVaTm4ZJ/21xQFPJKsp2DGsxlH6hXHBS1ug4gpj/rV3o7vYjvOAazWu5heN3KfEjmqdjK8G/+RK0bMMUKZrU1cPO9n13QuUQkG1aq+b8S9Sdpaxe0h8itctumvCr+e2kzYENfwyIaP3hq+d/KXgDev5V5Om4YjBB89ZcP0Xzb9juJggRq83Qd/c6bByIYczlCCC1hD65QCTByLLD9HF4jsPmfKrYLyhU/5MA== # This value was modified by the sealed-secrets pipeline
github_auth_client_secret: AgBQrmFxmk7/Q8TdD3jmbGVFoaQp54S6wQP/qg7AXusW6Pg+D9sWheKUfur3WcRhgTlaW+7BdmILPtaWvm4xUXrd0CpKMEOXiUnbol1MOXA2Gvcw/fTB4gCPR1MjEfnTuQ4tiH5LEoYcZ/42fFxra0x1er+igZJkmRRdOpfGi5Ykw8jox+isiwxTutlsCjbbVyrACehUGkMEMkWF0J1mZJ0MXrIk7tCwn67mG4qQEwzxJ5iBhOA+HyR1N3ixsXqdjTYjXFt7ww5uuWBPl6vMgxJX9F+Wa0wbyk9hgXyjrQllg1EMDAkGgEt/5HYc4i5RePk371pZwtczG0MtCbfNnOy7MtjJd6EcvFFnverNRh3IURGlJr+bWbr1eqLQXLK3Hx3bJ3WHKijNyl7KwkkhqHCdR1cgU6u77qFDWIT8et0ZApzlePLhrmGkFFIwPqf1qvyRh3Ne1zGB6RgQMlUkE+XHiOeUD2q1seG8E2c0PL9LsjhitHQR5NojtWcKf+w/y0KaWkeSZX3yNdCZM9PvS53E16UMUK8fS1moNXttTvlURiAFa/LcTVnt+XTUFABDbndyvGsrSDZglC1IZWH+uWdvBPpZHJEtVgyYyYH8+26S3PG3V4xiAzvpwvNL8l9uDV0A+PPr7cVEuc1pu8dhtqOvU54P4cAXDF4zezCcJNm71htWc8N/Mmw3GQ0Cm0FQfApDKTBa+ZEOAab5CeUJLt7SDhIztxZCiMx3xP9Y6Hw0S9EWj5J9ctk4 # This value was modified by the sealed-secrets pipeline

ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
    alb.ingress.kubernetes.io/healthcheck-port: traffic-port
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '15'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    alb.ingress.kubernetes.io/success-codes: '200'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '2'


postgresql:
  enabled: true
  auth:
    password: "backstage" # I hard-coded a password because for some reason, when updating the backstage with a new image tag, the new backstage pod can't connect to the database:
                          # Backstage pod log: Backend failed to start up Error: Failed to connect to the database to make sure that 'backstage_plugin_catalog' exists, error: password authentication failed for user "bn_backstage"    
                          # Postgres pod log: FATAL:  password authentication failed for user "bn_backstage"

serviceAccount:
  create: true
