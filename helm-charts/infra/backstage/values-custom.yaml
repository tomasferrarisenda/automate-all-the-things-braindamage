backstage:
  command: ["node", "packages/backend", "--config", "app-config.production.yaml"]

  image:
    registry: "" # This is necessary to override the default value "ghcr.io"
    repository: tferrari92/backstage
    tag: "4" # This value was modified by the backstage build and push pipeline

  extraEnvVars:
    - name: GITHUB_TOKEN
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: GITHUB_TOKEN
    - name: AUTH_GITHUB_CLIENT_ID
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_ID
    - name: AUTH_GITHUB_CLIENT_SECRET
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_SECRET  

  appConfig:
    catalog:
      rules:
        - allow:
            - Component
            - API
            - Resource
            - System
            - Domain
            - Location
            - User
            - Group
            - Template

      refreshIntervalSeconds: 5 # In seconds. Default is 100

      providers:
        github:
          # Catalogs
          catalogsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Resources
          resourcesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # APIs
          apisProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*api-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Templates
          templatesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/templates/**/*template.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Systems
          systemsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/systems/**/*.yaml' # this will search all folders for files that end in .yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Groups
          groupsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/groups/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-transcendence' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Users
          usersProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/users/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-transcendence' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

githubToken: AgBLJRG2P1FB9yX/ybSxsGT6gmz1Je9nrkCt/zFu/lLe6wjVe/R1KnjFGvbYgTyW/oSimjK8stdiwbevvfxdOZJyYqmJi6daUjYHgCuRi/d6oxPC0iq1DK3DGp2y2K7h3dKcc2MqfhA7WUhckb3ixwI9fWDO02sn30q1923CJFqcFGopfpXuvACQQUwdWyb1qjDb8OzmoFA5T0hqQDOyw6720y3X9qsQnEzk9hejj8DH0dNB3rgJW2ewyjdDnfhfc1418KjWb3jBFSI5/SiS6IxErJhyUlAxrz5gkddIQmJM60iBNsSl3/k6sQMdK1ANzEhGM96DmybJaXbSWDCq4mozrswWExNGMtxiFhy01pGwb3dqZGoYX/ju+0euQ+YW3qn7Knm+CN6pw3eOWt/Km9AZbmq2r7EV+KNhkYXFw7fqXiaYJy9F4/qYheB/WF21bWukSYlMfOGrm+GJyp/ES3uGZ9veuUYAdTRSH92G5Z/SapqCvK+SCp5oO5yDbqQ2yhp28AYfvLfWmle+841Casrh5AnCtcb086Ga6F0v8uPMB58QAbFg/zIEo9ao4E0tLX4W8xTJvf9mHVj1D2dqSBTR/VdLYnw7dkM+SnYLKqJwa22pbFN+PM5lruj3f/IqLZAuvfAnNMXpZxbBW+SnNEuhfh2sD+yl6oxeH6AckREHe5AyWN+PW7ra5i6AROQYmQD5mq2FGLblG44fF6cFWmsmeth6RhDfG6hLXzofStgkNcwChrzPMEaZ # This value was modified by the sealed-secrets pipeline
githubAuthClientId: AgAJ2HyYCor+Z0z6oUOJN9v3Kq7IfJuHjkw32RbgqgIXp7R69mQqtIC/HNyTtuQjD2FcD2wwfeCQOkFTy/ViwhU9P+2cx+0mwJODzS9X6duBSfu4H2Q57oWkI9jtTauGalHX1M8AOjHrhkou8gBgAj4MoYprTWEQOKBn4nPBGFU/bkec7xdU2YoNgN18Asde5e4qFAKn2nnzBsOxZ5MkRRAUs0at+7VRHNpA9/Q0HqvGaOzdH7Na1ssFWMC920+0FBJFCpAnWtChptUbSQoWQC/237kJPEMN81LrHMlefFoKFzhSqKtEdJPhcj7+XxXNMjTJEUCMsocMaQ0c1YOVVYkNGkX4T95tGRSPp9W+wiiOSptU//9R8r1JFR+8ax7C13vFiFwPdvnEbrEyGa0aWfZ8vsiom5i4HIVsNuZY+4Sf3jFxHbHoxfZr5JfGg60r1CF8yYv7KbZTxYjXy4nTWhV3VcdmR3SVeQNrAzU/37Og9bJK9LgivPNa1TZ0+9ARX7VZBtfPMaR1SFuRelY8Wwn18+CCzZ3/SoLJgpbHkbrMNsrenU5pHn2x2zL0dNz2ZAbEG2bUZ/ZFz0OyLTYm/qHBwVgjv+WGxpJh00n6+4RW/UJAN20C0G9jlLNxdIO5lxA2ozhaU6pnsCbAoZ2LluwDn333UMwdMYJMk3n9NS9/A+sYrekWpl1gVlFXxnleAwMv3oWlHL/qBCkQ472FYB7kxH7gUQ== # This value was modified by the sealed-secrets pipeline
githubAuthClientSecret: AgCE1juLH7JxVFs652x/iDVX2FrQ8+4KcYYTYfD/c1eK5EEoEbJfltI+qzQdX7TKhzVssNJlxr7F/cwsxs3cFSNu6QE+SJ/rtYK3et9GtocgRTsMCmLkHLdvyT5nCOBY/mRCV68NlU+yz3p9tuww5/Pe7kqbBvMKto3XHDrSeRnaaK/M6uiRD2r7gWPucltX5RLAejv3sufkSEflEOzSBJh7XC3SQrMblYz+6q3594/MfPnPCAlixNRZRzJ7fJwgwEY1Egnap/d6HQbAEcXVs4bndf76hEOU8B6+HiyjRLjK0SNMiP4ONJAOOVYedRsA+XTqWdpb2E8G7rCCozHsIM2nScHXgAfilvfZmqwxZjTh5vQ9pmJK3WPw8UjXaYTvvjzNISVOvSGbD1m53KkDKeZDBzT1zG5VkVXouAo7nBcvugZJ5X4IG5jE49u1DQ7sYTN1wJWP0NzPiDem8h3srXQPmOwvijOX1kk8y3AQlc2u4wFXH0dhyvzR7i10XmTTV5yuJWqWj784jgpyJem6n6D5vE/2l09rLSnDSeux4Cq8APrUptrf3tkFpthBVgwxP5ZWj1erpYS17l0jSS9EFHFcQfnktmfMG402AdR6l7dhTcAvurhj58SVdenzOrLdtIByxqsfYyMBS7Lo/Tx7CQotrFq9vneCYZ5NZ6R0SIgBzsPS2ogcyGUWRklPLmfPbIzfHf1UCVFGacTXGHwvOm8lAxJ9NJlGpimp+oZS1MpexzNeN8PAks5p # This value was modified by the sealed-secrets pipeline

ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
    alb.ingress.kubernetes.io/healthcheck-port: traffic-port
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '15'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    alb.ingress.kubernetes.io/success-codes: '200'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '2'


postgresql:
  enabled: true
  auth:
    password: "backstage" # I hard-coded a password because for some reason, when updating the backstage with a new image tag, the new backstage pod can't connect to the database:
                          # Backstage pod log: Backend failed to start up Error: Failed to connect to the database to make sure that 'backstage_plugin_catalog' exists, error: password authentication failed for user "bn_backstage"    
                          # Postgres pod log: FATAL:  password authentication failed for user "bn_backstage"

serviceAccount:
  create: true
