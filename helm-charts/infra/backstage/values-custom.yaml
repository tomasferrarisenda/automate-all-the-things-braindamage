backstage:
  command: ["node", "packages/backend", "--config", "app-config.production.yaml"]

  image:
    registry: "" # This is necessary to override the default value "ghcr.io"
    repository: tferrari92/backstage
    tag: "16" # This value was modified by the backstage build and push pipeline

  extraEnvVars:
    - name: GITHUB_TOKEN
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: GITHUB_TOKEN
    - name: AUTH_GITHUB_CLIENT_ID
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_ID
    - name: AUTH_GITHUB_CLIENT_SECRET
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_SECRET  
    - name: ARGOCD_AUTH_TOKEN
      valueFrom:
        secretKeyRef:
          name: argocd-auth-token
          key: ARGOCD_AUTH_TOKEN
    - name: GRAFANA_TOKEN
      valueFrom:
        secretKeyRef:
          name: grafana-token
          key: GRAFANA_TOKEN

  appConfig:
    catalog:
      rules:
        - allow:
            - Component
            - API
            - Resource
            - System
            - Domain
            - Location
            - User
            - Group
            - Template

      refreshIntervalSeconds: 5 # In seconds. Default is 100

      providers:
        github:
          # Catalogs
          catalogsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Resources
          resourcesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/crossplane-example-manifests/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            # catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # APIs
          apisProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*api-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Templates
          templatesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/templates/**/*template.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Systems
          systemsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/systems/**/*.yaml' # this will search all folders for files that end in .yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Groups
          groupsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/groups/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-transcendence' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Users
          usersProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/users/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-transcendence' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }


githubToken: AgAcR0wrU5KnVdnVgwvgNEx+YL5oWt/590Bxakv1+84Qy6vWGt+Bm7tkoi65l0ZAskkmqltS+Ey0P1j0AeqVtzoKyM1L9O6q8yt4YE2dwFTsjtnBh5ImaDlTsRN1bkT8zRRbzpzmhYa41o1HBLb8sE7pgTm8W0DmEpERlLN2yfaErN0sXKpH/6218HAPzaCI1rnHpeYAI+hIdi8f3KM6LT+deIhZD7cyxgBp3SiTEW1Q7r5sZJkzAZ9hWqUF2CkVoTDbbXbpAGyHZ5vtZxhNJ0OCGYw67xzuGLbtvl/hknPeSHrynwykab/fhwFACXqrlSwbSJ3F5A/iRG3bhIa7EgPGanI0HAzbQQ0caomi/Q3TdKSo7NlxSLyUEZioih0jpOF7na7HebMtTKoNUEtqPSZvJ7thTp8fd1/JsLS4Zh+d5oVXejrOD2tWe4PQHia6y3dMKj9VEsILzwPItrD/D0vI6wtf0bX6fllNGzamqugnWlSWYHdWtA8Z77aZ4idXL0paiDLfNrivxhY/MLodKIWLq9OeA45564l9Ivg2wP72THTL8kcglGc4KPYj4FZ4mMZN+FjN1xsGPjPkKvty/n27NLfarX8tbS7FE9Zy9jdfTG6yNZdF7u0txnYgs0WO3On7mKLcszIuK33t6C/Iv7/Llox5PJVLd83D5MHOiGP6/w/p9VMbb/2bfSEVgtOu91hqGqeVd7AQx1HRn3Bokfnk8Q9+XToIovWGZE3dSZErMDZ0SuZx8ghp # This value was modified by the sealed-secrets pipeline
githubAuthClientId: AgB1RVUmcumxte/DG52sKBFiLIgEzXyl7aqydaUtyxMfoaMjPeMjVOj1kVaxico7/AvI0BjPbYhx5/urJ54MEPFzLd377O6xks32o7tKZqWDnkwyqDKj6zYeyvEBzsYyT6ZGTXzJXrV3cuU/vz3sU5qg/zD0y+bksh7p2keViaA8BbvNjT33BS7jtaKhlnxbK6l3lyXLQcVndUw4dL6FQ85VoHqK4qdmNh6ZxFjkMMfyP/W0GpcTeKZMep2C8VH4mmm5CkBQ3BGfayp4b3gtuvEKYtsZy+nNgZzuOVoRWuCt7UNh6SFemJgg6mDB1/cbJfWi2ykDlRR6lhli8cSkR16gyjRcANabvAueQcHZphuA5iBGICuZqkoy+GKymsgL684RCdPkrvYvprxJi1KMPSQkN6nbSJoz3bsjisWIPY8GOuUE7vRlXoqJAIXxWj2trhNnXMCFX7r8Wos5hWT16dTBBfpAyQgihvHwVn3XzPxRhIWpxkAvjtoCIazDzw/JRSCDaqqLUaIMxD2w48NP4IwuYVQjinbVU06/TvGApgbjptTNEOMPUWv1kXUSX5MTY0XfJrs9JCJv2m/P7LQvBJjyvG9Bkx9DQddavOHmEKiHEBCLL3Ku2gCu1+uQLuphP5ghlKL0ll5PNElKqGyGXLHiYr0PokW36YpEjZqz2/EAHOkG/K5cuo5g569mcuU3CT3rK5fN1kCIDBUnnI436VJkKteEhw== # This value was modified by the sealed-secrets pipeline
githubAuthClientSecret: AgAlmaqOgV8x6T54EYNdGDznBZfdoINuL9Elkpc6zgPM7oPY0E4QIX268omA/q/MZk/VsFZgfcrjAaZqT9E7xWpiZRuVZPbVKR5SeURSHcOTFQRhBeuTJVHqOVSJZFpRiOkLn55eJn/9ndThbfDYLJBp4JkuSnGXYZuBdZLzpg/xR8QTQPuEiB1Wz9tPvnwPI3eyG5FN2BxkXHiWK5CqY665M5GPUA/ZAPdyK0LRommKMCho113wdjPrazDfyj3/ALQ7LnEaheau7dwf7B3XYSvPUUVZqUJdfQ9kAtLb5dnsA0qEqsoo2gl3u1w0WE1EZ/PIEVxFlYISe4unSbMiOwVyTrrvLw5xv6h9mNCLo6mbDVcVyt7yX4sFLj4kUd0XE5C3z91mG8Sz7Xbsj1TqCxNj0/9AUWoJCoC6MgnKKskAce8Dy/lFuQBS5KkYIcPiJo7li3VI62CW43y9RlTK2dp93uYjoprCMrQgvqP37OgXep68lOqC0W6I7QEO2YspW/esivNCoQiplU9caJ2QEgxYzMkBYBxms/S04oQymusLXSCSuRrPEHn6GCN9HFCCIHm90A4QlT3O6I4DsvjWqOYeIb6zkN6Eo0lk8+KB4zR57IAy497vaVARbGE1BB6aLO4Ko0YOvqDknV9xtXGeREDznRTNgIKA0WOWiM0PbRYUxABKa0Nj5CAWgn9btaCpteqifGR7rsZ18tw/BDJxWdJKYVhMOX97zUSvv2RatLH7xgbaAjTxfXKb # This value was modified by the sealed-secrets pipeline

argocdAuthToken:
grafanaToken:

ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
    alb.ingress.kubernetes.io/healthcheck-port: traffic-port
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '15'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    alb.ingress.kubernetes.io/success-codes: '200'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '2'


postgresql:
  enabled: true
  auth:
    password: "backstage" # I hard-coded a password because for some reason, when updating the backstage with a new image tag, the new backstage pod can't connect to the database:
                          # Backstage pod log: Backend failed to start up Error: Failed to connect to the database to make sure that 'backstage_plugin_catalog' exists, error: password authentication failed for user "bn_backstage"    
                          # Postgres pod log: FATAL:  password authentication failed for user "bn_backstage"

serviceAccount:
  create: true
