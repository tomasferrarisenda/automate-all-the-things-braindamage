backstage:
  command: ["node", "packages/backend", "--config", "app-config.production.yaml"]

  image:
    registry: "" # This is necessary to override the default value "ghcr.io"
    repository: tferrari92/backstage
    tag: "16" # This value was modified by the backstage build and push pipeline

  extraEnvVars:
    - name: GITHUB_TOKEN
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: GITHUB_TOKEN
    - name: AUTH_GITHUB_CLIENT_ID
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_ID
    - name: AUTH_GITHUB_CLIENT_SECRET
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_SECRET  
    - name: ARGOCD_AUTH_TOKEN
      valueFrom:
        secretKeyRef:
          name: argocd-auth-token
          key: ARGOCD_AUTH_TOKEN
    - name: GRAFANA_TOKEN
      valueFrom:
        secretKeyRef:
          name: grafana-token
          key: GRAFANA_TOKEN

  appConfig:
    catalog:
      rules:
        - allow:
            - Component
            - API
            - Resource
            - System
            - Domain
            - Location
            - User
            - Group
            - Template

      refreshIntervalSeconds: 5 # In seconds. Default is 100

      providers:
        github:
          # Catalogs
          catalogsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Resources
          resourcesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/crossplane-example-manifests/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            # catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # APIs
          apisProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*api-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Templates
          templatesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/templates/**/*template.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Systems
          systemsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/systems/**/*.yaml' # this will search all folders for files that end in .yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Groups
          groupsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/groups/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-transcendence' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Users
          usersProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/users/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-transcendence' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }


githubToken: AgBD5/o87n+vXBLCh0GxoGRCShVMDJcjim8bB2WE/dytk+vqdHGerw9jSsqdr+3X+3Gsh+hIYrx2w+DiKjDbMsw7fiH74q5WXaxFpQqHmHOf3CViw7DFZjP3Q93TOOwoVIQ7EQSoOkWOHDQKmYaxGH3Cjlc9UhRe9LkfJB0sPVXb6jYpMOsgIDcSEzWFVilZI4Gfp+nRhnL4OaolgPZoXElAsR1m5wC3+oZixPBrd2iXcXJdYcmvrTMOTEJcLtKz/OWRnxEqzJdDWm/qk0lTpHmitIxj2eI5wSn7Joa4/ayUkD/r/73ihbyWoK9uZoz+yY3SzLMKMB6FzcckygeJq7xjfFfr1kR4onTzz3GoU7xKEjCaRzupWw89R0IMuY+MSTYGMjrgPyQyER7U0Fe0WDFxP8vTFoDWPlCgNevcbGAeCaa6n1cTY0x1WBujMKZNnb9gBejWjfiIwZSmkBYWcPRnfPWXgWTWTAY35F0c8sSR2KkzsEo8haPFG+FTadF+9Tblf9GdhlIsdYFJNAjT5ShRzZDT4TumIcWVtCtDKdxVsl13VkopWCKVO+ALFZrD5KWwXVtNn1a00MaQnDso4z13PRXP3dk+hW0wcdCvGXEpKZ9gZHtsZ8rWXVmWOSnHAN8hNK/4F4JJCkryla2Z3pa1CyXCi1YF8BR7oh5An/lrxG5ocUXo7d2fywYPAqLpDCWmDfSmx15i5r7RrLBkv0/oyDXDVzIAzxxLYypFFp9zT93WzHDDG3sv # This value was modified by the sealed-secrets pipeline
githubAuthClientId: AgCOHeSTJKbHBRQsf+N2T9kBwGU31fmNNUWyfIceuSxxBQzQk44nvMEcZlnuv0a1L5Sc7Q03FIzcW1MY56WY+9BHBPVMzyD6LevROyKh8JyAlIQOshyD+AWx3ROrwzv6LjTRLx7VuALbuJOelOnmFql6DgnPA5FGv58cpiLneTJZOj+PaERPC0o2Tdbf/NE9DNrU5hQ/eMkwiX4vkN43l+DFy/QV3ez+To1a4wFTqfJJim4ILeXbTzGnUBCzHFJCKIpZVwNS1WSLE3SO6fUFW6lPu6guCEo58ceZb85YGfBJ5crekAveVZLhdh2n3UlOaWFQPWJmbm6i+TSss6YrGFajYRJQvb8lfhtZCJBGLBwv0vcywGfWIFcZKC72xt8IpFM1EfqC/4Mg5S470jOiMyCGAT6CpnN+1aJ9K2Bj83/Sn8v/K63mU5rHK8KGWYQ3ZRCWMuiwet0JK+pin1nY0/YQqY/vDb9bhVPU41xXC7UkkNpYR0P7188kWIOM08bCGvAA8lHXiHUHVgbAPGu6mxyX+74vtOj+o8fe4STQx/KhzEefMIk8Zbp584mRjDlxcK2Fz/5QZXiS1GxfArbCY1eG5ir8vyllP57grELgNKYxPO+XSDUali1TWc5X4AXkIXmALf/XcY6ApdHND00JdHZpyeh9eQSFJthqoGW9Fwe9f/+l58DLIVaEXBmFrU+b8cpWFMlN1m2N7M9uCpQzr5m5mSh0gA== # This value was modified by the sealed-secrets pipeline
githubAuthClientSecret: AgCUlkvwjtBJbY5sG2HlonDYEg800g8HXZ3GljRml2QfucbK/G5XOpWDbzzLF4nKS1cywIUVkrCPUsC6fKTXqnpRL6jtLyWgKI0ei7mMJBXa2T6BIWZU0r/TDP3Js3lTgL8d+0+b7MaYv9nWIhu7IsR0E8Jh9HqCGn0u7XCQncZYDcC82bc2SqVsglPY4d+abw5+QeKUL6l2vWk8RVy0E323Z56ByIfPvCu36BbA4oqGOxuZxC6egRd1jT3QM9PnBeL6omT/TLK2lTbN1NUZ1d+WUkC5K/XZ4+onJtPncCvO3mZjTErNdwPltBe0mwVvKolf8iCUZ0+frlT+UN9AnMfSZpDXWcgncSPeuMLn+QnUBKWmaKq6WlzKebdDoOSMcJs0071bc/66PZpw0AEhuyGmOctLj4VHmDU0ekTPQJYghovH+As6w3OAYEJvi0yzoYjKEmiAVkJi8awHz61HBAFIhdr5AwXIkzW+yGmDp6HadLV9VXbI2Huez6kPJHLa4xTiVTjAs+UXpxRmpKKxG845jP56t+s4wstwR4uSHoVaBdQzjM14JqSfB95AOPE1oxDvSTgYOsyeEQbrS/8ySW+mxLMlTiDN2bVUdYR85HHwGWrWYyqdnC7suZltpWiWpp3VMqWJpA6q5RR0uTSdtr9JWXcpc3RymeCOqoSnb1QVc0FueovUShxy78fm8m8KJG4kKfCIb2c4K+P+UhSPboIJoEzM2GgXNRs4MT735nvxQQIPhC8p7i59 # This value was modified by the sealed-secrets pipeline

argocdAuthToken:
grafanaToken:

ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
    alb.ingress.kubernetes.io/healthcheck-port: traffic-port
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '15'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    alb.ingress.kubernetes.io/success-codes: '200'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '2'


postgresql:
  enabled: true
  auth:
    password: "backstage" # I hard-coded a password because for some reason, when updating the backstage with a new image tag, the new backstage pod can't connect to the database:
                          # Backstage pod log: Backend failed to start up Error: Failed to connect to the database to make sure that 'backstage_plugin_catalog' exists, error: password authentication failed for user "bn_backstage"    
                          # Postgres pod log: FATAL:  password authentication failed for user "bn_backstage"

serviceAccount:
  create: true
