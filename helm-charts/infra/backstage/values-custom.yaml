backstage:
  command: ["node", "packages/backend", "--config", "app-config.production.yaml"]

  image:
    registry: "" # This is necessary to override the default value "ghcr.io"
    repository: tferrari92/backstage
    tag: "16" # This value was modified by the backstage build and push pipeline

  extraEnvVars:
    - name: GITHUB_TOKEN
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: GITHUB_TOKEN
    - name: AUTH_GITHUB_CLIENT_ID
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_ID
    - name: AUTH_GITHUB_CLIENT_SECRET
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_SECRET  
    - name: ARGOCD_AUTH_TOKEN
      valueFrom:
        secretKeyRef:
          name: argocd-auth-token
          key: ARGOCD_AUTH_TOKEN
    - name: GRAFANA_TOKEN
      valueFrom:
        secretKeyRef:
          name: grafana-token
          key: GRAFANA_TOKEN

  appConfig:
    catalog:
      rules:
        - allow:
            - Component
            - API
            - Resource
            - System
            - Domain
            - Location
            - User
            - Group
            - Template

      refreshIntervalSeconds: 5 # In seconds. Default is 100

      providers:
        github:
          # Catalogs
          catalogsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Resources
          resourcesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/crossplane-example-manifests/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            # catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # APIs
          apisProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*api-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Templates
          templatesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/templates/**/*template.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Systems
          systemsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/systems/**/*.yaml' # this will search all folders for files that end in .yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Groups
          groupsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/groups/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-transcendence' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Users
          usersProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/users/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-transcendence' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }


githubToken: AgCP4VpxhalEX9yUBldikWdTpbeYcNdTtmbXt8NgWK1e0U2aPkHn/YK1t22KWAkWaoKvlmY817HwyqThouOqddF7bFFOVufGhIdaAMwcG7hiXiRr0z5+SmQPsLTfeQx56TExo5t4sglmyoPKHOt0MHIUxLitlUb/D7pzxErgP3QZX6/2xlRsqcdJY3Sxjyvot5PGu+IWMPfzb/U1gbIXs2+TpbeKxSwmXBxNm4TCT0qeWom+7CspoLreGMnopwHs+tLvAsWEACMJjJtXWQ1L3m/YgJy5pZ1wgk7WYAp++1X4ZMfrnPiLw3hwWLI3imRm2zi1qAn+8KqYNwTQ0hodnSQPHIJa8ZbwJE42OD1+SrMsFOcVvGuNOtHeeNQ2rUk+qE7CruI9TwjzV+bFG3+2sF5190bCQUmY9cO5Fgo+xBT9Bxel4fc/0kABBrQZddW1Tgjnpzr/UJvOJiEC7xnRKxZz1jtfSHndmyWNj9b7dWntDvN7DqATrFCUbmy6p2ekfoOXPOpmfI3OZQ5niixr5gctOZ6cpNpk6JSA/6/yFXb+JJ35rkWEEl94r2anOxwAJ2wnEVryDf0A+UokMS5fvYopkiIM4XHWFtGtKnCg/Atr34C45REyOQ221LW63uk38WKRnPf0wy8luiMSAr/hTNwqUn5Wdj6QpkAAzvJm1EO01hk+H96HXcj70ROPYsaD7NtUialg1KrPClHsrvWshWAhY04fDXKzwERh5G7tjq1N9LQn2tHK5DUv # This value was modified by the sealed-secrets pipeline
githubAuthClientId: AgAnYJQdVvfl74xRg479OTiHNIwnV6CoqgR9KyndnMrwsYgJBVt6tCrQJxsaBaZuXchedGtj5QRRuB1tUq7PU33kqsrKjIz1B00+MpDd0T14cENpahEmx3+6ASsg12hfnm+mpS8zjEiOtEN+WKP6NkaiwM4x6scY70kRcj5sMmo0WOrezHKP3J4UCE76VYwZgao0B3SD1z4qwh2q/oe6pZWvRLAlRni8uGmhHut3eLjgLpEc2L0zBaZaOTqgkwYLSAqs6agQ5ojvUiJvF88Ybib7Ch4jRTi3E2qEovBEVJ6XtKmsFuqgaWBwMuGHZTB1RTlW7cBLXb3UxHT72M8PvZ2RruZOYYJiakfJ6O3Gl7E9Gxlp/YkMCNY8y1OF3BJAnF/8LWjNmcxC33hjc3Dq3EtScr7yt6LX/xH13wlf47hgldv9KiEK13ccgk2Cz5boUon9uuS3ia/yU6/1mFLdfUaujnvx4HRoKhUA8EmAiDKQSaJUxrBU/2I8fj7jqsekxMoryUmfBMmNIEvgZk7Pbu4+Y/EXDgCcn9J3OuZFxGG2SxL04yogmV+lWhJ6k1XTImBvQvti7QXRfJuynW9fWZP76oNDGRr/39FTTPU+JbO5WLky9v0mPleoFfa4eAz1I5YbvNacJDW+jL1XxEpNJQf4L3z4Dqh2Eb+59J4btzsPAcgzWB9ylsAu0iZNBsM/ORRbHGKgkW9eIeqIc9x0jr0D//KmFQ== # This value was modified by the sealed-secrets pipeline
githubAuthClientSecret: AgBaHCx9fyqDQ+J3bWICYwhazZk42GEMUpySmPkX+gGhLWj2eRClIZFdWy1Ngp6w79Df1afrHCrLE4T1TA8V2v1vw5c6uiQubmvoYNtsituQdoLTUV2C98YBWSBs9C/Hapj8fgD3RJSHJhaej5FKVjOSygVB6ZS/DcrUEwAFkuXSuxeU63HDPt979usDl1xGSLGtj7qc4WtZ/KHlEn+hKR+KD/bCzDXHz9uEIfvntIr6qx+x6qeE/TBtsoDzp7PdgwpvfHEoXS35MzsiBx8RQAcXhU9F5/Vy0/NV6lJTgiqfUCGzQ2nKC2CdUSCo0xMQT2Hfzh0wGBF4ite/GQ234lB7pGpRJJ6M/cw9FS2CZ6wJ8jB7R7Oedu3Wbc5KOxriEQROwXk5PQ9YLXiLhl0i+JaaeTzL4ylrvClWQ1qNrwEIWxt+6SnxQZQzQc838c4MY7taUfbJ6Sw5Aa8Q6yX2qVaLDO5SiBLo/6e2heuqaKWItPBiPLgSWL4bTNcMhnLiZlk19Xan3xu4p8sH7rlNz4qCziEnSdMcModIvrYn/62nGUGTbMCztNrZ/KhguIaTB/yT3H/XNdyIEQBWnciosxjQ65pNPL9bSZfw6fxlPEAe5/Q1/nXtzSoVug9Gf2Jc8WvI6DfGOFOsoM0wBId0O7Xlc4V8OjVbZ9uSYhErrtWkVWiLf1/xC9lhPSTAqf4vakbSLa9S/Cn6Prbp5Z3mmj8/+yLDeRQoVrQnuwBexnVwl6kRp5bLycmB # This value was modified by the sealed-secrets pipeline

argocdAuthToken:
grafanaToken:

ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
    alb.ingress.kubernetes.io/healthcheck-port: traffic-port
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '15'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    alb.ingress.kubernetes.io/success-codes: '200'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '2'


postgresql:
  enabled: true
  auth:
    password: "backstage" # I hard-coded a password because for some reason, when updating the backstage with a new image tag, the new backstage pod can't connect to the database:
                          # Backstage pod log: Backend failed to start up Error: Failed to connect to the database to make sure that 'backstage_plugin_catalog' exists, error: password authentication failed for user "bn_backstage"    
                          # Postgres pod log: FATAL:  password authentication failed for user "bn_backstage"

serviceAccount:
  create: true
