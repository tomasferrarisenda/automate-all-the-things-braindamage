name: 03-Configure backstage

on:
  workflow_dispatch:
    inputs:
      # ARGOCD_URL:
      #   description: 'Introduce the URL of your ArgoCD instance. No trailing slash. Example: http://argocd.example.com'
      #   required: true
      # GRAFANA_URL:
      #   description: 'Introduce the URL of your Grafana instance. No trailing slash. Example: http://grafana.example.com'
      #   required: true
      # AUTH_GITHUB_CLIENT_SECRET:
      #   description: 'Introduce your GitHub Auth Client Secret for Backstage'
      #   required: true
      # DEV_REDIS_SECRET:
      #   description: 'Introduce the password for the DEV ElastiCache DB'
      #   required: true
      # STAGE_REDIS_SECRET:
      #   description: 'Introduce the password for the STAGE ElastiCache DB'
      #   required: true
      # PROD_REDIS_SECRET:
      #   description: 'Introduce the password for the PROD ElastiCache DB'
      #   required: true

env:
  AWS_REGION: us-east-1 # This value was modified by the initial-setup python script
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  PROJECT: taylor # This value was modified by the initial-setup python script
  # SYSTEM: meme-web


jobs:
  generate-sealed-secrets:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure kubeconfig
        run: | 
          aws eks --region $AWS_REGION update-kubeconfig --name $PROJECT-cluster 

     - name: Get URLS
        run: | 
          export BACKSTAGE_URL=$(kubectl get svc backstage -n backstage -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          export ARGOCD_URL=$(kubectl get svc argocd-server -n argocd -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          export GRAFANA_URL=$(kubectl get svc grafana -n monitoring -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')

     - name: Update Backstage app-config.production.yaml
        run: | 
          sed    

      - name: Get ArgoCD auth token
        run: | 
          export ARGOCD_ADMIN_PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)
          export ARGOCD_ADMIN_BEARER_TOKEN=$(curl $ARGOCD_URL/api/v1/session -d '{"username":"admin","password":"'"$ARGOCD_ADMIN_PASSWORD"'"}' | grep -Po '"token":\s*"\K([^"]*)')
          export ARGOCD_AUTH_TOKEN_RAW=$(curl -X POST $ARGOCD_URL/api/v1/account/backstage-service-account/token \
                                              -H "Content-Type: application/json" \
                                              -H "Authorization: Bearer $ARGOCD_ADMIN_BEARER_TOKEN" \
                                              -d '{
                                                "expiresIn": 2592000,
                                                "id": "1",
                                                "name": "backstage-token"
                                              }')
          export ARGOCD_AUTH_TOKEN="argocd.token=$(echo $ARGOCD_AUTH_TOKEN_RAW | grep -Po '"token":\s*"\K([^"]*)')"
          echo "#############################################################################"
          echo "#############################################################################"
          echo "#############################################################################"
          echo " "
          echo "ARGOCD_AUTH_TOKEN=$ARGOCD_AUTH_TOKEN"
          echo " "
          echo "#############################################################################"
          echo "#############################################################################"
          echo "#############################################################################"



      # - name: Configure kubeconfig
      #   run: | 
      #     echo -e "[default]\naws_access_key_id = $AWS_ACCESS_KEY_ID\naws_secret_access_key = $AWS_SECRET_ACCESS_KEY" > aws-credentials.txt


      - name: Get Grafana auth token
        run: | 
          curl -X POST '$GRAFANA_URL/api/serviceaccounts' \
              -H 'Accept: application/json' \
              -H 'Content-Type: application/json' \
              -H 'Authorization: Basic YWRtaW46YXV0b21hdGUtYWxsLXRoZS10aGluZ3M=' \
              -d '{
                    "name": "backstage",
                    "role": "Viewer",
                    "isDisabled": false
                  }'
          export GRAFANA_TOKEN=$(curl -X POST '$GRAFANA_URL/api/serviceaccounts/2/tokens' \
                                      -H 'Accept: application/json' \
                                      -H 'Content-Type: application/json' \
                                      -H 'Authorization: Basic YWRtaW46YXV0b21hdGUtYWxsLXRoZS10aGluZ3M=' \
                                      -d '{
                                            "name": "backstage-token"
                                          }' | grep -Po '"key":"\K.*?(?=")')
          echo "#############################################################################"
          echo "#############################################################################"
          echo "#############################################################################"
          echo " "
          echo "GRAFANA_TOKEN=$GRAFANA_TOKEN"
          echo " "
          echo "#############################################################################"
          echo "#############################################################################"
          echo "#############################################################################"

      - name: PROVISORY create secrets
        run: | 
          kubectl create secret generic -n backstage argocd-auth-token --from-literal=ARGOCD_AUTH_TOKEN="$ARGOCD_AUTH_TOKEN"
          kubectl create secret generic -n backstage grafana-token --from-literal=GRAFANA_TOKEN="$GRAFANA_TOKEN"